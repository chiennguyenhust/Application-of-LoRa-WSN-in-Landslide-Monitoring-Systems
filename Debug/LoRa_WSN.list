
LoRa_WSN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb0c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000560  0800bca0  0800bca0  0000cca0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c200  0800c200  0000e1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c200  0800c200  0000d200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c208  0800c208  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c208  0800c208  0000d208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c20c  0800c20c  0000d20c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800c210  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e1d8  2**0
                  CONTENTS
 10 .bss          00004720  200001d8  200001d8  0000e1d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200048f8  200048f8  0000e1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e38b  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a5b  00000000  00000000  0002c593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019a0  00000000  00000000  00030ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013d4  00000000  00000000  00032990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027b4f  00000000  00000000  00033d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021e1f  00000000  00000000  0005b8b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7c9e  00000000  00000000  0007d6d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00165370  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007f30  00000000  00000000  001653b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  0016d2e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bc84 	.word	0x0800bc84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800bc84 	.word	0x0800bc84

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fea:	463b      	mov	r3, r7
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ff6:	4b21      	ldr	r3, [pc, #132]	@ (800107c <MX_ADC1_Init+0x98>)
 8000ff8:	4a21      	ldr	r2, [pc, #132]	@ (8001080 <MX_ADC1_Init+0x9c>)
 8000ffa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ffc:	4b1f      	ldr	r3, [pc, #124]	@ (800107c <MX_ADC1_Init+0x98>)
 8000ffe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001002:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001004:	4b1d      	ldr	r3, [pc, #116]	@ (800107c <MX_ADC1_Init+0x98>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800100a:	4b1c      	ldr	r3, [pc, #112]	@ (800107c <MX_ADC1_Init+0x98>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001010:	4b1a      	ldr	r3, [pc, #104]	@ (800107c <MX_ADC1_Init+0x98>)
 8001012:	2200      	movs	r2, #0
 8001014:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001016:	4b19      	ldr	r3, [pc, #100]	@ (800107c <MX_ADC1_Init+0x98>)
 8001018:	2200      	movs	r2, #0
 800101a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800101e:	4b17      	ldr	r3, [pc, #92]	@ (800107c <MX_ADC1_Init+0x98>)
 8001020:	2200      	movs	r2, #0
 8001022:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001024:	4b15      	ldr	r3, [pc, #84]	@ (800107c <MX_ADC1_Init+0x98>)
 8001026:	4a17      	ldr	r2, [pc, #92]	@ (8001084 <MX_ADC1_Init+0xa0>)
 8001028:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800102a:	4b14      	ldr	r3, [pc, #80]	@ (800107c <MX_ADC1_Init+0x98>)
 800102c:	2200      	movs	r2, #0
 800102e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001030:	4b12      	ldr	r3, [pc, #72]	@ (800107c <MX_ADC1_Init+0x98>)
 8001032:	2201      	movs	r2, #1
 8001034:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001036:	4b11      	ldr	r3, [pc, #68]	@ (800107c <MX_ADC1_Init+0x98>)
 8001038:	2200      	movs	r2, #0
 800103a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800103e:	4b0f      	ldr	r3, [pc, #60]	@ (800107c <MX_ADC1_Init+0x98>)
 8001040:	2201      	movs	r2, #1
 8001042:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001044:	480d      	ldr	r0, [pc, #52]	@ (800107c <MX_ADC1_Init+0x98>)
 8001046:	f000 ff05 	bl	8001e54 <HAL_ADC_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001050:	f000 fb56 	bl	8001700 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001054:	2301      	movs	r3, #1
 8001056:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001058:	2301      	movs	r3, #1
 800105a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800105c:	2300      	movs	r3, #0
 800105e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001060:	463b      	mov	r3, r7
 8001062:	4619      	mov	r1, r3
 8001064:	4805      	ldr	r0, [pc, #20]	@ (800107c <MX_ADC1_Init+0x98>)
 8001066:	f000 ff39 	bl	8001edc <HAL_ADC_ConfigChannel>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001070:	f000 fb46 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	200001f4 	.word	0x200001f4
 8001080:	40012000 	.word	0x40012000
 8001084:	0f000001 	.word	0x0f000001

08001088 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	@ 0x28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a2e      	ldr	r2, [pc, #184]	@ (8001160 <HAL_ADC_MspInit+0xd8>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d156      	bne.n	8001158 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001164 <HAL_ADC_MspInit+0xdc>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b2:	4a2c      	ldr	r2, [pc, #176]	@ (8001164 <HAL_ADC_MspInit+0xdc>)
 80010b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001164 <HAL_ADC_MspInit+0xdc>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	4b26      	ldr	r3, [pc, #152]	@ (8001164 <HAL_ADC_MspInit+0xdc>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	4a25      	ldr	r2, [pc, #148]	@ (8001164 <HAL_ADC_MspInit+0xdc>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d6:	4b23      	ldr	r3, [pc, #140]	@ (8001164 <HAL_ADC_MspInit+0xdc>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010e2:	2302      	movs	r3, #2
 80010e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010e6:	2303      	movs	r3, #3
 80010e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4619      	mov	r1, r3
 80010f4:	481c      	ldr	r0, [pc, #112]	@ (8001168 <HAL_ADC_MspInit+0xe0>)
 80010f6:	f001 fcfd 	bl	8002af4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80010fa:	4b1c      	ldr	r3, [pc, #112]	@ (800116c <HAL_ADC_MspInit+0xe4>)
 80010fc:	4a1c      	ldr	r2, [pc, #112]	@ (8001170 <HAL_ADC_MspInit+0xe8>)
 80010fe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001100:	4b1a      	ldr	r3, [pc, #104]	@ (800116c <HAL_ADC_MspInit+0xe4>)
 8001102:	2200      	movs	r2, #0
 8001104:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001106:	4b19      	ldr	r3, [pc, #100]	@ (800116c <HAL_ADC_MspInit+0xe4>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800110c:	4b17      	ldr	r3, [pc, #92]	@ (800116c <HAL_ADC_MspInit+0xe4>)
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001112:	4b16      	ldr	r3, [pc, #88]	@ (800116c <HAL_ADC_MspInit+0xe4>)
 8001114:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001118:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800111a:	4b14      	ldr	r3, [pc, #80]	@ (800116c <HAL_ADC_MspInit+0xe4>)
 800111c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001120:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001122:	4b12      	ldr	r3, [pc, #72]	@ (800116c <HAL_ADC_MspInit+0xe4>)
 8001124:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001128:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800112a:	4b10      	ldr	r3, [pc, #64]	@ (800116c <HAL_ADC_MspInit+0xe4>)
 800112c:	2200      	movs	r2, #0
 800112e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001130:	4b0e      	ldr	r3, [pc, #56]	@ (800116c <HAL_ADC_MspInit+0xe4>)
 8001132:	2200      	movs	r2, #0
 8001134:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001136:	4b0d      	ldr	r3, [pc, #52]	@ (800116c <HAL_ADC_MspInit+0xe4>)
 8001138:	2200      	movs	r2, #0
 800113a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800113c:	480b      	ldr	r0, [pc, #44]	@ (800116c <HAL_ADC_MspInit+0xe4>)
 800113e:	f001 f9cd 	bl	80024dc <HAL_DMA_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001148:	f000 fada 	bl	8001700 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a07      	ldr	r2, [pc, #28]	@ (800116c <HAL_ADC_MspInit+0xe4>)
 8001150:	639a      	str	r2, [r3, #56]	@ 0x38
 8001152:	4a06      	ldr	r2, [pc, #24]	@ (800116c <HAL_ADC_MspInit+0xe4>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001158:	bf00      	nop
 800115a:	3728      	adds	r7, #40	@ 0x28
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40012000 	.word	0x40012000
 8001164:	40023800 	.word	0x40023800
 8001168:	40020000 	.word	0x40020000
 800116c:	2000023c 	.word	0x2000023c
 8001170:	40026410 	.word	0x40026410

08001174 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	607b      	str	r3, [r7, #4]
 800117e:	4b0c      	ldr	r3, [pc, #48]	@ (80011b0 <MX_DMA_Init+0x3c>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	4a0b      	ldr	r2, [pc, #44]	@ (80011b0 <MX_DMA_Init+0x3c>)
 8001184:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001188:	6313      	str	r3, [r2, #48]	@ 0x30
 800118a:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <MX_DMA_Init+0x3c>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2105      	movs	r1, #5
 800119a:	2038      	movs	r0, #56	@ 0x38
 800119c:	f001 f974 	bl	8002488 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011a0:	2038      	movs	r0, #56	@ 0x38
 80011a2:	f001 f98d 	bl	80024c0 <HAL_NVIC_EnableIRQ>

}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40023800 	.word	0x40023800

080011b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4a07      	ldr	r2, [pc, #28]	@ (80011e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80011c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	4a06      	ldr	r2, [pc, #24]	@ (80011e4 <vApplicationGetIdleTaskMemory+0x30>)
 80011ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2280      	movs	r2, #128	@ 0x80
 80011d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80011d2:	bf00      	nop
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	200005e0 	.word	0x200005e0
 80011e4:	20000680 	.word	0x20000680

080011e8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80011e8:	b5b0      	push	{r4, r5, r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ReadSensorTask */
  osThreadDef(ReadSensorTask, StartReadSensorTask, osPriorityNormal, 0, 256);
 80011ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001218 <MX_FREERTOS_Init+0x30>)
 80011f0:	1d3c      	adds	r4, r7, #4
 80011f2:	461d      	mov	r5, r3
 80011f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadSensorTaskHandle = osThreadCreate(osThread(ReadSensorTask), NULL);
 8001200:	1d3b      	adds	r3, r7, #4
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f004 faf0 	bl	80057ea <osThreadCreate>
 800120a:	4603      	mov	r3, r0
 800120c:	4a03      	ldr	r2, [pc, #12]	@ (800121c <MX_FREERTOS_Init+0x34>)
 800120e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001210:	bf00      	nop
 8001212:	3720      	adds	r7, #32
 8001214:	46bd      	mov	sp, r7
 8001216:	bdb0      	pop	{r4, r5, r7, pc}
 8001218:	0800bcb0 	.word	0x0800bcb0
 800121c:	200005dc 	.word	0x200005dc

08001220 <StartReadSensorTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReadSensorTask */
void StartReadSensorTask(void const * argument)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af06      	add	r7, sp, #24
 8001226:	6078      	str	r0, [r7, #4]
//    if (bmp280.id == BMP280_CHIP_ID) {
//        printf("BMP280 init successfully\n");
//        osDelay(10);
//    }

		printf("Mode: Master\r\n");
 8001228:	4845      	ldr	r0, [pc, #276]	@ (8001340 <StartReadSensorTask+0x120>)
 800122a:	f007 f891 	bl	8008350 <puts>

		//initialize LoRa module
		SX1278_hw.dio0.port = DIO0_GPIO_Port;
 800122e:	4b45      	ldr	r3, [pc, #276]	@ (8001344 <StartReadSensorTask+0x124>)
 8001230:	4a45      	ldr	r2, [pc, #276]	@ (8001348 <StartReadSensorTask+0x128>)
 8001232:	60da      	str	r2, [r3, #12]
		SX1278_hw.dio0.pin = DIO0_Pin;
 8001234:	4b43      	ldr	r3, [pc, #268]	@ (8001344 <StartReadSensorTask+0x124>)
 8001236:	2204      	movs	r2, #4
 8001238:	609a      	str	r2, [r3, #8]
		SX1278_hw.nss.port = NSS_GPIO_Port;
 800123a:	4b42      	ldr	r3, [pc, #264]	@ (8001344 <StartReadSensorTask+0x124>)
 800123c:	4a42      	ldr	r2, [pc, #264]	@ (8001348 <StartReadSensorTask+0x128>)
 800123e:	615a      	str	r2, [r3, #20]
		SX1278_hw.nss.pin = NSS_Pin;
 8001240:	4b40      	ldr	r3, [pc, #256]	@ (8001344 <StartReadSensorTask+0x124>)
 8001242:	2201      	movs	r2, #1
 8001244:	611a      	str	r2, [r3, #16]
		SX1278_hw.reset.port = RST_GPIO_Port;
 8001246:	4b3f      	ldr	r3, [pc, #252]	@ (8001344 <StartReadSensorTask+0x124>)
 8001248:	4a3f      	ldr	r2, [pc, #252]	@ (8001348 <StartReadSensorTask+0x128>)
 800124a:	605a      	str	r2, [r3, #4]
		SX1278_hw.reset.pin = RST_Pin;
 800124c:	4b3d      	ldr	r3, [pc, #244]	@ (8001344 <StartReadSensorTask+0x124>)
 800124e:	2202      	movs	r2, #2
 8001250:	601a      	str	r2, [r3, #0]
		SX1278_hw.spi = &hspi3;
 8001252:	4b3c      	ldr	r3, [pc, #240]	@ (8001344 <StartReadSensorTask+0x124>)
 8001254:	4a3d      	ldr	r2, [pc, #244]	@ (800134c <StartReadSensorTask+0x12c>)
 8001256:	619a      	str	r2, [r3, #24]

		SX1278.hw = &SX1278_hw;
 8001258:	4b3d      	ldr	r3, [pc, #244]	@ (8001350 <StartReadSensorTask+0x130>)
 800125a:	4a3a      	ldr	r2, [pc, #232]	@ (8001344 <StartReadSensorTask+0x124>)
 800125c:	601a      	str	r2, [r3, #0]

		printf("Configuring LoRa module\r\n");
 800125e:	483d      	ldr	r0, [pc, #244]	@ (8001354 <StartReadSensorTask+0x134>)
 8001260:	f007 f876 	bl	8008350 <puts>
		SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,
 8001264:	230a      	movs	r3, #10
 8001266:	9305      	str	r3, [sp, #20]
 8001268:	2300      	movs	r3, #0
 800126a:	9304      	str	r3, [sp, #16]
 800126c:	2300      	movs	r3, #0
 800126e:	9303      	str	r3, [sp, #12]
 8001270:	2307      	movs	r3, #7
 8001272:	9302      	str	r3, [sp, #8]
 8001274:	2301      	movs	r3, #1
 8001276:	9301      	str	r3, [sp, #4]
 8001278:	2301      	movs	r3, #1
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	a32e      	add	r3, pc, #184	@ (adr r3, 8001338 <StartReadSensorTask+0x118>)
 800127e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001282:	4833      	ldr	r0, [pc, #204]	@ (8001350 <StartReadSensorTask+0x130>)
 8001284:	f005 ff77 	bl	8007176 <SX1278_init>
		SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);
		printf("Done configuring LoRaModule\r\n");
 8001288:	4833      	ldr	r0, [pc, #204]	@ (8001358 <StartReadSensorTask+0x138>)
 800128a:	f007 f861 	bl	8008350 <puts>


		ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 800128e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001292:	2110      	movs	r1, #16
 8001294:	482e      	ldr	r0, [pc, #184]	@ (8001350 <StartReadSensorTask+0x130>)
 8001296:	f005 fed7 	bl	8007048 <SX1278_LoRaEntryTx>
 800129a:	4603      	mov	r3, r0
 800129c:	4a2f      	ldr	r2, [pc, #188]	@ (800135c <StartReadSensorTask+0x13c>)
 800129e:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2140      	movs	r1, #64	@ 0x40
 80012a4:	482e      	ldr	r0, [pc, #184]	@ (8001360 <StartReadSensorTask+0x140>)
 80012a6:	f001 fdd9 	bl	8002e5c <HAL_GPIO_WritePin>

  /* Infinite loop */
  while(1)
  {

		printf("Master ...\r\n");
 80012aa:	482e      	ldr	r0, [pc, #184]	@ (8001364 <StartReadSensorTask+0x144>)
 80012ac:	f007 f850 	bl	8008350 <puts>
		osDelay(1000);
 80012b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012b4:	f004 fae5 	bl	8005882 <osDelay>
		printf("Sending package...\r\n");
 80012b8:	482b      	ldr	r0, [pc, #172]	@ (8001368 <StartReadSensorTask+0x148>)
 80012ba:	f007 f849 	bl	8008350 <puts>

		message_length = sprintf(buffer, "Hello %d", message);
 80012be:	4b2b      	ldr	r3, [pc, #172]	@ (800136c <StartReadSensorTask+0x14c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	492a      	ldr	r1, [pc, #168]	@ (8001370 <StartReadSensorTask+0x150>)
 80012c6:	482b      	ldr	r0, [pc, #172]	@ (8001374 <StartReadSensorTask+0x154>)
 80012c8:	f007 f84a 	bl	8008360 <siprintf>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4a2a      	ldr	r2, [pc, #168]	@ (8001378 <StartReadSensorTask+0x158>)
 80012d0:	6013      	str	r3, [r2, #0]
		ret = SX1278_LoRaEntryTx(&SX1278, message_length, 2000);
 80012d2:	4b29      	ldr	r3, [pc, #164]	@ (8001378 <StartReadSensorTask+0x158>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80012dc:	4619      	mov	r1, r3
 80012de:	481c      	ldr	r0, [pc, #112]	@ (8001350 <StartReadSensorTask+0x130>)
 80012e0:	f005 feb2 	bl	8007048 <SX1278_LoRaEntryTx>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4a1d      	ldr	r2, [pc, #116]	@ (800135c <StartReadSensorTask+0x13c>)
 80012e8:	6013      	str	r3, [r2, #0]
		printf("Entry: %d\r\n", ret);
 80012ea:	4b1c      	ldr	r3, [pc, #112]	@ (800135c <StartReadSensorTask+0x13c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4619      	mov	r1, r3
 80012f0:	4822      	ldr	r0, [pc, #136]	@ (800137c <StartReadSensorTask+0x15c>)
 80012f2:	f006 ffc5 	bl	8008280 <iprintf>

		printf("Sending %s\r\n", buffer);
 80012f6:	491f      	ldr	r1, [pc, #124]	@ (8001374 <StartReadSensorTask+0x154>)
 80012f8:	4821      	ldr	r0, [pc, #132]	@ (8001380 <StartReadSensorTask+0x160>)
 80012fa:	f006 ffc1 	bl	8008280 <iprintf>
		ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) buffer,
 80012fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001378 <StartReadSensorTask+0x158>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	b2da      	uxtb	r2, r3
 8001304:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001308:	491a      	ldr	r1, [pc, #104]	@ (8001374 <StartReadSensorTask+0x154>)
 800130a:	4811      	ldr	r0, [pc, #68]	@ (8001350 <StartReadSensorTask+0x130>)
 800130c:	f005 fef4 	bl	80070f8 <SX1278_LoRaTxPacket>
 8001310:	4603      	mov	r3, r0
 8001312:	4a12      	ldr	r2, [pc, #72]	@ (800135c <StartReadSensorTask+0x13c>)
 8001314:	6013      	str	r3, [r2, #0]
				message_length, 2000);
		message += 1;
 8001316:	4b15      	ldr	r3, [pc, #84]	@ (800136c <StartReadSensorTask+0x14c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	3301      	adds	r3, #1
 800131c:	4a13      	ldr	r2, [pc, #76]	@ (800136c <StartReadSensorTask+0x14c>)
 800131e:	6013      	str	r3, [r2, #0]

		printf("Transmission: %d\r\n", ret);
 8001320:	4b0e      	ldr	r3, [pc, #56]	@ (800135c <StartReadSensorTask+0x13c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4619      	mov	r1, r3
 8001326:	4817      	ldr	r0, [pc, #92]	@ (8001384 <StartReadSensorTask+0x164>)
 8001328:	f006 ffaa 	bl	8008280 <iprintf>
		printf("Package sent...\r\n");
 800132c:	4816      	ldr	r0, [pc, #88]	@ (8001388 <StartReadSensorTask+0x168>)
 800132e:	f007 f80f 	bl	8008350 <puts>
		printf("Master ...\r\n");
 8001332:	bf00      	nop
 8001334:	e7b9      	b.n	80012aa <StartReadSensorTask+0x8a>
 8001336:	bf00      	nop
 8001338:	19de5080 	.word	0x19de5080
 800133c:	00000000 	.word	0x00000000
 8001340:	0800bccc 	.word	0x0800bccc
 8001344:	2000029c 	.word	0x2000029c
 8001348:	40020c00 	.word	0x40020c00
 800134c:	200008d4 	.word	0x200008d4
 8001350:	200002b8 	.word	0x200002b8
 8001354:	0800bcdc 	.word	0x0800bcdc
 8001358:	0800bcf8 	.word	0x0800bcf8
 800135c:	200003d0 	.word	0x200003d0
 8001360:	40020800 	.word	0x40020800
 8001364:	0800bd18 	.word	0x0800bd18
 8001368:	0800bd24 	.word	0x0800bd24
 800136c:	200005d4 	.word	0x200005d4
 8001370:	0800bd38 	.word	0x0800bd38
 8001374:	200003d4 	.word	0x200003d4
 8001378:	200005d8 	.word	0x200005d8
 800137c:	0800bd44 	.word	0x0800bd44
 8001380:	0800bd50 	.word	0x0800bd50
 8001384:	0800bd60 	.word	0x0800bd60
 8001388:	0800bd74 	.word	0x0800bd74

0800138c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08a      	sub	sp, #40	@ 0x28
 8001390:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
 80013a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	4b4b      	ldr	r3, [pc, #300]	@ (80014d4 <MX_GPIO_Init+0x148>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013aa:	4a4a      	ldr	r2, [pc, #296]	@ (80014d4 <MX_GPIO_Init+0x148>)
 80013ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b2:	4b48      	ldr	r3, [pc, #288]	@ (80014d4 <MX_GPIO_Init+0x148>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	4b44      	ldr	r3, [pc, #272]	@ (80014d4 <MX_GPIO_Init+0x148>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	4a43      	ldr	r2, [pc, #268]	@ (80014d4 <MX_GPIO_Init+0x148>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ce:	4b41      	ldr	r3, [pc, #260]	@ (80014d4 <MX_GPIO_Init+0x148>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	4b3d      	ldr	r3, [pc, #244]	@ (80014d4 <MX_GPIO_Init+0x148>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	4a3c      	ldr	r2, [pc, #240]	@ (80014d4 <MX_GPIO_Init+0x148>)
 80013e4:	f043 0304 	orr.w	r3, r3, #4
 80013e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ea:	4b3a      	ldr	r3, [pc, #232]	@ (80014d4 <MX_GPIO_Init+0x148>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	f003 0304 	and.w	r3, r3, #4
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	4b36      	ldr	r3, [pc, #216]	@ (80014d4 <MX_GPIO_Init+0x148>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	4a35      	ldr	r2, [pc, #212]	@ (80014d4 <MX_GPIO_Init+0x148>)
 8001400:	f043 0308 	orr.w	r3, r3, #8
 8001404:	6313      	str	r3, [r2, #48]	@ 0x30
 8001406:	4b33      	ldr	r3, [pc, #204]	@ (80014d4 <MX_GPIO_Init+0x148>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	603b      	str	r3, [r7, #0]
 8001416:	4b2f      	ldr	r3, [pc, #188]	@ (80014d4 <MX_GPIO_Init+0x148>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	4a2e      	ldr	r2, [pc, #184]	@ (80014d4 <MX_GPIO_Init+0x148>)
 800141c:	f043 0302 	orr.w	r3, r3, #2
 8001420:	6313      	str	r3, [r2, #48]	@ 0x30
 8001422:	4b2c      	ldr	r3, [pc, #176]	@ (80014d4 <MX_GPIO_Init+0x148>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	603b      	str	r3, [r7, #0]
 800142c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	2101      	movs	r1, #1
 8001432:	4829      	ldr	r0, [pc, #164]	@ (80014d8 <MX_GPIO_Init+0x14c>)
 8001434:	f001 fd12 	bl	8002e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001438:	2200      	movs	r2, #0
 800143a:	2140      	movs	r1, #64	@ 0x40
 800143c:	4827      	ldr	r0, [pc, #156]	@ (80014dc <MX_GPIO_Init+0x150>)
 800143e:	f001 fd0d 	bl	8002e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, NSS_Pin|RST_Pin, GPIO_PIN_SET);
 8001442:	2201      	movs	r2, #1
 8001444:	2103      	movs	r1, #3
 8001446:	4826      	ldr	r0, [pc, #152]	@ (80014e0 <MX_GPIO_Init+0x154>)
 8001448:	f001 fd08 	bl	8002e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800144c:	2301      	movs	r3, #1
 800144e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001450:	2301      	movs	r3, #1
 8001452:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2300      	movs	r3, #0
 800145a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	4619      	mov	r1, r3
 8001462:	481d      	ldr	r0, [pc, #116]	@ (80014d8 <MX_GPIO_Init+0x14c>)
 8001464:	f001 fb46 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001468:	2340      	movs	r3, #64	@ 0x40
 800146a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146c:	2301      	movs	r3, #1
 800146e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2300      	movs	r3, #0
 8001476:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4619      	mov	r1, r3
 800147e:	4817      	ldr	r0, [pc, #92]	@ (80014dc <MX_GPIO_Init+0x150>)
 8001480:	f001 fb38 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin;
 8001484:	2303      	movs	r3, #3
 8001486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001488:	2301      	movs	r3, #1
 800148a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001490:	2302      	movs	r3, #2
 8001492:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	4619      	mov	r1, r3
 800149a:	4811      	ldr	r0, [pc, #68]	@ (80014e0 <MX_GPIO_Init+0x154>)
 800149c:	f001 fb2a 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 80014a0:	2304      	movs	r3, #4
 80014a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014a4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	4619      	mov	r1, r3
 80014b4:	480a      	ldr	r0, [pc, #40]	@ (80014e0 <MX_GPIO_Init+0x154>)
 80014b6:	f001 fb1d 	bl	8002af4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2100      	movs	r1, #0
 80014be:	2008      	movs	r0, #8
 80014c0:	f000 ffe2 	bl	8002488 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80014c4:	2008      	movs	r0, #8
 80014c6:	f000 fffb 	bl	80024c0 <HAL_NVIC_EnableIRQ>

}
 80014ca:	bf00      	nop
 80014cc:	3728      	adds	r7, #40	@ 0x28
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020000 	.word	0x40020000
 80014dc:	40020800 	.word	0x40020800
 80014e0:	40020c00 	.word	0x40020c00

080014e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014e8:	4b12      	ldr	r3, [pc, #72]	@ (8001534 <MX_I2C1_Init+0x50>)
 80014ea:	4a13      	ldr	r2, [pc, #76]	@ (8001538 <MX_I2C1_Init+0x54>)
 80014ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014ee:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <MX_I2C1_Init+0x50>)
 80014f0:	4a12      	ldr	r2, [pc, #72]	@ (800153c <MX_I2C1_Init+0x58>)
 80014f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001534 <MX_I2C1_Init+0x50>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001534 <MX_I2C1_Init+0x50>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001500:	4b0c      	ldr	r3, [pc, #48]	@ (8001534 <MX_I2C1_Init+0x50>)
 8001502:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001506:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001508:	4b0a      	ldr	r3, [pc, #40]	@ (8001534 <MX_I2C1_Init+0x50>)
 800150a:	2200      	movs	r2, #0
 800150c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800150e:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <MX_I2C1_Init+0x50>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001514:	4b07      	ldr	r3, [pc, #28]	@ (8001534 <MX_I2C1_Init+0x50>)
 8001516:	2200      	movs	r2, #0
 8001518:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800151a:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <MX_I2C1_Init+0x50>)
 800151c:	2200      	movs	r2, #0
 800151e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001520:	4804      	ldr	r0, [pc, #16]	@ (8001534 <MX_I2C1_Init+0x50>)
 8001522:	f001 fcd9 	bl	8002ed8 <HAL_I2C_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800152c:	f000 f8e8 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000880 	.word	0x20000880
 8001538:	40005400 	.word	0x40005400
 800153c:	000186a0 	.word	0x000186a0

08001540 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08a      	sub	sp, #40	@ 0x28
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a19      	ldr	r2, [pc, #100]	@ (80015c4 <HAL_I2C_MspInit+0x84>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d12b      	bne.n	80015ba <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	4b18      	ldr	r3, [pc, #96]	@ (80015c8 <HAL_I2C_MspInit+0x88>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	4a17      	ldr	r2, [pc, #92]	@ (80015c8 <HAL_I2C_MspInit+0x88>)
 800156c:	f043 0302 	orr.w	r3, r3, #2
 8001570:	6313      	str	r3, [r2, #48]	@ 0x30
 8001572:	4b15      	ldr	r3, [pc, #84]	@ (80015c8 <HAL_I2C_MspInit+0x88>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800157e:	23c0      	movs	r3, #192	@ 0xc0
 8001580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001582:	2312      	movs	r3, #18
 8001584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158a:	2303      	movs	r3, #3
 800158c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800158e:	2304      	movs	r3, #4
 8001590:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001592:	f107 0314 	add.w	r3, r7, #20
 8001596:	4619      	mov	r1, r3
 8001598:	480c      	ldr	r0, [pc, #48]	@ (80015cc <HAL_I2C_MspInit+0x8c>)
 800159a:	f001 faab 	bl	8002af4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	4b09      	ldr	r3, [pc, #36]	@ (80015c8 <HAL_I2C_MspInit+0x88>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a6:	4a08      	ldr	r2, [pc, #32]	@ (80015c8 <HAL_I2C_MspInit+0x88>)
 80015a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ae:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <HAL_I2C_MspInit+0x88>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80015ba:	bf00      	nop
 80015bc:	3728      	adds	r7, #40	@ 0x28
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40005400 	.word	0x40005400
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40020400 	.word	0x40020400

080015d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015d4:	f000 fbfc 	bl	8001dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015d8:	f000 f816 	bl	8001608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015dc:	f7ff fed6 	bl	800138c <MX_GPIO_Init>
  MX_DMA_Init();
 80015e0:	f7ff fdc8 	bl	8001174 <MX_DMA_Init>
  MX_I2C1_Init();
 80015e4:	f7ff ff7e 	bl	80014e4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80015e8:	f000 fb56 	bl	8001c98 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80015ec:	f7ff fcfa 	bl	8000fe4 <MX_ADC1_Init>
  MX_TIM4_Init();
 80015f0:	f000 fadc 	bl	8001bac <MX_TIM4_Init>
  MX_SPI3_Init();
 80015f4:	f000 f88a 	bl	800170c <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  TimerDelay_Init();
 80015f8:	f005 fea2 	bl	8007340 <TimerDelay_Init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80015fc:	f7ff fdf4 	bl	80011e8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001600:	f004 f8ec 	bl	80057dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <main+0x34>

08001608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b094      	sub	sp, #80	@ 0x50
 800160c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800160e:	f107 0320 	add.w	r3, r7, #32
 8001612:	2230      	movs	r2, #48	@ 0x30
 8001614:	2100      	movs	r1, #0
 8001616:	4618      	mov	r0, r3
 8001618:	f006 ff9a 	bl	8008550 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800161c:	f107 030c 	add.w	r3, r7, #12
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800162c:	2300      	movs	r3, #0
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	4b28      	ldr	r3, [pc, #160]	@ (80016d4 <SystemClock_Config+0xcc>)
 8001632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001634:	4a27      	ldr	r2, [pc, #156]	@ (80016d4 <SystemClock_Config+0xcc>)
 8001636:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800163a:	6413      	str	r3, [r2, #64]	@ 0x40
 800163c:	4b25      	ldr	r3, [pc, #148]	@ (80016d4 <SystemClock_Config+0xcc>)
 800163e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001640:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001648:	2300      	movs	r3, #0
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	4b22      	ldr	r3, [pc, #136]	@ (80016d8 <SystemClock_Config+0xd0>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a21      	ldr	r2, [pc, #132]	@ (80016d8 <SystemClock_Config+0xd0>)
 8001652:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	4b1f      	ldr	r3, [pc, #124]	@ (80016d8 <SystemClock_Config+0xd0>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001660:	607b      	str	r3, [r7, #4]
 8001662:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001664:	2301      	movs	r3, #1
 8001666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001668:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800166c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800166e:	2302      	movs	r3, #2
 8001670:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001672:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001676:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001678:	2304      	movs	r3, #4
 800167a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800167c:	23a8      	movs	r3, #168	@ 0xa8
 800167e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001680:	2302      	movs	r3, #2
 8001682:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001684:	2304      	movs	r3, #4
 8001686:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001688:	f107 0320 	add.w	r3, r7, #32
 800168c:	4618      	mov	r0, r3
 800168e:	f001 fd67 	bl	8003160 <HAL_RCC_OscConfig>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001698:	f000 f832 	bl	8001700 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800169c:	230f      	movs	r3, #15
 800169e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016a0:	2302      	movs	r3, #2
 80016a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016a8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80016ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	2105      	movs	r1, #5
 80016ba:	4618      	mov	r0, r3
 80016bc:	f001 ffc8 	bl	8003650 <HAL_RCC_ClockConfig>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80016c6:	f000 f81b 	bl	8001700 <Error_Handler>
  }
}
 80016ca:	bf00      	nop
 80016cc:	3750      	adds	r7, #80	@ 0x50
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40007000 	.word	0x40007000

080016dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a04      	ldr	r2, [pc, #16]	@ (80016fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d101      	bne.n	80016f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016ee:	f000 fb91 	bl	8001e14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40001000 	.word	0x40001000

08001700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001704:	b672      	cpsid	i
}
 8001706:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001708:	bf00      	nop
 800170a:	e7fd      	b.n	8001708 <Error_Handler+0x8>

0800170c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001710:	4b17      	ldr	r3, [pc, #92]	@ (8001770 <MX_SPI3_Init+0x64>)
 8001712:	4a18      	ldr	r2, [pc, #96]	@ (8001774 <MX_SPI3_Init+0x68>)
 8001714:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001716:	4b16      	ldr	r3, [pc, #88]	@ (8001770 <MX_SPI3_Init+0x64>)
 8001718:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800171c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800171e:	4b14      	ldr	r3, [pc, #80]	@ (8001770 <MX_SPI3_Init+0x64>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001724:	4b12      	ldr	r3, [pc, #72]	@ (8001770 <MX_SPI3_Init+0x64>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800172a:	4b11      	ldr	r3, [pc, #68]	@ (8001770 <MX_SPI3_Init+0x64>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001730:	4b0f      	ldr	r3, [pc, #60]	@ (8001770 <MX_SPI3_Init+0x64>)
 8001732:	2200      	movs	r2, #0
 8001734:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001736:	4b0e      	ldr	r3, [pc, #56]	@ (8001770 <MX_SPI3_Init+0x64>)
 8001738:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800173c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800173e:	4b0c      	ldr	r3, [pc, #48]	@ (8001770 <MX_SPI3_Init+0x64>)
 8001740:	2208      	movs	r2, #8
 8001742:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001744:	4b0a      	ldr	r3, [pc, #40]	@ (8001770 <MX_SPI3_Init+0x64>)
 8001746:	2200      	movs	r2, #0
 8001748:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800174a:	4b09      	ldr	r3, [pc, #36]	@ (8001770 <MX_SPI3_Init+0x64>)
 800174c:	2200      	movs	r2, #0
 800174e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001750:	4b07      	ldr	r3, [pc, #28]	@ (8001770 <MX_SPI3_Init+0x64>)
 8001752:	2200      	movs	r2, #0
 8001754:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001756:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <MX_SPI3_Init+0x64>)
 8001758:	220a      	movs	r2, #10
 800175a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800175c:	4804      	ldr	r0, [pc, #16]	@ (8001770 <MX_SPI3_Init+0x64>)
 800175e:	f002 f9c9 	bl	8003af4 <HAL_SPI_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001768:	f7ff ffca 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	200008d4 	.word	0x200008d4
 8001774:	40003c00 	.word	0x40003c00

08001778 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08a      	sub	sp, #40	@ 0x28
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a1d      	ldr	r2, [pc, #116]	@ (800180c <HAL_SPI_MspInit+0x94>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d134      	bne.n	8001804 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	4b1c      	ldr	r3, [pc, #112]	@ (8001810 <HAL_SPI_MspInit+0x98>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a2:	4a1b      	ldr	r2, [pc, #108]	@ (8001810 <HAL_SPI_MspInit+0x98>)
 80017a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80017aa:	4b19      	ldr	r3, [pc, #100]	@ (8001810 <HAL_SPI_MspInit+0x98>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	4b15      	ldr	r3, [pc, #84]	@ (8001810 <HAL_SPI_MspInit+0x98>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	4a14      	ldr	r2, [pc, #80]	@ (8001810 <HAL_SPI_MspInit+0x98>)
 80017c0:	f043 0304 	orr.w	r3, r3, #4
 80017c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c6:	4b12      	ldr	r3, [pc, #72]	@ (8001810 <HAL_SPI_MspInit+0x98>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	f003 0304 	and.w	r3, r3, #4
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80017d2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80017d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e0:	2303      	movs	r3, #3
 80017e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017e4:	2306      	movs	r3, #6
 80017e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	4619      	mov	r1, r3
 80017ee:	4809      	ldr	r0, [pc, #36]	@ (8001814 <HAL_SPI_MspInit+0x9c>)
 80017f0:	f001 f980 	bl	8002af4 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 80017f4:	2200      	movs	r2, #0
 80017f6:	2105      	movs	r1, #5
 80017f8:	2033      	movs	r0, #51	@ 0x33
 80017fa:	f000 fe45 	bl	8002488 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80017fe:	2033      	movs	r0, #51	@ 0x33
 8001800:	f000 fe5e 	bl	80024c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001804:	bf00      	nop
 8001806:	3728      	adds	r7, #40	@ 0x28
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40003c00 	.word	0x40003c00
 8001810:	40023800 	.word	0x40023800
 8001814:	40020800 	.word	0x40020800

08001818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	607b      	str	r3, [r7, #4]
 8001822:	4b12      	ldr	r3, [pc, #72]	@ (800186c <HAL_MspInit+0x54>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001826:	4a11      	ldr	r2, [pc, #68]	@ (800186c <HAL_MspInit+0x54>)
 8001828:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800182c:	6453      	str	r3, [r2, #68]	@ 0x44
 800182e:	4b0f      	ldr	r3, [pc, #60]	@ (800186c <HAL_MspInit+0x54>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001832:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	603b      	str	r3, [r7, #0]
 800183e:	4b0b      	ldr	r3, [pc, #44]	@ (800186c <HAL_MspInit+0x54>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	4a0a      	ldr	r2, [pc, #40]	@ (800186c <HAL_MspInit+0x54>)
 8001844:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001848:	6413      	str	r3, [r2, #64]	@ 0x40
 800184a:	4b08      	ldr	r3, [pc, #32]	@ (800186c <HAL_MspInit+0x54>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001852:	603b      	str	r3, [r7, #0]
 8001854:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001856:	2200      	movs	r2, #0
 8001858:	210f      	movs	r1, #15
 800185a:	f06f 0001 	mvn.w	r0, #1
 800185e:	f000 fe13 	bl	8002488 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40023800 	.word	0x40023800

08001870 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08e      	sub	sp, #56	@ 0x38
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001878:	2300      	movs	r3, #0
 800187a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	4b33      	ldr	r3, [pc, #204]	@ (8001954 <HAL_InitTick+0xe4>)
 8001886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001888:	4a32      	ldr	r2, [pc, #200]	@ (8001954 <HAL_InitTick+0xe4>)
 800188a:	f043 0310 	orr.w	r3, r3, #16
 800188e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001890:	4b30      	ldr	r3, [pc, #192]	@ (8001954 <HAL_InitTick+0xe4>)
 8001892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001894:	f003 0310 	and.w	r3, r3, #16
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800189c:	f107 0210 	add.w	r2, r7, #16
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4611      	mov	r1, r2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f002 f8f2 	bl	8003a90 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80018ac:	6a3b      	ldr	r3, [r7, #32]
 80018ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80018b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d103      	bne.n	80018be <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018b6:	f002 f8c3 	bl	8003a40 <HAL_RCC_GetPCLK1Freq>
 80018ba:	6378      	str	r0, [r7, #52]	@ 0x34
 80018bc:	e004      	b.n	80018c8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80018be:	f002 f8bf 	bl	8003a40 <HAL_RCC_GetPCLK1Freq>
 80018c2:	4603      	mov	r3, r0
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018ca:	4a23      	ldr	r2, [pc, #140]	@ (8001958 <HAL_InitTick+0xe8>)
 80018cc:	fba2 2303 	umull	r2, r3, r2, r3
 80018d0:	0c9b      	lsrs	r3, r3, #18
 80018d2:	3b01      	subs	r3, #1
 80018d4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80018d6:	4b21      	ldr	r3, [pc, #132]	@ (800195c <HAL_InitTick+0xec>)
 80018d8:	4a21      	ldr	r2, [pc, #132]	@ (8001960 <HAL_InitTick+0xf0>)
 80018da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80018dc:	4b1f      	ldr	r3, [pc, #124]	@ (800195c <HAL_InitTick+0xec>)
 80018de:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018e2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80018e4:	4a1d      	ldr	r2, [pc, #116]	@ (800195c <HAL_InitTick+0xec>)
 80018e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018e8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80018ea:	4b1c      	ldr	r3, [pc, #112]	@ (800195c <HAL_InitTick+0xec>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f0:	4b1a      	ldr	r3, [pc, #104]	@ (800195c <HAL_InitTick+0xec>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f6:	4b19      	ldr	r3, [pc, #100]	@ (800195c <HAL_InitTick+0xec>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80018fc:	4817      	ldr	r0, [pc, #92]	@ (800195c <HAL_InitTick+0xec>)
 80018fe:	f002 fe6b 	bl	80045d8 <HAL_TIM_Base_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001908:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800190c:	2b00      	cmp	r3, #0
 800190e:	d11b      	bne.n	8001948 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001910:	4812      	ldr	r0, [pc, #72]	@ (800195c <HAL_InitTick+0xec>)
 8001912:	f002 ff19 	bl	8004748 <HAL_TIM_Base_Start_IT>
 8001916:	4603      	mov	r3, r0
 8001918:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800191c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001920:	2b00      	cmp	r3, #0
 8001922:	d111      	bne.n	8001948 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001924:	2036      	movs	r0, #54	@ 0x36
 8001926:	f000 fdcb 	bl	80024c0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b0f      	cmp	r3, #15
 800192e:	d808      	bhi.n	8001942 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001930:	2200      	movs	r2, #0
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	2036      	movs	r0, #54	@ 0x36
 8001936:	f000 fda7 	bl	8002488 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800193a:	4a0a      	ldr	r2, [pc, #40]	@ (8001964 <HAL_InitTick+0xf4>)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	e002      	b.n	8001948 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001948:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800194c:	4618      	mov	r0, r3
 800194e:	3738      	adds	r7, #56	@ 0x38
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40023800 	.word	0x40023800
 8001958:	431bde83 	.word	0x431bde83
 800195c:	2000092c 	.word	0x2000092c
 8001960:	40001000 	.word	0x40001000
 8001964:	20000004 	.word	0x20000004

08001968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800196c:	bf00      	nop
 800196e:	e7fd      	b.n	800196c <NMI_Handler+0x4>

08001970 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001974:	bf00      	nop
 8001976:	e7fd      	b.n	8001974 <HardFault_Handler+0x4>

08001978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800197c:	bf00      	nop
 800197e:	e7fd      	b.n	800197c <MemManage_Handler+0x4>

08001980 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001984:	bf00      	nop
 8001986:	e7fd      	b.n	8001984 <BusFault_Handler+0x4>

08001988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800198c:	bf00      	nop
 800198e:	e7fd      	b.n	800198c <UsageFault_Handler+0x4>

08001990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 80019a2:	2004      	movs	r0, #4
 80019a4:	f001 fa74 	bl	8002e90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}

080019ac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80019b0:	4802      	ldr	r0, [pc, #8]	@ (80019bc <TIM4_IRQHandler+0x10>)
 80019b2:	f002 ff39 	bl	8004828 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000978 	.word	0x20000978

080019c0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80019c4:	4802      	ldr	r0, [pc, #8]	@ (80019d0 <SPI3_IRQHandler+0x10>)
 80019c6:	f002 fc0b 	bl	80041e0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200008d4 	.word	0x200008d4

080019d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019d8:	4802      	ldr	r0, [pc, #8]	@ (80019e4 <TIM6_DAC_IRQHandler+0x10>)
 80019da:	f002 ff25 	bl	8004828 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	2000092c 	.word	0x2000092c

080019e8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019ec:	4802      	ldr	r0, [pc, #8]	@ (80019f8 <DMA2_Stream0_IRQHandler+0x10>)
 80019ee:	f000 fe45 	bl	800267c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	2000023c 	.word	0x2000023c

080019fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  return 1;
 8001a00:	2301      	movs	r3, #1
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <_kill>:

int _kill(int pid, int sig)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a16:	f006 fe43 	bl	80086a0 <__errno>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2216      	movs	r2, #22
 8001a1e:	601a      	str	r2, [r3, #0]
  return -1;
 8001a20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <_exit>:

void _exit (int status)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a34:	f04f 31ff 	mov.w	r1, #4294967295
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff ffe7 	bl	8001a0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a3e:	bf00      	nop
 8001a40:	e7fd      	b.n	8001a3e <_exit+0x12>

08001a42 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b086      	sub	sp, #24
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	60f8      	str	r0, [r7, #12]
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	e00a      	b.n	8001a6a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a54:	f3af 8000 	nop.w
 8001a58:	4601      	mov	r1, r0
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	1c5a      	adds	r2, r3, #1
 8001a5e:	60ba      	str	r2, [r7, #8]
 8001a60:	b2ca      	uxtb	r2, r1
 8001a62:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	3301      	adds	r3, #1
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	dbf0      	blt.n	8001a54 <_read+0x12>
  }

  return len;
 8001a72:	687b      	ldr	r3, [r7, #4]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	e009      	b.n	8001aa2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	1c5a      	adds	r2, r3, #1
 8001a92:	60ba      	str	r2, [r7, #8]
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f005 fcb2 	bl	8007400 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	dbf1      	blt.n	8001a8e <_write+0x12>
  }
  return len;
 8001aaa:	687b      	ldr	r3, [r7, #4]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <_close>:

int _close(int file)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001abc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001adc:	605a      	str	r2, [r3, #4]
  return 0;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <_isatty>:

int _isatty(int file)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001af4:	2301      	movs	r3, #1
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b085      	sub	sp, #20
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	60f8      	str	r0, [r7, #12]
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b24:	4a14      	ldr	r2, [pc, #80]	@ (8001b78 <_sbrk+0x5c>)
 8001b26:	4b15      	ldr	r3, [pc, #84]	@ (8001b7c <_sbrk+0x60>)
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b30:	4b13      	ldr	r3, [pc, #76]	@ (8001b80 <_sbrk+0x64>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d102      	bne.n	8001b3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b38:	4b11      	ldr	r3, [pc, #68]	@ (8001b80 <_sbrk+0x64>)
 8001b3a:	4a12      	ldr	r2, [pc, #72]	@ (8001b84 <_sbrk+0x68>)
 8001b3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b3e:	4b10      	ldr	r3, [pc, #64]	@ (8001b80 <_sbrk+0x64>)
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4413      	add	r3, r2
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d207      	bcs.n	8001b5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b4c:	f006 fda8 	bl	80086a0 <__errno>
 8001b50:	4603      	mov	r3, r0
 8001b52:	220c      	movs	r2, #12
 8001b54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b56:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5a:	e009      	b.n	8001b70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b5c:	4b08      	ldr	r3, [pc, #32]	@ (8001b80 <_sbrk+0x64>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b62:	4b07      	ldr	r3, [pc, #28]	@ (8001b80 <_sbrk+0x64>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4413      	add	r3, r2
 8001b6a:	4a05      	ldr	r2, [pc, #20]	@ (8001b80 <_sbrk+0x64>)
 8001b6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20020000 	.word	0x20020000
 8001b7c:	00000400 	.word	0x00000400
 8001b80:	20000974 	.word	0x20000974
 8001b84:	200048f8 	.word	0x200048f8

08001b88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ba8 <SystemInit+0x20>)
 8001b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b92:	4a05      	ldr	r2, [pc, #20]	@ (8001ba8 <SystemInit+0x20>)
 8001b94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bb2:	f107 0308 	add.w	r3, r7, #8
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc0:	463b      	mov	r3, r7
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bc8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c40 <MX_TIM4_Init+0x94>)
 8001bca:	4a1e      	ldr	r2, [pc, #120]	@ (8001c44 <MX_TIM4_Init+0x98>)
 8001bcc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001bce:	4b1c      	ldr	r3, [pc, #112]	@ (8001c40 <MX_TIM4_Init+0x94>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c40 <MX_TIM4_Init+0x94>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001bda:	4b19      	ldr	r3, [pc, #100]	@ (8001c40 <MX_TIM4_Init+0x94>)
 8001bdc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001be0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001be2:	4b17      	ldr	r3, [pc, #92]	@ (8001c40 <MX_TIM4_Init+0x94>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be8:	4b15      	ldr	r3, [pc, #84]	@ (8001c40 <MX_TIM4_Init+0x94>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001bee:	4814      	ldr	r0, [pc, #80]	@ (8001c40 <MX_TIM4_Init+0x94>)
 8001bf0:	f002 fcf2 	bl	80045d8 <HAL_TIM_Base_Init>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001bfa:	f7ff fd81 	bl	8001700 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bfe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c04:	f107 0308 	add.w	r3, r7, #8
 8001c08:	4619      	mov	r1, r3
 8001c0a:	480d      	ldr	r0, [pc, #52]	@ (8001c40 <MX_TIM4_Init+0x94>)
 8001c0c:	f002 fefc 	bl	8004a08 <HAL_TIM_ConfigClockSource>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001c16:	f7ff fd73 	bl	8001700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c22:	463b      	mov	r3, r7
 8001c24:	4619      	mov	r1, r3
 8001c26:	4806      	ldr	r0, [pc, #24]	@ (8001c40 <MX_TIM4_Init+0x94>)
 8001c28:	f003 f924 	bl	8004e74 <HAL_TIMEx_MasterConfigSynchronization>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001c32:	f7ff fd65 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c36:	bf00      	nop
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000978 	.word	0x20000978
 8001c44:	40000800 	.word	0x40000800

08001c48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a0e      	ldr	r2, [pc, #56]	@ (8001c90 <HAL_TIM_Base_MspInit+0x48>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d115      	bne.n	8001c86 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c94 <HAL_TIM_Base_MspInit+0x4c>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c62:	4a0c      	ldr	r2, [pc, #48]	@ (8001c94 <HAL_TIM_Base_MspInit+0x4c>)
 8001c64:	f043 0304 	orr.w	r3, r3, #4
 8001c68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c94 <HAL_TIM_Base_MspInit+0x4c>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6e:	f003 0304 	and.w	r3, r3, #4
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2105      	movs	r1, #5
 8001c7a:	201e      	movs	r0, #30
 8001c7c:	f000 fc04 	bl	8002488 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c80:	201e      	movs	r0, #30
 8001c82:	f000 fc1d 	bl	80024c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001c86:	bf00      	nop
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40000800 	.word	0x40000800
 8001c94:	40023800 	.word	0x40023800

08001c98 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ce4 <MX_USART1_UART_Init+0x4c>)
 8001c9e:	4a12      	ldr	r2, [pc, #72]	@ (8001ce8 <MX_USART1_UART_Init+0x50>)
 8001ca0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ca2:	4b10      	ldr	r3, [pc, #64]	@ (8001ce4 <MX_USART1_UART_Init+0x4c>)
 8001ca4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ca8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001caa:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce4 <MX_USART1_UART_Init+0x4c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce4 <MX_USART1_UART_Init+0x4c>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce4 <MX_USART1_UART_Init+0x4c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cbc:	4b09      	ldr	r3, [pc, #36]	@ (8001ce4 <MX_USART1_UART_Init+0x4c>)
 8001cbe:	220c      	movs	r2, #12
 8001cc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cc2:	4b08      	ldr	r3, [pc, #32]	@ (8001ce4 <MX_USART1_UART_Init+0x4c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <MX_USART1_UART_Init+0x4c>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cce:	4805      	ldr	r0, [pc, #20]	@ (8001ce4 <MX_USART1_UART_Init+0x4c>)
 8001cd0:	f003 f960 	bl	8004f94 <HAL_UART_Init>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001cda:	f7ff fd11 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	200009c0 	.word	0x200009c0
 8001ce8:	40011000 	.word	0x40011000

08001cec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08a      	sub	sp, #40	@ 0x28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a19      	ldr	r2, [pc, #100]	@ (8001d70 <HAL_UART_MspInit+0x84>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d12c      	bne.n	8001d68 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	4b18      	ldr	r3, [pc, #96]	@ (8001d74 <HAL_UART_MspInit+0x88>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d16:	4a17      	ldr	r2, [pc, #92]	@ (8001d74 <HAL_UART_MspInit+0x88>)
 8001d18:	f043 0310 	orr.w	r3, r3, #16
 8001d1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d1e:	4b15      	ldr	r3, [pc, #84]	@ (8001d74 <HAL_UART_MspInit+0x88>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d22:	f003 0310 	and.w	r3, r3, #16
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	4b11      	ldr	r3, [pc, #68]	@ (8001d74 <HAL_UART_MspInit+0x88>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d32:	4a10      	ldr	r2, [pc, #64]	@ (8001d74 <HAL_UART_MspInit+0x88>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d74 <HAL_UART_MspInit+0x88>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d46:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d54:	2303      	movs	r3, #3
 8001d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d58:	2307      	movs	r3, #7
 8001d5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	4619      	mov	r1, r3
 8001d62:	4805      	ldr	r0, [pc, #20]	@ (8001d78 <HAL_UART_MspInit+0x8c>)
 8001d64:	f000 fec6 	bl	8002af4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001d68:	bf00      	nop
 8001d6a:	3728      	adds	r7, #40	@ 0x28
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40011000 	.word	0x40011000
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40020000 	.word	0x40020000

08001d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001db4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d80:	f7ff ff02 	bl	8001b88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d84:	480c      	ldr	r0, [pc, #48]	@ (8001db8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d86:	490d      	ldr	r1, [pc, #52]	@ (8001dbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d88:	4a0d      	ldr	r2, [pc, #52]	@ (8001dc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d8c:	e002      	b.n	8001d94 <LoopCopyDataInit>

08001d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d92:	3304      	adds	r3, #4

08001d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d98:	d3f9      	bcc.n	8001d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d9c:	4c0a      	ldr	r4, [pc, #40]	@ (8001dc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001da0:	e001      	b.n	8001da6 <LoopFillZerobss>

08001da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001da4:	3204      	adds	r2, #4

08001da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da8:	d3fb      	bcc.n	8001da2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001daa:	f006 fc7f 	bl	80086ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dae:	f7ff fc0f 	bl	80015d0 <main>
  bx  lr    
 8001db2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001db4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dbc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001dc0:	0800c210 	.word	0x0800c210
  ldr r2, =_sbss
 8001dc4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001dc8:	200048f8 	.word	0x200048f8

08001dcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dcc:	e7fe      	b.n	8001dcc <ADC_IRQHandler>
	...

08001dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8001e10 <HAL_Init+0x40>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001e10 <HAL_Init+0x40>)
 8001dda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001de0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e10 <HAL_Init+0x40>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a0a      	ldr	r2, [pc, #40]	@ (8001e10 <HAL_Init+0x40>)
 8001de6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dec:	4b08      	ldr	r3, [pc, #32]	@ (8001e10 <HAL_Init+0x40>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a07      	ldr	r2, [pc, #28]	@ (8001e10 <HAL_Init+0x40>)
 8001df2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001df6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df8:	2003      	movs	r0, #3
 8001dfa:	f000 fb3a 	bl	8002472 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dfe:	200f      	movs	r0, #15
 8001e00:	f7ff fd36 	bl	8001870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e04:	f7ff fd08 	bl	8001818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40023c00 	.word	0x40023c00

08001e14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e18:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <HAL_IncTick+0x20>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <HAL_IncTick+0x24>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4413      	add	r3, r2
 8001e24:	4a04      	ldr	r2, [pc, #16]	@ (8001e38 <HAL_IncTick+0x24>)
 8001e26:	6013      	str	r3, [r2, #0]
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	20000008 	.word	0x20000008
 8001e38:	20000a08 	.word	0x20000a08

08001e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e40:	4b03      	ldr	r3, [pc, #12]	@ (8001e50 <HAL_GetTick+0x14>)
 8001e42:	681b      	ldr	r3, [r3, #0]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	20000a08 	.word	0x20000a08

08001e54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e033      	b.n	8001ed2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d109      	bne.n	8001e86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff f908 	bl	8001088 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8a:	f003 0310 	and.w	r3, r3, #16
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d118      	bne.n	8001ec4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e96:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e9a:	f023 0302 	bic.w	r3, r3, #2
 8001e9e:	f043 0202 	orr.w	r2, r3, #2
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f93a 	bl	8002120 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb6:	f023 0303 	bic.w	r3, r3, #3
 8001eba:	f043 0201 	orr.w	r2, r3, #1
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ec2:	e001      	b.n	8001ec8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d101      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x1c>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	e105      	b.n	8002104 <HAL_ADC_ConfigChannel+0x228>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b09      	cmp	r3, #9
 8001f06:	d925      	bls.n	8001f54 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68d9      	ldr	r1, [r3, #12]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	461a      	mov	r2, r3
 8001f16:	4613      	mov	r3, r2
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3b1e      	subs	r3, #30
 8001f1e:	2207      	movs	r2, #7
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43da      	mvns	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	400a      	ands	r2, r1
 8001f2c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68d9      	ldr	r1, [r3, #12]
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	4618      	mov	r0, r3
 8001f40:	4603      	mov	r3, r0
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	4403      	add	r3, r0
 8001f46:	3b1e      	subs	r3, #30
 8001f48:	409a      	lsls	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	60da      	str	r2, [r3, #12]
 8001f52:	e022      	b.n	8001f9a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6919      	ldr	r1, [r3, #16]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	461a      	mov	r2, r3
 8001f62:	4613      	mov	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	4413      	add	r3, r2
 8001f68:	2207      	movs	r2, #7
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43da      	mvns	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	400a      	ands	r2, r1
 8001f76:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6919      	ldr	r1, [r3, #16]
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	4618      	mov	r0, r3
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	4403      	add	r3, r0
 8001f90:	409a      	lsls	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b06      	cmp	r3, #6
 8001fa0:	d824      	bhi.n	8001fec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3b05      	subs	r3, #5
 8001fb4:	221f      	movs	r2, #31
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43da      	mvns	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	400a      	ands	r2, r1
 8001fc2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	3b05      	subs	r3, #5
 8001fde:	fa00 f203 	lsl.w	r2, r0, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fea:	e04c      	b.n	8002086 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b0c      	cmp	r3, #12
 8001ff2:	d824      	bhi.n	800203e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	3b23      	subs	r3, #35	@ 0x23
 8002006:	221f      	movs	r2, #31
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43da      	mvns	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	400a      	ands	r2, r1
 8002014:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	b29b      	uxth	r3, r3
 8002022:	4618      	mov	r0, r3
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	3b23      	subs	r3, #35	@ 0x23
 8002030:	fa00 f203 	lsl.w	r2, r0, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	631a      	str	r2, [r3, #48]	@ 0x30
 800203c:	e023      	b.n	8002086 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	4613      	mov	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	3b41      	subs	r3, #65	@ 0x41
 8002050:	221f      	movs	r2, #31
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43da      	mvns	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	400a      	ands	r2, r1
 800205e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	b29b      	uxth	r3, r3
 800206c:	4618      	mov	r0, r3
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	3b41      	subs	r3, #65	@ 0x41
 800207a:	fa00 f203 	lsl.w	r2, r0, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	430a      	orrs	r2, r1
 8002084:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002086:	4b22      	ldr	r3, [pc, #136]	@ (8002110 <HAL_ADC_ConfigChannel+0x234>)
 8002088:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a21      	ldr	r2, [pc, #132]	@ (8002114 <HAL_ADC_ConfigChannel+0x238>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d109      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x1cc>
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b12      	cmp	r3, #18
 800209a:	d105      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a19      	ldr	r2, [pc, #100]	@ (8002114 <HAL_ADC_ConfigChannel+0x238>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d123      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x21e>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2b10      	cmp	r3, #16
 80020b8:	d003      	beq.n	80020c2 <HAL_ADC_ConfigChannel+0x1e6>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2b11      	cmp	r3, #17
 80020c0:	d11b      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2b10      	cmp	r3, #16
 80020d4:	d111      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020d6:	4b10      	ldr	r3, [pc, #64]	@ (8002118 <HAL_ADC_ConfigChannel+0x23c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a10      	ldr	r2, [pc, #64]	@ (800211c <HAL_ADC_ConfigChannel+0x240>)
 80020dc:	fba2 2303 	umull	r2, r3, r2, r3
 80020e0:	0c9a      	lsrs	r2, r3, #18
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80020ec:	e002      	b.n	80020f4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	3b01      	subs	r3, #1
 80020f2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f9      	bne.n	80020ee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	40012300 	.word	0x40012300
 8002114:	40012000 	.word	0x40012000
 8002118:	20000000 	.word	0x20000000
 800211c:	431bde83 	.word	0x431bde83

08002120 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002128:	4b79      	ldr	r3, [pc, #484]	@ (8002310 <ADC_Init+0x1f0>)
 800212a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	431a      	orrs	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002154:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6859      	ldr	r1, [r3, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	021a      	lsls	r2, r3, #8
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002178:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6859      	ldr	r1, [r3, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800219a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6899      	ldr	r1, [r3, #8]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b2:	4a58      	ldr	r2, [pc, #352]	@ (8002314 <ADC_Init+0x1f4>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d022      	beq.n	80021fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6899      	ldr	r1, [r3, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80021e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6899      	ldr	r1, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	e00f      	b.n	800221e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800220c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800221c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0202 	bic.w	r2, r2, #2
 800222c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6899      	ldr	r1, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	7e1b      	ldrb	r3, [r3, #24]
 8002238:	005a      	lsls	r2, r3, #1
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d01b      	beq.n	8002284 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800225a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800226a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6859      	ldr	r1, [r3, #4]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002276:	3b01      	subs	r3, #1
 8002278:	035a      	lsls	r2, r3, #13
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	e007      	b.n	8002294 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002292:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80022a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	3b01      	subs	r3, #1
 80022b0:	051a      	lsls	r2, r3, #20
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80022c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6899      	ldr	r1, [r3, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80022d6:	025a      	lsls	r2, r3, #9
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6899      	ldr	r1, [r3, #8]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	029a      	lsls	r2, r3, #10
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	609a      	str	r2, [r3, #8]
}
 8002304:	bf00      	nop
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	40012300 	.word	0x40012300
 8002314:	0f000001 	.word	0x0f000001

08002318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002328:	4b0c      	ldr	r3, [pc, #48]	@ (800235c <__NVIC_SetPriorityGrouping+0x44>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002334:	4013      	ands	r3, r2
 8002336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002340:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002344:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800234a:	4a04      	ldr	r2, [pc, #16]	@ (800235c <__NVIC_SetPriorityGrouping+0x44>)
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	60d3      	str	r3, [r2, #12]
}
 8002350:	bf00      	nop
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002364:	4b04      	ldr	r3, [pc, #16]	@ (8002378 <__NVIC_GetPriorityGrouping+0x18>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	0a1b      	lsrs	r3, r3, #8
 800236a:	f003 0307 	and.w	r3, r3, #7
}
 800236e:	4618      	mov	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238a:	2b00      	cmp	r3, #0
 800238c:	db0b      	blt.n	80023a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	f003 021f 	and.w	r2, r3, #31
 8002394:	4907      	ldr	r1, [pc, #28]	@ (80023b4 <__NVIC_EnableIRQ+0x38>)
 8002396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239a:	095b      	lsrs	r3, r3, #5
 800239c:	2001      	movs	r0, #1
 800239e:	fa00 f202 	lsl.w	r2, r0, r2
 80023a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	e000e100 	.word	0xe000e100

080023b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	6039      	str	r1, [r7, #0]
 80023c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	db0a      	blt.n	80023e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	490c      	ldr	r1, [pc, #48]	@ (8002404 <__NVIC_SetPriority+0x4c>)
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	0112      	lsls	r2, r2, #4
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	440b      	add	r3, r1
 80023dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023e0:	e00a      	b.n	80023f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	4908      	ldr	r1, [pc, #32]	@ (8002408 <__NVIC_SetPriority+0x50>)
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	3b04      	subs	r3, #4
 80023f0:	0112      	lsls	r2, r2, #4
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	440b      	add	r3, r1
 80023f6:	761a      	strb	r2, [r3, #24]
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	e000e100 	.word	0xe000e100
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800240c:	b480      	push	{r7}
 800240e:	b089      	sub	sp, #36	@ 0x24
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f1c3 0307 	rsb	r3, r3, #7
 8002426:	2b04      	cmp	r3, #4
 8002428:	bf28      	it	cs
 800242a:	2304      	movcs	r3, #4
 800242c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3304      	adds	r3, #4
 8002432:	2b06      	cmp	r3, #6
 8002434:	d902      	bls.n	800243c <NVIC_EncodePriority+0x30>
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	3b03      	subs	r3, #3
 800243a:	e000      	b.n	800243e <NVIC_EncodePriority+0x32>
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002440:	f04f 32ff 	mov.w	r2, #4294967295
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43da      	mvns	r2, r3
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	401a      	ands	r2, r3
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002454:	f04f 31ff 	mov.w	r1, #4294967295
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	fa01 f303 	lsl.w	r3, r1, r3
 800245e:	43d9      	mvns	r1, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002464:	4313      	orrs	r3, r2
         );
}
 8002466:	4618      	mov	r0, r3
 8002468:	3724      	adds	r7, #36	@ 0x24
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff ff4c 	bl	8002318 <__NVIC_SetPriorityGrouping>
}
 8002480:	bf00      	nop
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
 8002494:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800249a:	f7ff ff61 	bl	8002360 <__NVIC_GetPriorityGrouping>
 800249e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	68b9      	ldr	r1, [r7, #8]
 80024a4:	6978      	ldr	r0, [r7, #20]
 80024a6:	f7ff ffb1 	bl	800240c <NVIC_EncodePriority>
 80024aa:	4602      	mov	r2, r0
 80024ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024b0:	4611      	mov	r1, r2
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff ff80 	bl	80023b8 <__NVIC_SetPriority>
}
 80024b8:	bf00      	nop
 80024ba:	3718      	adds	r7, #24
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff ff54 	bl	800237c <__NVIC_EnableIRQ>
}
 80024d4:	bf00      	nop
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024e8:	f7ff fca8 	bl	8001e3c <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e099      	b.n	800262c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2202      	movs	r2, #2
 80024fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0201 	bic.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002518:	e00f      	b.n	800253a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800251a:	f7ff fc8f 	bl	8001e3c <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b05      	cmp	r3, #5
 8002526:	d908      	bls.n	800253a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2220      	movs	r2, #32
 800252c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2203      	movs	r2, #3
 8002532:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e078      	b.n	800262c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1e8      	bne.n	800251a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	4b38      	ldr	r3, [pc, #224]	@ (8002634 <HAL_DMA_Init+0x158>)
 8002554:	4013      	ands	r3, r2
 8002556:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002566:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002572:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800257e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	4313      	orrs	r3, r2
 800258a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002590:	2b04      	cmp	r3, #4
 8002592:	d107      	bne.n	80025a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259c:	4313      	orrs	r3, r2
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	f023 0307 	bic.w	r3, r3, #7
 80025ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d117      	bne.n	80025fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00e      	beq.n	80025fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 fa0b 	bl	80029fc <DMA_CheckFifoParam>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d008      	beq.n	80025fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2240      	movs	r2, #64	@ 0x40
 80025f0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80025fa:	2301      	movs	r3, #1
 80025fc:	e016      	b.n	800262c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f9c2 	bl	8002990 <DMA_CalcBaseAndBitshift>
 800260c:	4603      	mov	r3, r0
 800260e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002614:	223f      	movs	r2, #63	@ 0x3f
 8002616:	409a      	lsls	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3718      	adds	r7, #24
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	f010803f 	.word	0xf010803f

08002638 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d004      	beq.n	8002656 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2280      	movs	r2, #128	@ 0x80
 8002650:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e00c      	b.n	8002670 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2205      	movs	r2, #5
 800265a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0201 	bic.w	r2, r2, #1
 800266c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002684:	2300      	movs	r3, #0
 8002686:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002688:	4b8e      	ldr	r3, [pc, #568]	@ (80028c4 <HAL_DMA_IRQHandler+0x248>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a8e      	ldr	r2, [pc, #568]	@ (80028c8 <HAL_DMA_IRQHandler+0x24c>)
 800268e:	fba2 2303 	umull	r2, r3, r2, r3
 8002692:	0a9b      	lsrs	r3, r3, #10
 8002694:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800269a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a6:	2208      	movs	r2, #8
 80026a8:	409a      	lsls	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	4013      	ands	r3, r2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d01a      	beq.n	80026e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d013      	beq.n	80026e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0204 	bic.w	r2, r2, #4
 80026ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d4:	2208      	movs	r2, #8
 80026d6:	409a      	lsls	r2, r3
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e0:	f043 0201 	orr.w	r2, r3, #1
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ec:	2201      	movs	r2, #1
 80026ee:	409a      	lsls	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4013      	ands	r3, r2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d012      	beq.n	800271e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00b      	beq.n	800271e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800270a:	2201      	movs	r2, #1
 800270c:	409a      	lsls	r2, r3
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002716:	f043 0202 	orr.w	r2, r3, #2
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002722:	2204      	movs	r2, #4
 8002724:	409a      	lsls	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4013      	ands	r3, r2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d012      	beq.n	8002754 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00b      	beq.n	8002754 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002740:	2204      	movs	r2, #4
 8002742:	409a      	lsls	r2, r3
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800274c:	f043 0204 	orr.w	r2, r3, #4
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002758:	2210      	movs	r2, #16
 800275a:	409a      	lsls	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4013      	ands	r3, r2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d043      	beq.n	80027ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	2b00      	cmp	r3, #0
 8002770:	d03c      	beq.n	80027ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002776:	2210      	movs	r2, #16
 8002778:	409a      	lsls	r2, r3
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d018      	beq.n	80027be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d108      	bne.n	80027ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d024      	beq.n	80027ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	4798      	blx	r3
 80027aa:	e01f      	b.n	80027ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d01b      	beq.n	80027ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	4798      	blx	r3
 80027bc:	e016      	b.n	80027ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d107      	bne.n	80027dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0208 	bic.w	r2, r2, #8
 80027da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f0:	2220      	movs	r2, #32
 80027f2:	409a      	lsls	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4013      	ands	r3, r2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 808f 	beq.w	800291c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0310 	and.w	r3, r3, #16
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 8087 	beq.w	800291c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002812:	2220      	movs	r2, #32
 8002814:	409a      	lsls	r2, r3
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b05      	cmp	r3, #5
 8002824:	d136      	bne.n	8002894 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0216 	bic.w	r2, r2, #22
 8002834:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	695a      	ldr	r2, [r3, #20]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002844:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284a:	2b00      	cmp	r3, #0
 800284c:	d103      	bne.n	8002856 <HAL_DMA_IRQHandler+0x1da>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002852:	2b00      	cmp	r3, #0
 8002854:	d007      	beq.n	8002866 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0208 	bic.w	r2, r2, #8
 8002864:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800286a:	223f      	movs	r2, #63	@ 0x3f
 800286c:	409a      	lsls	r2, r3
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002886:	2b00      	cmp	r3, #0
 8002888:	d07e      	beq.n	8002988 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	4798      	blx	r3
        }
        return;
 8002892:	e079      	b.n	8002988 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d01d      	beq.n	80028de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10d      	bne.n	80028cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d031      	beq.n	800291c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	4798      	blx	r3
 80028c0:	e02c      	b.n	800291c <HAL_DMA_IRQHandler+0x2a0>
 80028c2:	bf00      	nop
 80028c4:	20000000 	.word	0x20000000
 80028c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d023      	beq.n	800291c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	4798      	blx	r3
 80028dc:	e01e      	b.n	800291c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10f      	bne.n	800290c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0210 	bic.w	r2, r2, #16
 80028fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002920:	2b00      	cmp	r3, #0
 8002922:	d032      	beq.n	800298a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b00      	cmp	r3, #0
 800292e:	d022      	beq.n	8002976 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2205      	movs	r2, #5
 8002934:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0201 	bic.w	r2, r2, #1
 8002946:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	3301      	adds	r3, #1
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	429a      	cmp	r2, r3
 8002952:	d307      	bcc.n	8002964 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f2      	bne.n	8002948 <HAL_DMA_IRQHandler+0x2cc>
 8002962:	e000      	b.n	8002966 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002964:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800297a:	2b00      	cmp	r3, #0
 800297c:	d005      	beq.n	800298a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	4798      	blx	r3
 8002986:	e000      	b.n	800298a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002988:	bf00      	nop
    }
  }
}
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	b2db      	uxtb	r3, r3
 800299e:	3b10      	subs	r3, #16
 80029a0:	4a14      	ldr	r2, [pc, #80]	@ (80029f4 <DMA_CalcBaseAndBitshift+0x64>)
 80029a2:	fba2 2303 	umull	r2, r3, r2, r3
 80029a6:	091b      	lsrs	r3, r3, #4
 80029a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029aa:	4a13      	ldr	r2, [pc, #76]	@ (80029f8 <DMA_CalcBaseAndBitshift+0x68>)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4413      	add	r3, r2
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	461a      	mov	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2b03      	cmp	r3, #3
 80029bc:	d909      	bls.n	80029d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029c6:	f023 0303 	bic.w	r3, r3, #3
 80029ca:	1d1a      	adds	r2, r3, #4
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80029d0:	e007      	b.n	80029e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029da:	f023 0303 	bic.w	r3, r3, #3
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	aaaaaaab 	.word	0xaaaaaaab
 80029f8:	0800bda8 	.word	0x0800bda8

080029fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a04:	2300      	movs	r3, #0
 8002a06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d11f      	bne.n	8002a56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	2b03      	cmp	r3, #3
 8002a1a:	d856      	bhi.n	8002aca <DMA_CheckFifoParam+0xce>
 8002a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a24 <DMA_CheckFifoParam+0x28>)
 8002a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a22:	bf00      	nop
 8002a24:	08002a35 	.word	0x08002a35
 8002a28:	08002a47 	.word	0x08002a47
 8002a2c:	08002a35 	.word	0x08002a35
 8002a30:	08002acb 	.word	0x08002acb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d046      	beq.n	8002ace <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a44:	e043      	b.n	8002ace <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a4e:	d140      	bne.n	8002ad2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a54:	e03d      	b.n	8002ad2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a5e:	d121      	bne.n	8002aa4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	2b03      	cmp	r3, #3
 8002a64:	d837      	bhi.n	8002ad6 <DMA_CheckFifoParam+0xda>
 8002a66:	a201      	add	r2, pc, #4	@ (adr r2, 8002a6c <DMA_CheckFifoParam+0x70>)
 8002a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a6c:	08002a7d 	.word	0x08002a7d
 8002a70:	08002a83 	.word	0x08002a83
 8002a74:	08002a7d 	.word	0x08002a7d
 8002a78:	08002a95 	.word	0x08002a95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a80:	e030      	b.n	8002ae4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d025      	beq.n	8002ada <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a92:	e022      	b.n	8002ada <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a98:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a9c:	d11f      	bne.n	8002ade <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002aa2:	e01c      	b.n	8002ade <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d903      	bls.n	8002ab2 <DMA_CheckFifoParam+0xb6>
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	2b03      	cmp	r3, #3
 8002aae:	d003      	beq.n	8002ab8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ab0:	e018      	b.n	8002ae4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	73fb      	strb	r3, [r7, #15]
      break;
 8002ab6:	e015      	b.n	8002ae4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002abc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00e      	beq.n	8002ae2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ac8:	e00b      	b.n	8002ae2 <DMA_CheckFifoParam+0xe6>
      break;
 8002aca:	bf00      	nop
 8002acc:	e00a      	b.n	8002ae4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ace:	bf00      	nop
 8002ad0:	e008      	b.n	8002ae4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ad2:	bf00      	nop
 8002ad4:	e006      	b.n	8002ae4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ad6:	bf00      	nop
 8002ad8:	e004      	b.n	8002ae4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ada:	bf00      	nop
 8002adc:	e002      	b.n	8002ae4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ade:	bf00      	nop
 8002ae0:	e000      	b.n	8002ae4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ae2:	bf00      	nop
    }
  } 
  
  return status; 
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop

08002af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b089      	sub	sp, #36	@ 0x24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002afe:	2300      	movs	r3, #0
 8002b00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61fb      	str	r3, [r7, #28]
 8002b0e:	e16b      	b.n	8002de8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b10:	2201      	movs	r2, #1
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	4013      	ands	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	f040 815a 	bne.w	8002de2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d005      	beq.n	8002b46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d130      	bne.n	8002ba8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	2203      	movs	r2, #3
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43db      	mvns	r3, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	091b      	lsrs	r3, r3, #4
 8002b92:	f003 0201 	and.w	r2, r3, #1
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 0303 	and.w	r3, r3, #3
 8002bb0:	2b03      	cmp	r3, #3
 8002bb2:	d017      	beq.n	8002be4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 0303 	and.w	r3, r3, #3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d123      	bne.n	8002c38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	08da      	lsrs	r2, r3, #3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3208      	adds	r2, #8
 8002bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	220f      	movs	r2, #15
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4013      	ands	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	691a      	ldr	r2, [r3, #16]
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	08da      	lsrs	r2, r3, #3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	3208      	adds	r2, #8
 8002c32:	69b9      	ldr	r1, [r7, #24]
 8002c34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	2203      	movs	r2, #3
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 0203 	and.w	r2, r3, #3
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 80b4 	beq.w	8002de2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	4b60      	ldr	r3, [pc, #384]	@ (8002e00 <HAL_GPIO_Init+0x30c>)
 8002c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c82:	4a5f      	ldr	r2, [pc, #380]	@ (8002e00 <HAL_GPIO_Init+0x30c>)
 8002c84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c88:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c8a:	4b5d      	ldr	r3, [pc, #372]	@ (8002e00 <HAL_GPIO_Init+0x30c>)
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c96:	4a5b      	ldr	r2, [pc, #364]	@ (8002e04 <HAL_GPIO_Init+0x310>)
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	089b      	lsrs	r3, r3, #2
 8002c9c:	3302      	adds	r3, #2
 8002c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	220f      	movs	r2, #15
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a52      	ldr	r2, [pc, #328]	@ (8002e08 <HAL_GPIO_Init+0x314>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d02b      	beq.n	8002d1a <HAL_GPIO_Init+0x226>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a51      	ldr	r2, [pc, #324]	@ (8002e0c <HAL_GPIO_Init+0x318>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d025      	beq.n	8002d16 <HAL_GPIO_Init+0x222>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a50      	ldr	r2, [pc, #320]	@ (8002e10 <HAL_GPIO_Init+0x31c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d01f      	beq.n	8002d12 <HAL_GPIO_Init+0x21e>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a4f      	ldr	r2, [pc, #316]	@ (8002e14 <HAL_GPIO_Init+0x320>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d019      	beq.n	8002d0e <HAL_GPIO_Init+0x21a>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a4e      	ldr	r2, [pc, #312]	@ (8002e18 <HAL_GPIO_Init+0x324>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d013      	beq.n	8002d0a <HAL_GPIO_Init+0x216>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a4d      	ldr	r2, [pc, #308]	@ (8002e1c <HAL_GPIO_Init+0x328>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00d      	beq.n	8002d06 <HAL_GPIO_Init+0x212>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a4c      	ldr	r2, [pc, #304]	@ (8002e20 <HAL_GPIO_Init+0x32c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d007      	beq.n	8002d02 <HAL_GPIO_Init+0x20e>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a4b      	ldr	r2, [pc, #300]	@ (8002e24 <HAL_GPIO_Init+0x330>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d101      	bne.n	8002cfe <HAL_GPIO_Init+0x20a>
 8002cfa:	2307      	movs	r3, #7
 8002cfc:	e00e      	b.n	8002d1c <HAL_GPIO_Init+0x228>
 8002cfe:	2308      	movs	r3, #8
 8002d00:	e00c      	b.n	8002d1c <HAL_GPIO_Init+0x228>
 8002d02:	2306      	movs	r3, #6
 8002d04:	e00a      	b.n	8002d1c <HAL_GPIO_Init+0x228>
 8002d06:	2305      	movs	r3, #5
 8002d08:	e008      	b.n	8002d1c <HAL_GPIO_Init+0x228>
 8002d0a:	2304      	movs	r3, #4
 8002d0c:	e006      	b.n	8002d1c <HAL_GPIO_Init+0x228>
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e004      	b.n	8002d1c <HAL_GPIO_Init+0x228>
 8002d12:	2302      	movs	r3, #2
 8002d14:	e002      	b.n	8002d1c <HAL_GPIO_Init+0x228>
 8002d16:	2301      	movs	r3, #1
 8002d18:	e000      	b.n	8002d1c <HAL_GPIO_Init+0x228>
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	69fa      	ldr	r2, [r7, #28]
 8002d1e:	f002 0203 	and.w	r2, r2, #3
 8002d22:	0092      	lsls	r2, r2, #2
 8002d24:	4093      	lsls	r3, r2
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d2c:	4935      	ldr	r1, [pc, #212]	@ (8002e04 <HAL_GPIO_Init+0x310>)
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	089b      	lsrs	r3, r3, #2
 8002d32:	3302      	adds	r3, #2
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d3a:	4b3b      	ldr	r3, [pc, #236]	@ (8002e28 <HAL_GPIO_Init+0x334>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	43db      	mvns	r3, r3
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4013      	ands	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d5e:	4a32      	ldr	r2, [pc, #200]	@ (8002e28 <HAL_GPIO_Init+0x334>)
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d64:	4b30      	ldr	r3, [pc, #192]	@ (8002e28 <HAL_GPIO_Init+0x334>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4013      	ands	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d003      	beq.n	8002d88 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d88:	4a27      	ldr	r2, [pc, #156]	@ (8002e28 <HAL_GPIO_Init+0x334>)
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d8e:	4b26      	ldr	r3, [pc, #152]	@ (8002e28 <HAL_GPIO_Init+0x334>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	43db      	mvns	r3, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002db2:	4a1d      	ldr	r2, [pc, #116]	@ (8002e28 <HAL_GPIO_Init+0x334>)
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002db8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e28 <HAL_GPIO_Init+0x334>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ddc:	4a12      	ldr	r2, [pc, #72]	@ (8002e28 <HAL_GPIO_Init+0x334>)
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	3301      	adds	r3, #1
 8002de6:	61fb      	str	r3, [r7, #28]
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	2b0f      	cmp	r3, #15
 8002dec:	f67f ae90 	bls.w	8002b10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002df0:	bf00      	nop
 8002df2:	bf00      	nop
 8002df4:	3724      	adds	r7, #36	@ 0x24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	40023800 	.word	0x40023800
 8002e04:	40013800 	.word	0x40013800
 8002e08:	40020000 	.word	0x40020000
 8002e0c:	40020400 	.word	0x40020400
 8002e10:	40020800 	.word	0x40020800
 8002e14:	40020c00 	.word	0x40020c00
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	40021400 	.word	0x40021400
 8002e20:	40021800 	.word	0x40021800
 8002e24:	40021c00 	.word	0x40021c00
 8002e28:	40013c00 	.word	0x40013c00

08002e2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	887b      	ldrh	r3, [r7, #2]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e44:	2301      	movs	r3, #1
 8002e46:	73fb      	strb	r3, [r7, #15]
 8002e48:	e001      	b.n	8002e4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	807b      	strh	r3, [r7, #2]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e6c:	787b      	ldrb	r3, [r7, #1]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e72:	887a      	ldrh	r2, [r7, #2]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e78:	e003      	b.n	8002e82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e7a:	887b      	ldrh	r3, [r7, #2]
 8002e7c:	041a      	lsls	r2, r3, #16
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	619a      	str	r2, [r3, #24]
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
	...

08002e90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e9a:	4b08      	ldr	r3, [pc, #32]	@ (8002ebc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e9c:	695a      	ldr	r2, [r3, #20]
 8002e9e:	88fb      	ldrh	r3, [r7, #6]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d006      	beq.n	8002eb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ea6:	4a05      	ldr	r2, [pc, #20]	@ (8002ebc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ea8:	88fb      	ldrh	r3, [r7, #6]
 8002eaa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002eac:	88fb      	ldrh	r3, [r7, #6]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 f806 	bl	8002ec0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002eb4:	bf00      	nop
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40013c00 	.word	0x40013c00

08002ec0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
	...

08002ed8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e12b      	b.n	8003142 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d106      	bne.n	8002f04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7fe fb1e 	bl	8001540 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2224      	movs	r2, #36	@ 0x24
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0201 	bic.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f3c:	f000 fd80 	bl	8003a40 <HAL_RCC_GetPCLK1Freq>
 8002f40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	4a81      	ldr	r2, [pc, #516]	@ (800314c <HAL_I2C_Init+0x274>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d807      	bhi.n	8002f5c <HAL_I2C_Init+0x84>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4a80      	ldr	r2, [pc, #512]	@ (8003150 <HAL_I2C_Init+0x278>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	bf94      	ite	ls
 8002f54:	2301      	movls	r3, #1
 8002f56:	2300      	movhi	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	e006      	b.n	8002f6a <HAL_I2C_Init+0x92>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4a7d      	ldr	r2, [pc, #500]	@ (8003154 <HAL_I2C_Init+0x27c>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	bf94      	ite	ls
 8002f64:	2301      	movls	r3, #1
 8002f66:	2300      	movhi	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e0e7      	b.n	8003142 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	4a78      	ldr	r2, [pc, #480]	@ (8003158 <HAL_I2C_Init+0x280>)
 8002f76:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7a:	0c9b      	lsrs	r3, r3, #18
 8002f7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	4a6a      	ldr	r2, [pc, #424]	@ (800314c <HAL_I2C_Init+0x274>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d802      	bhi.n	8002fac <HAL_I2C_Init+0xd4>
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	e009      	b.n	8002fc0 <HAL_I2C_Init+0xe8>
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002fb2:	fb02 f303 	mul.w	r3, r2, r3
 8002fb6:	4a69      	ldr	r2, [pc, #420]	@ (800315c <HAL_I2C_Init+0x284>)
 8002fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbc:	099b      	lsrs	r3, r3, #6
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6812      	ldr	r2, [r2, #0]
 8002fc4:	430b      	orrs	r3, r1
 8002fc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002fd2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	495c      	ldr	r1, [pc, #368]	@ (800314c <HAL_I2C_Init+0x274>)
 8002fdc:	428b      	cmp	r3, r1
 8002fde:	d819      	bhi.n	8003014 <HAL_I2C_Init+0x13c>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	1e59      	subs	r1, r3, #1
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fee:	1c59      	adds	r1, r3, #1
 8002ff0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002ff4:	400b      	ands	r3, r1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00a      	beq.n	8003010 <HAL_I2C_Init+0x138>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	1e59      	subs	r1, r3, #1
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	fbb1 f3f3 	udiv	r3, r1, r3
 8003008:	3301      	adds	r3, #1
 800300a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800300e:	e051      	b.n	80030b4 <HAL_I2C_Init+0x1dc>
 8003010:	2304      	movs	r3, #4
 8003012:	e04f      	b.n	80030b4 <HAL_I2C_Init+0x1dc>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d111      	bne.n	8003040 <HAL_I2C_Init+0x168>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	1e58      	subs	r0, r3, #1
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6859      	ldr	r1, [r3, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	440b      	add	r3, r1
 800302a:	fbb0 f3f3 	udiv	r3, r0, r3
 800302e:	3301      	adds	r3, #1
 8003030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003034:	2b00      	cmp	r3, #0
 8003036:	bf0c      	ite	eq
 8003038:	2301      	moveq	r3, #1
 800303a:	2300      	movne	r3, #0
 800303c:	b2db      	uxtb	r3, r3
 800303e:	e012      	b.n	8003066 <HAL_I2C_Init+0x18e>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	1e58      	subs	r0, r3, #1
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6859      	ldr	r1, [r3, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	0099      	lsls	r1, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	fbb0 f3f3 	udiv	r3, r0, r3
 8003056:	3301      	adds	r3, #1
 8003058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800305c:	2b00      	cmp	r3, #0
 800305e:	bf0c      	ite	eq
 8003060:	2301      	moveq	r3, #1
 8003062:	2300      	movne	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <HAL_I2C_Init+0x196>
 800306a:	2301      	movs	r3, #1
 800306c:	e022      	b.n	80030b4 <HAL_I2C_Init+0x1dc>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10e      	bne.n	8003094 <HAL_I2C_Init+0x1bc>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	1e58      	subs	r0, r3, #1
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6859      	ldr	r1, [r3, #4]
 800307e:	460b      	mov	r3, r1
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	440b      	add	r3, r1
 8003084:	fbb0 f3f3 	udiv	r3, r0, r3
 8003088:	3301      	adds	r3, #1
 800308a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800308e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003092:	e00f      	b.n	80030b4 <HAL_I2C_Init+0x1dc>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	1e58      	subs	r0, r3, #1
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6859      	ldr	r1, [r3, #4]
 800309c:	460b      	mov	r3, r1
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	0099      	lsls	r1, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030aa:	3301      	adds	r3, #1
 80030ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	6809      	ldr	r1, [r1, #0]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69da      	ldr	r2, [r3, #28]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80030e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6911      	ldr	r1, [r2, #16]
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	68d2      	ldr	r2, [r2, #12]
 80030ee:	4311      	orrs	r1, r2
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6812      	ldr	r2, [r2, #0]
 80030f4:	430b      	orrs	r3, r1
 80030f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	695a      	ldr	r2, [r3, #20]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0201 	orr.w	r2, r2, #1
 8003122:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2220      	movs	r2, #32
 800312e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	000186a0 	.word	0x000186a0
 8003150:	001e847f 	.word	0x001e847f
 8003154:	003d08ff 	.word	0x003d08ff
 8003158:	431bde83 	.word	0x431bde83
 800315c:	10624dd3 	.word	0x10624dd3

08003160 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e267      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d075      	beq.n	800326a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800317e:	4b88      	ldr	r3, [pc, #544]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 030c 	and.w	r3, r3, #12
 8003186:	2b04      	cmp	r3, #4
 8003188:	d00c      	beq.n	80031a4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800318a:	4b85      	ldr	r3, [pc, #532]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003192:	2b08      	cmp	r3, #8
 8003194:	d112      	bne.n	80031bc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003196:	4b82      	ldr	r3, [pc, #520]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800319e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031a2:	d10b      	bne.n	80031bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a4:	4b7e      	ldr	r3, [pc, #504]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d05b      	beq.n	8003268 <HAL_RCC_OscConfig+0x108>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d157      	bne.n	8003268 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e242      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031c4:	d106      	bne.n	80031d4 <HAL_RCC_OscConfig+0x74>
 80031c6:	4b76      	ldr	r3, [pc, #472]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a75      	ldr	r2, [pc, #468]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 80031cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	e01d      	b.n	8003210 <HAL_RCC_OscConfig+0xb0>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031dc:	d10c      	bne.n	80031f8 <HAL_RCC_OscConfig+0x98>
 80031de:	4b70      	ldr	r3, [pc, #448]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a6f      	ldr	r2, [pc, #444]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 80031e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	4b6d      	ldr	r3, [pc, #436]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a6c      	ldr	r2, [pc, #432]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 80031f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	e00b      	b.n	8003210 <HAL_RCC_OscConfig+0xb0>
 80031f8:	4b69      	ldr	r3, [pc, #420]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a68      	ldr	r2, [pc, #416]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 80031fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003202:	6013      	str	r3, [r2, #0]
 8003204:	4b66      	ldr	r3, [pc, #408]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a65      	ldr	r2, [pc, #404]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 800320a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800320e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d013      	beq.n	8003240 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003218:	f7fe fe10 	bl	8001e3c <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003220:	f7fe fe0c 	bl	8001e3c <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b64      	cmp	r3, #100	@ 0x64
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e207      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003232:	4b5b      	ldr	r3, [pc, #364]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0f0      	beq.n	8003220 <HAL_RCC_OscConfig+0xc0>
 800323e:	e014      	b.n	800326a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003240:	f7fe fdfc 	bl	8001e3c <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003248:	f7fe fdf8 	bl	8001e3c <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b64      	cmp	r3, #100	@ 0x64
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e1f3      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800325a:	4b51      	ldr	r3, [pc, #324]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0xe8>
 8003266:	e000      	b.n	800326a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d063      	beq.n	800333e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003276:	4b4a      	ldr	r3, [pc, #296]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 030c 	and.w	r3, r3, #12
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00b      	beq.n	800329a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003282:	4b47      	ldr	r3, [pc, #284]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800328a:	2b08      	cmp	r3, #8
 800328c:	d11c      	bne.n	80032c8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800328e:	4b44      	ldr	r3, [pc, #272]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d116      	bne.n	80032c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800329a:	4b41      	ldr	r3, [pc, #260]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d005      	beq.n	80032b2 <HAL_RCC_OscConfig+0x152>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d001      	beq.n	80032b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e1c7      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b2:	4b3b      	ldr	r3, [pc, #236]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	4937      	ldr	r1, [pc, #220]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032c6:	e03a      	b.n	800333e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d020      	beq.n	8003312 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032d0:	4b34      	ldr	r3, [pc, #208]	@ (80033a4 <HAL_RCC_OscConfig+0x244>)
 80032d2:	2201      	movs	r2, #1
 80032d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d6:	f7fe fdb1 	bl	8001e3c <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032de:	f7fe fdad 	bl	8001e3c <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e1a8      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f0:	4b2b      	ldr	r3, [pc, #172]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0f0      	beq.n	80032de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032fc:	4b28      	ldr	r3, [pc, #160]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	4925      	ldr	r1, [pc, #148]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 800330c:	4313      	orrs	r3, r2
 800330e:	600b      	str	r3, [r1, #0]
 8003310:	e015      	b.n	800333e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003312:	4b24      	ldr	r3, [pc, #144]	@ (80033a4 <HAL_RCC_OscConfig+0x244>)
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003318:	f7fe fd90 	bl	8001e3c <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003320:	f7fe fd8c 	bl	8001e3c <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e187      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003332:	4b1b      	ldr	r3, [pc, #108]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f0      	bne.n	8003320 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b00      	cmp	r3, #0
 8003348:	d036      	beq.n	80033b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d016      	beq.n	8003380 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003352:	4b15      	ldr	r3, [pc, #84]	@ (80033a8 <HAL_RCC_OscConfig+0x248>)
 8003354:	2201      	movs	r2, #1
 8003356:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003358:	f7fe fd70 	bl	8001e3c <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003360:	f7fe fd6c 	bl	8001e3c <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e167      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003372:	4b0b      	ldr	r3, [pc, #44]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 8003374:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0f0      	beq.n	8003360 <HAL_RCC_OscConfig+0x200>
 800337e:	e01b      	b.n	80033b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003380:	4b09      	ldr	r3, [pc, #36]	@ (80033a8 <HAL_RCC_OscConfig+0x248>)
 8003382:	2200      	movs	r2, #0
 8003384:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003386:	f7fe fd59 	bl	8001e3c <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800338c:	e00e      	b.n	80033ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800338e:	f7fe fd55 	bl	8001e3c <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d907      	bls.n	80033ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e150      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
 80033a0:	40023800 	.word	0x40023800
 80033a4:	42470000 	.word	0x42470000
 80033a8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ac:	4b88      	ldr	r3, [pc, #544]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 80033ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1ea      	bne.n	800338e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 8097 	beq.w	80034f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033c6:	2300      	movs	r3, #0
 80033c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ca:	4b81      	ldr	r3, [pc, #516]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 80033cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10f      	bne.n	80033f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	60bb      	str	r3, [r7, #8]
 80033da:	4b7d      	ldr	r3, [pc, #500]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 80033dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033de:	4a7c      	ldr	r2, [pc, #496]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 80033e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80033e6:	4b7a      	ldr	r3, [pc, #488]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ee:	60bb      	str	r3, [r7, #8]
 80033f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033f2:	2301      	movs	r3, #1
 80033f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f6:	4b77      	ldr	r3, [pc, #476]	@ (80035d4 <HAL_RCC_OscConfig+0x474>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d118      	bne.n	8003434 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003402:	4b74      	ldr	r3, [pc, #464]	@ (80035d4 <HAL_RCC_OscConfig+0x474>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a73      	ldr	r2, [pc, #460]	@ (80035d4 <HAL_RCC_OscConfig+0x474>)
 8003408:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800340c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800340e:	f7fe fd15 	bl	8001e3c <HAL_GetTick>
 8003412:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003414:	e008      	b.n	8003428 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003416:	f7fe fd11 	bl	8001e3c <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e10c      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003428:	4b6a      	ldr	r3, [pc, #424]	@ (80035d4 <HAL_RCC_OscConfig+0x474>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0f0      	beq.n	8003416 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d106      	bne.n	800344a <HAL_RCC_OscConfig+0x2ea>
 800343c:	4b64      	ldr	r3, [pc, #400]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 800343e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003440:	4a63      	ldr	r2, [pc, #396]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 8003442:	f043 0301 	orr.w	r3, r3, #1
 8003446:	6713      	str	r3, [r2, #112]	@ 0x70
 8003448:	e01c      	b.n	8003484 <HAL_RCC_OscConfig+0x324>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2b05      	cmp	r3, #5
 8003450:	d10c      	bne.n	800346c <HAL_RCC_OscConfig+0x30c>
 8003452:	4b5f      	ldr	r3, [pc, #380]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 8003454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003456:	4a5e      	ldr	r2, [pc, #376]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 8003458:	f043 0304 	orr.w	r3, r3, #4
 800345c:	6713      	str	r3, [r2, #112]	@ 0x70
 800345e:	4b5c      	ldr	r3, [pc, #368]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 8003460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003462:	4a5b      	ldr	r2, [pc, #364]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 8003464:	f043 0301 	orr.w	r3, r3, #1
 8003468:	6713      	str	r3, [r2, #112]	@ 0x70
 800346a:	e00b      	b.n	8003484 <HAL_RCC_OscConfig+0x324>
 800346c:	4b58      	ldr	r3, [pc, #352]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 800346e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003470:	4a57      	ldr	r2, [pc, #348]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 8003472:	f023 0301 	bic.w	r3, r3, #1
 8003476:	6713      	str	r3, [r2, #112]	@ 0x70
 8003478:	4b55      	ldr	r3, [pc, #340]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 800347a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800347c:	4a54      	ldr	r2, [pc, #336]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 800347e:	f023 0304 	bic.w	r3, r3, #4
 8003482:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d015      	beq.n	80034b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348c:	f7fe fcd6 	bl	8001e3c <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003492:	e00a      	b.n	80034aa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003494:	f7fe fcd2 	bl	8001e3c <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e0cb      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034aa:	4b49      	ldr	r3, [pc, #292]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 80034ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0ee      	beq.n	8003494 <HAL_RCC_OscConfig+0x334>
 80034b6:	e014      	b.n	80034e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b8:	f7fe fcc0 	bl	8001e3c <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034be:	e00a      	b.n	80034d6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034c0:	f7fe fcbc 	bl	8001e3c <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e0b5      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d6:	4b3e      	ldr	r3, [pc, #248]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 80034d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1ee      	bne.n	80034c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034e2:	7dfb      	ldrb	r3, [r7, #23]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d105      	bne.n	80034f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e8:	4b39      	ldr	r3, [pc, #228]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 80034ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ec:	4a38      	ldr	r2, [pc, #224]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 80034ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 80a1 	beq.w	8003640 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034fe:	4b34      	ldr	r3, [pc, #208]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 030c 	and.w	r3, r3, #12
 8003506:	2b08      	cmp	r3, #8
 8003508:	d05c      	beq.n	80035c4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	2b02      	cmp	r3, #2
 8003510:	d141      	bne.n	8003596 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003512:	4b31      	ldr	r3, [pc, #196]	@ (80035d8 <HAL_RCC_OscConfig+0x478>)
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003518:	f7fe fc90 	bl	8001e3c <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003520:	f7fe fc8c 	bl	8001e3c <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e087      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003532:	4b27      	ldr	r3, [pc, #156]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f0      	bne.n	8003520 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	69da      	ldr	r2, [r3, #28]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	431a      	orrs	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003554:	085b      	lsrs	r3, r3, #1
 8003556:	3b01      	subs	r3, #1
 8003558:	041b      	lsls	r3, r3, #16
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003560:	061b      	lsls	r3, r3, #24
 8003562:	491b      	ldr	r1, [pc, #108]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 8003564:	4313      	orrs	r3, r2
 8003566:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003568:	4b1b      	ldr	r3, [pc, #108]	@ (80035d8 <HAL_RCC_OscConfig+0x478>)
 800356a:	2201      	movs	r2, #1
 800356c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356e:	f7fe fc65 	bl	8001e3c <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003576:	f7fe fc61 	bl	8001e3c <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e05c      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003588:	4b11      	ldr	r3, [pc, #68]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0f0      	beq.n	8003576 <HAL_RCC_OscConfig+0x416>
 8003594:	e054      	b.n	8003640 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003596:	4b10      	ldr	r3, [pc, #64]	@ (80035d8 <HAL_RCC_OscConfig+0x478>)
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359c:	f7fe fc4e 	bl	8001e3c <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a4:	f7fe fc4a 	bl	8001e3c <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e045      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035b6:	4b06      	ldr	r3, [pc, #24]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1f0      	bne.n	80035a4 <HAL_RCC_OscConfig+0x444>
 80035c2:	e03d      	b.n	8003640 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d107      	bne.n	80035dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e038      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
 80035d0:	40023800 	.word	0x40023800
 80035d4:	40007000 	.word	0x40007000
 80035d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035dc:	4b1b      	ldr	r3, [pc, #108]	@ (800364c <HAL_RCC_OscConfig+0x4ec>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d028      	beq.n	800363c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d121      	bne.n	800363c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003602:	429a      	cmp	r2, r3
 8003604:	d11a      	bne.n	800363c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800360c:	4013      	ands	r3, r2
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003612:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003614:	4293      	cmp	r3, r2
 8003616:	d111      	bne.n	800363c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003622:	085b      	lsrs	r3, r3, #1
 8003624:	3b01      	subs	r3, #1
 8003626:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003628:	429a      	cmp	r2, r3
 800362a:	d107      	bne.n	800363c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003636:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003638:	429a      	cmp	r2, r3
 800363a:	d001      	beq.n	8003640 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e000      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	40023800 	.word	0x40023800

08003650 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e0cc      	b.n	80037fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003664:	4b68      	ldr	r3, [pc, #416]	@ (8003808 <HAL_RCC_ClockConfig+0x1b8>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	429a      	cmp	r2, r3
 8003670:	d90c      	bls.n	800368c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003672:	4b65      	ldr	r3, [pc, #404]	@ (8003808 <HAL_RCC_ClockConfig+0x1b8>)
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	b2d2      	uxtb	r2, r2
 8003678:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800367a:	4b63      	ldr	r3, [pc, #396]	@ (8003808 <HAL_RCC_ClockConfig+0x1b8>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0307 	and.w	r3, r3, #7
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	429a      	cmp	r2, r3
 8003686:	d001      	beq.n	800368c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e0b8      	b.n	80037fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d020      	beq.n	80036da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d005      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036a4:	4b59      	ldr	r3, [pc, #356]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	4a58      	ldr	r2, [pc, #352]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80036aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80036ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0308 	and.w	r3, r3, #8
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d005      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036bc:	4b53      	ldr	r3, [pc, #332]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	4a52      	ldr	r2, [pc, #328]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80036c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036c8:	4b50      	ldr	r3, [pc, #320]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	494d      	ldr	r1, [pc, #308]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d044      	beq.n	8003770 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d107      	bne.n	80036fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ee:	4b47      	ldr	r3, [pc, #284]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d119      	bne.n	800372e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e07f      	b.n	80037fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	2b02      	cmp	r3, #2
 8003704:	d003      	beq.n	800370e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800370a:	2b03      	cmp	r3, #3
 800370c:	d107      	bne.n	800371e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800370e:	4b3f      	ldr	r3, [pc, #252]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d109      	bne.n	800372e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e06f      	b.n	80037fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800371e:	4b3b      	ldr	r3, [pc, #236]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e067      	b.n	80037fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800372e:	4b37      	ldr	r3, [pc, #220]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f023 0203 	bic.w	r2, r3, #3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	4934      	ldr	r1, [pc, #208]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 800373c:	4313      	orrs	r3, r2
 800373e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003740:	f7fe fb7c 	bl	8001e3c <HAL_GetTick>
 8003744:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003746:	e00a      	b.n	800375e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003748:	f7fe fb78 	bl	8001e3c <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003756:	4293      	cmp	r3, r2
 8003758:	d901      	bls.n	800375e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e04f      	b.n	80037fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800375e:	4b2b      	ldr	r3, [pc, #172]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 020c 	and.w	r2, r3, #12
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	429a      	cmp	r2, r3
 800376e:	d1eb      	bne.n	8003748 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003770:	4b25      	ldr	r3, [pc, #148]	@ (8003808 <HAL_RCC_ClockConfig+0x1b8>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	d20c      	bcs.n	8003798 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800377e:	4b22      	ldr	r3, [pc, #136]	@ (8003808 <HAL_RCC_ClockConfig+0x1b8>)
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	b2d2      	uxtb	r2, r2
 8003784:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003786:	4b20      	ldr	r3, [pc, #128]	@ (8003808 <HAL_RCC_ClockConfig+0x1b8>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	429a      	cmp	r2, r3
 8003792:	d001      	beq.n	8003798 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e032      	b.n	80037fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d008      	beq.n	80037b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037a4:	4b19      	ldr	r3, [pc, #100]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	4916      	ldr	r1, [pc, #88]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d009      	beq.n	80037d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037c2:	4b12      	ldr	r3, [pc, #72]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	490e      	ldr	r1, [pc, #56]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037d6:	f000 f821 	bl	800381c <HAL_RCC_GetSysClockFreq>
 80037da:	4602      	mov	r2, r0
 80037dc:	4b0b      	ldr	r3, [pc, #44]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	091b      	lsrs	r3, r3, #4
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	490a      	ldr	r1, [pc, #40]	@ (8003810 <HAL_RCC_ClockConfig+0x1c0>)
 80037e8:	5ccb      	ldrb	r3, [r1, r3]
 80037ea:	fa22 f303 	lsr.w	r3, r2, r3
 80037ee:	4a09      	ldr	r2, [pc, #36]	@ (8003814 <HAL_RCC_ClockConfig+0x1c4>)
 80037f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80037f2:	4b09      	ldr	r3, [pc, #36]	@ (8003818 <HAL_RCC_ClockConfig+0x1c8>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fe f83a 	bl	8001870 <HAL_InitTick>

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40023c00 	.word	0x40023c00
 800380c:	40023800 	.word	0x40023800
 8003810:	0800bd90 	.word	0x0800bd90
 8003814:	20000000 	.word	0x20000000
 8003818:	20000004 	.word	0x20000004

0800381c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800381c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003820:	b094      	sub	sp, #80	@ 0x50
 8003822:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003824:	2300      	movs	r3, #0
 8003826:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003828:	2300      	movs	r3, #0
 800382a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800382c:	2300      	movs	r3, #0
 800382e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003830:	2300      	movs	r3, #0
 8003832:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003834:	4b79      	ldr	r3, [pc, #484]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0x200>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f003 030c 	and.w	r3, r3, #12
 800383c:	2b08      	cmp	r3, #8
 800383e:	d00d      	beq.n	800385c <HAL_RCC_GetSysClockFreq+0x40>
 8003840:	2b08      	cmp	r3, #8
 8003842:	f200 80e1 	bhi.w	8003a08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003846:	2b00      	cmp	r3, #0
 8003848:	d002      	beq.n	8003850 <HAL_RCC_GetSysClockFreq+0x34>
 800384a:	2b04      	cmp	r3, #4
 800384c:	d003      	beq.n	8003856 <HAL_RCC_GetSysClockFreq+0x3a>
 800384e:	e0db      	b.n	8003a08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003850:	4b73      	ldr	r3, [pc, #460]	@ (8003a20 <HAL_RCC_GetSysClockFreq+0x204>)
 8003852:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003854:	e0db      	b.n	8003a0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003856:	4b73      	ldr	r3, [pc, #460]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0x208>)
 8003858:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800385a:	e0d8      	b.n	8003a0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800385c:	4b6f      	ldr	r3, [pc, #444]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0x200>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003864:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003866:	4b6d      	ldr	r3, [pc, #436]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0x200>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d063      	beq.n	800393a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003872:	4b6a      	ldr	r3, [pc, #424]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0x200>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	099b      	lsrs	r3, r3, #6
 8003878:	2200      	movs	r2, #0
 800387a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800387c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800387e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003884:	633b      	str	r3, [r7, #48]	@ 0x30
 8003886:	2300      	movs	r3, #0
 8003888:	637b      	str	r3, [r7, #52]	@ 0x34
 800388a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800388e:	4622      	mov	r2, r4
 8003890:	462b      	mov	r3, r5
 8003892:	f04f 0000 	mov.w	r0, #0
 8003896:	f04f 0100 	mov.w	r1, #0
 800389a:	0159      	lsls	r1, r3, #5
 800389c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038a0:	0150      	lsls	r0, r2, #5
 80038a2:	4602      	mov	r2, r0
 80038a4:	460b      	mov	r3, r1
 80038a6:	4621      	mov	r1, r4
 80038a8:	1a51      	subs	r1, r2, r1
 80038aa:	6139      	str	r1, [r7, #16]
 80038ac:	4629      	mov	r1, r5
 80038ae:	eb63 0301 	sbc.w	r3, r3, r1
 80038b2:	617b      	str	r3, [r7, #20]
 80038b4:	f04f 0200 	mov.w	r2, #0
 80038b8:	f04f 0300 	mov.w	r3, #0
 80038bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038c0:	4659      	mov	r1, fp
 80038c2:	018b      	lsls	r3, r1, #6
 80038c4:	4651      	mov	r1, sl
 80038c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038ca:	4651      	mov	r1, sl
 80038cc:	018a      	lsls	r2, r1, #6
 80038ce:	4651      	mov	r1, sl
 80038d0:	ebb2 0801 	subs.w	r8, r2, r1
 80038d4:	4659      	mov	r1, fp
 80038d6:	eb63 0901 	sbc.w	r9, r3, r1
 80038da:	f04f 0200 	mov.w	r2, #0
 80038de:	f04f 0300 	mov.w	r3, #0
 80038e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038ee:	4690      	mov	r8, r2
 80038f0:	4699      	mov	r9, r3
 80038f2:	4623      	mov	r3, r4
 80038f4:	eb18 0303 	adds.w	r3, r8, r3
 80038f8:	60bb      	str	r3, [r7, #8]
 80038fa:	462b      	mov	r3, r5
 80038fc:	eb49 0303 	adc.w	r3, r9, r3
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	f04f 0200 	mov.w	r2, #0
 8003906:	f04f 0300 	mov.w	r3, #0
 800390a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800390e:	4629      	mov	r1, r5
 8003910:	024b      	lsls	r3, r1, #9
 8003912:	4621      	mov	r1, r4
 8003914:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003918:	4621      	mov	r1, r4
 800391a:	024a      	lsls	r2, r1, #9
 800391c:	4610      	mov	r0, r2
 800391e:	4619      	mov	r1, r3
 8003920:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003922:	2200      	movs	r2, #0
 8003924:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003926:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003928:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800392c:	f7fd f9ac 	bl	8000c88 <__aeabi_uldivmod>
 8003930:	4602      	mov	r2, r0
 8003932:	460b      	mov	r3, r1
 8003934:	4613      	mov	r3, r2
 8003936:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003938:	e058      	b.n	80039ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800393a:	4b38      	ldr	r3, [pc, #224]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0x200>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	099b      	lsrs	r3, r3, #6
 8003940:	2200      	movs	r2, #0
 8003942:	4618      	mov	r0, r3
 8003944:	4611      	mov	r1, r2
 8003946:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800394a:	623b      	str	r3, [r7, #32]
 800394c:	2300      	movs	r3, #0
 800394e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003950:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003954:	4642      	mov	r2, r8
 8003956:	464b      	mov	r3, r9
 8003958:	f04f 0000 	mov.w	r0, #0
 800395c:	f04f 0100 	mov.w	r1, #0
 8003960:	0159      	lsls	r1, r3, #5
 8003962:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003966:	0150      	lsls	r0, r2, #5
 8003968:	4602      	mov	r2, r0
 800396a:	460b      	mov	r3, r1
 800396c:	4641      	mov	r1, r8
 800396e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003972:	4649      	mov	r1, r9
 8003974:	eb63 0b01 	sbc.w	fp, r3, r1
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	f04f 0300 	mov.w	r3, #0
 8003980:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003984:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003988:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800398c:	ebb2 040a 	subs.w	r4, r2, sl
 8003990:	eb63 050b 	sbc.w	r5, r3, fp
 8003994:	f04f 0200 	mov.w	r2, #0
 8003998:	f04f 0300 	mov.w	r3, #0
 800399c:	00eb      	lsls	r3, r5, #3
 800399e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039a2:	00e2      	lsls	r2, r4, #3
 80039a4:	4614      	mov	r4, r2
 80039a6:	461d      	mov	r5, r3
 80039a8:	4643      	mov	r3, r8
 80039aa:	18e3      	adds	r3, r4, r3
 80039ac:	603b      	str	r3, [r7, #0]
 80039ae:	464b      	mov	r3, r9
 80039b0:	eb45 0303 	adc.w	r3, r5, r3
 80039b4:	607b      	str	r3, [r7, #4]
 80039b6:	f04f 0200 	mov.w	r2, #0
 80039ba:	f04f 0300 	mov.w	r3, #0
 80039be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039c2:	4629      	mov	r1, r5
 80039c4:	028b      	lsls	r3, r1, #10
 80039c6:	4621      	mov	r1, r4
 80039c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039cc:	4621      	mov	r1, r4
 80039ce:	028a      	lsls	r2, r1, #10
 80039d0:	4610      	mov	r0, r2
 80039d2:	4619      	mov	r1, r3
 80039d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039d6:	2200      	movs	r2, #0
 80039d8:	61bb      	str	r3, [r7, #24]
 80039da:	61fa      	str	r2, [r7, #28]
 80039dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039e0:	f7fd f952 	bl	8000c88 <__aeabi_uldivmod>
 80039e4:	4602      	mov	r2, r0
 80039e6:	460b      	mov	r3, r1
 80039e8:	4613      	mov	r3, r2
 80039ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80039ec:	4b0b      	ldr	r3, [pc, #44]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0x200>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	0c1b      	lsrs	r3, r3, #16
 80039f2:	f003 0303 	and.w	r3, r3, #3
 80039f6:	3301      	adds	r3, #1
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80039fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a04:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a06:	e002      	b.n	8003a0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a08:	4b05      	ldr	r3, [pc, #20]	@ (8003a20 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a0a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3750      	adds	r7, #80	@ 0x50
 8003a14:	46bd      	mov	sp, r7
 8003a16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	00f42400 	.word	0x00f42400
 8003a24:	007a1200 	.word	0x007a1200

08003a28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a2c:	4b03      	ldr	r3, [pc, #12]	@ (8003a3c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	20000000 	.word	0x20000000

08003a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a44:	f7ff fff0 	bl	8003a28 <HAL_RCC_GetHCLKFreq>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	4b05      	ldr	r3, [pc, #20]	@ (8003a60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	0a9b      	lsrs	r3, r3, #10
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	4903      	ldr	r1, [pc, #12]	@ (8003a64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a56:	5ccb      	ldrb	r3, [r1, r3]
 8003a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40023800 	.word	0x40023800
 8003a64:	0800bda0 	.word	0x0800bda0

08003a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a6c:	f7ff ffdc 	bl	8003a28 <HAL_RCC_GetHCLKFreq>
 8003a70:	4602      	mov	r2, r0
 8003a72:	4b05      	ldr	r3, [pc, #20]	@ (8003a88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	0b5b      	lsrs	r3, r3, #13
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	4903      	ldr	r1, [pc, #12]	@ (8003a8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a7e:	5ccb      	ldrb	r3, [r1, r3]
 8003a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	0800bda0 	.word	0x0800bda0

08003a90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	220f      	movs	r2, #15
 8003a9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003aa0:	4b12      	ldr	r3, [pc, #72]	@ (8003aec <HAL_RCC_GetClockConfig+0x5c>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 0203 	and.w	r2, r3, #3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003aac:	4b0f      	ldr	r3, [pc, #60]	@ (8003aec <HAL_RCC_GetClockConfig+0x5c>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8003aec <HAL_RCC_GetClockConfig+0x5c>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003ac4:	4b09      	ldr	r3, [pc, #36]	@ (8003aec <HAL_RCC_GetClockConfig+0x5c>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	08db      	lsrs	r3, r3, #3
 8003aca:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ad2:	4b07      	ldr	r3, [pc, #28]	@ (8003af0 <HAL_RCC_GetClockConfig+0x60>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0207 	and.w	r2, r3, #7
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	601a      	str	r2, [r3, #0]
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	40023800 	.word	0x40023800
 8003af0:	40023c00 	.word	0x40023c00

08003af4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e07b      	b.n	8003bfe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d108      	bne.n	8003b20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b16:	d009      	beq.n	8003b2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	61da      	str	r2, [r3, #28]
 8003b1e:	e005      	b.n	8003b2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d106      	bne.n	8003b4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7fd fe16 	bl	8001778 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003b74:	431a      	orrs	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	431a      	orrs	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bb0:	ea42 0103 	orr.w	r1, r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	0c1b      	lsrs	r3, r3, #16
 8003bca:	f003 0104 	and.w	r1, r3, #4
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd2:	f003 0210 	and.w	r2, r3, #16
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	69da      	ldr	r2, [r3, #28]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b088      	sub	sp, #32
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	60f8      	str	r0, [r7, #12]
 8003c0e:	60b9      	str	r1, [r7, #8]
 8003c10:	603b      	str	r3, [r7, #0]
 8003c12:	4613      	mov	r3, r2
 8003c14:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c16:	f7fe f911 	bl	8001e3c <HAL_GetTick>
 8003c1a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003c1c:	88fb      	ldrh	r3, [r7, #6]
 8003c1e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d001      	beq.n	8003c30 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	e12a      	b.n	8003e86 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d002      	beq.n	8003c3c <HAL_SPI_Transmit+0x36>
 8003c36:	88fb      	ldrh	r3, [r7, #6]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e122      	b.n	8003e86 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d101      	bne.n	8003c4e <HAL_SPI_Transmit+0x48>
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	e11b      	b.n	8003e86 <HAL_SPI_Transmit+0x280>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2203      	movs	r2, #3
 8003c5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	88fa      	ldrh	r2, [r7, #6]
 8003c6e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	88fa      	ldrh	r2, [r7, #6]
 8003c74:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c9c:	d10f      	bne.n	8003cbe <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cbc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cc8:	2b40      	cmp	r3, #64	@ 0x40
 8003cca:	d007      	beq.n	8003cdc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ce4:	d152      	bne.n	8003d8c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d002      	beq.n	8003cf4 <HAL_SPI_Transmit+0xee>
 8003cee:	8b7b      	ldrh	r3, [r7, #26]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d145      	bne.n	8003d80 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf8:	881a      	ldrh	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d04:	1c9a      	adds	r2, r3, #2
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d18:	e032      	b.n	8003d80 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d112      	bne.n	8003d4e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2c:	881a      	ldrh	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d38:	1c9a      	adds	r2, r3, #2
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003d4c:	e018      	b.n	8003d80 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d4e:	f7fe f875 	bl	8001e3c <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d803      	bhi.n	8003d66 <HAL_SPI_Transmit+0x160>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d64:	d102      	bne.n	8003d6c <HAL_SPI_Transmit+0x166>
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d109      	bne.n	8003d80 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e082      	b.n	8003e86 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1c7      	bne.n	8003d1a <HAL_SPI_Transmit+0x114>
 8003d8a:	e053      	b.n	8003e34 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d002      	beq.n	8003d9a <HAL_SPI_Transmit+0x194>
 8003d94:	8b7b      	ldrh	r3, [r7, #26]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d147      	bne.n	8003e2a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	330c      	adds	r3, #12
 8003da4:	7812      	ldrb	r2, [r2, #0]
 8003da6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dac:	1c5a      	adds	r2, r3, #1
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	3b01      	subs	r3, #1
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003dc0:	e033      	b.n	8003e2a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d113      	bne.n	8003df8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	330c      	adds	r3, #12
 8003dda:	7812      	ldrb	r2, [r2, #0]
 8003ddc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de2:	1c5a      	adds	r2, r3, #1
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	3b01      	subs	r3, #1
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003df6:	e018      	b.n	8003e2a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003df8:	f7fe f820 	bl	8001e3c <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d803      	bhi.n	8003e10 <HAL_SPI_Transmit+0x20a>
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0e:	d102      	bne.n	8003e16 <HAL_SPI_Transmit+0x210>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d109      	bne.n	8003e2a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e02d      	b.n	8003e86 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1c6      	bne.n	8003dc2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e34:	69fa      	ldr	r2, [r7, #28]
 8003e36:	6839      	ldr	r1, [r7, #0]
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 fb79 	bl	8004530 <SPI_EndRxTxTransaction>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d002      	beq.n	8003e4a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2220      	movs	r2, #32
 8003e48:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10a      	bne.n	8003e68 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e52:	2300      	movs	r3, #0
 8003e54:	617b      	str	r3, [r7, #20]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	617b      	str	r3, [r7, #20]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	617b      	str	r3, [r7, #20]
 8003e66:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e000      	b.n	8003e86 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003e84:	2300      	movs	r3, #0
  }
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3720      	adds	r7, #32
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b08a      	sub	sp, #40	@ 0x28
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	60f8      	str	r0, [r7, #12]
 8003e96:	60b9      	str	r1, [r7, #8]
 8003e98:	607a      	str	r2, [r7, #4]
 8003e9a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ea0:	f7fd ffcc 	bl	8001e3c <HAL_GetTick>
 8003ea4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003eac:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003eb4:	887b      	ldrh	r3, [r7, #2]
 8003eb6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003eb8:	7ffb      	ldrb	r3, [r7, #31]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d00c      	beq.n	8003ed8 <HAL_SPI_TransmitReceive+0x4a>
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ec4:	d106      	bne.n	8003ed4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d102      	bne.n	8003ed4 <HAL_SPI_TransmitReceive+0x46>
 8003ece:	7ffb      	ldrb	r3, [r7, #31]
 8003ed0:	2b04      	cmp	r3, #4
 8003ed2:	d001      	beq.n	8003ed8 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	e17f      	b.n	80041d8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d005      	beq.n	8003eea <HAL_SPI_TransmitReceive+0x5c>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <HAL_SPI_TransmitReceive+0x5c>
 8003ee4:	887b      	ldrh	r3, [r7, #2]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e174      	b.n	80041d8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d101      	bne.n	8003efc <HAL_SPI_TransmitReceive+0x6e>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	e16d      	b.n	80041d8 <HAL_SPI_TransmitReceive+0x34a>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b04      	cmp	r3, #4
 8003f0e:	d003      	beq.n	8003f18 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2205      	movs	r2, #5
 8003f14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	887a      	ldrh	r2, [r7, #2]
 8003f28:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	887a      	ldrh	r2, [r7, #2]
 8003f2e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	887a      	ldrh	r2, [r7, #2]
 8003f3a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	887a      	ldrh	r2, [r7, #2]
 8003f40:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f58:	2b40      	cmp	r3, #64	@ 0x40
 8003f5a:	d007      	beq.n	8003f6c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f74:	d17e      	bne.n	8004074 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d002      	beq.n	8003f84 <HAL_SPI_TransmitReceive+0xf6>
 8003f7e:	8afb      	ldrh	r3, [r7, #22]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d16c      	bne.n	800405e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f88:	881a      	ldrh	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f94:	1c9a      	adds	r2, r3, #2
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fa8:	e059      	b.n	800405e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d11b      	bne.n	8003ff0 <HAL_SPI_TransmitReceive+0x162>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d016      	beq.n	8003ff0 <HAL_SPI_TransmitReceive+0x162>
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d113      	bne.n	8003ff0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fcc:	881a      	ldrh	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd8:	1c9a      	adds	r2, r3, #2
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fec:	2300      	movs	r3, #0
 8003fee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d119      	bne.n	8004032 <HAL_SPI_TransmitReceive+0x1a4>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004002:	b29b      	uxth	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	d014      	beq.n	8004032 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68da      	ldr	r2, [r3, #12]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004012:	b292      	uxth	r2, r2
 8004014:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800401a:	1c9a      	adds	r2, r3, #2
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004024:	b29b      	uxth	r3, r3
 8004026:	3b01      	subs	r3, #1
 8004028:	b29a      	uxth	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800402e:	2301      	movs	r3, #1
 8004030:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004032:	f7fd ff03 	bl	8001e3c <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800403e:	429a      	cmp	r2, r3
 8004040:	d80d      	bhi.n	800405e <HAL_SPI_TransmitReceive+0x1d0>
 8004042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004048:	d009      	beq.n	800405e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e0bc      	b.n	80041d8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004062:	b29b      	uxth	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1a0      	bne.n	8003faa <HAL_SPI_TransmitReceive+0x11c>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800406c:	b29b      	uxth	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d19b      	bne.n	8003faa <HAL_SPI_TransmitReceive+0x11c>
 8004072:	e082      	b.n	800417a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d002      	beq.n	8004082 <HAL_SPI_TransmitReceive+0x1f4>
 800407c:	8afb      	ldrh	r3, [r7, #22]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d171      	bne.n	8004166 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	330c      	adds	r3, #12
 800408c:	7812      	ldrb	r2, [r2, #0]
 800408e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004094:	1c5a      	adds	r2, r3, #1
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800409e:	b29b      	uxth	r3, r3
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040a8:	e05d      	b.n	8004166 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d11c      	bne.n	80040f2 <HAL_SPI_TransmitReceive+0x264>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040bc:	b29b      	uxth	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d017      	beq.n	80040f2 <HAL_SPI_TransmitReceive+0x264>
 80040c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d114      	bne.n	80040f2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	330c      	adds	r3, #12
 80040d2:	7812      	ldrb	r2, [r2, #0]
 80040d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	3b01      	subs	r3, #1
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040ee:	2300      	movs	r3, #0
 80040f0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d119      	bne.n	8004134 <HAL_SPI_TransmitReceive+0x2a6>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004104:	b29b      	uxth	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d014      	beq.n	8004134 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68da      	ldr	r2, [r3, #12]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004114:	b2d2      	uxtb	r2, r2
 8004116:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800411c:	1c5a      	adds	r2, r3, #1
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004126:	b29b      	uxth	r3, r3
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004130:	2301      	movs	r3, #1
 8004132:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004134:	f7fd fe82 	bl	8001e3c <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004140:	429a      	cmp	r2, r3
 8004142:	d803      	bhi.n	800414c <HAL_SPI_TransmitReceive+0x2be>
 8004144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800414a:	d102      	bne.n	8004152 <HAL_SPI_TransmitReceive+0x2c4>
 800414c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800414e:	2b00      	cmp	r3, #0
 8004150:	d109      	bne.n	8004166 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e038      	b.n	80041d8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800416a:	b29b      	uxth	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	d19c      	bne.n	80040aa <HAL_SPI_TransmitReceive+0x21c>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d197      	bne.n	80040aa <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800417a:	6a3a      	ldr	r2, [r7, #32]
 800417c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 f9d6 	bl	8004530 <SPI_EndRxTxTransaction>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d008      	beq.n	800419c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2220      	movs	r2, #32
 800418e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e01d      	b.n	80041d8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10a      	bne.n	80041ba <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041a4:	2300      	movs	r3, #0
 80041a6:	613b      	str	r3, [r7, #16]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	613b      	str	r3, [r7, #16]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	613b      	str	r3, [r7, #16]
 80041b8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e000      	b.n	80041d8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80041d6:	2300      	movs	r3, #0
  }
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3728      	adds	r7, #40	@ 0x28
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b088      	sub	sp, #32
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10e      	bne.n	8004220 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004208:	2b00      	cmp	r3, #0
 800420a:	d009      	beq.n	8004220 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004212:	2b00      	cmp	r3, #0
 8004214:	d004      	beq.n	8004220 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	4798      	blx	r3
    return;
 800421e:	e0ce      	b.n	80043be <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d009      	beq.n	800423e <HAL_SPI_IRQHandler+0x5e>
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004230:	2b00      	cmp	r3, #0
 8004232:	d004      	beq.n	800423e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	4798      	blx	r3
    return;
 800423c:	e0bf      	b.n	80043be <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	f003 0320 	and.w	r3, r3, #32
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10a      	bne.n	800425e <HAL_SPI_IRQHandler+0x7e>
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800424e:	2b00      	cmp	r3, #0
 8004250:	d105      	bne.n	800425e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 80b0 	beq.w	80043be <HAL_SPI_IRQHandler+0x1de>
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	f003 0320 	and.w	r3, r3, #32
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 80aa 	beq.w	80043be <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004270:	2b00      	cmp	r3, #0
 8004272:	d023      	beq.n	80042bc <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b03      	cmp	r3, #3
 800427e:	d011      	beq.n	80042a4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004284:	f043 0204 	orr.w	r2, r3, #4
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800428c:	2300      	movs	r3, #0
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	617b      	str	r3, [r7, #20]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	617b      	str	r3, [r7, #20]
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	e00b      	b.n	80042bc <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042a4:	2300      	movs	r3, #0
 80042a6:	613b      	str	r3, [r7, #16]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	613b      	str	r3, [r7, #16]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	613b      	str	r3, [r7, #16]
 80042b8:	693b      	ldr	r3, [r7, #16]
        return;
 80042ba:	e080      	b.n	80043be <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	f003 0320 	and.w	r3, r3, #32
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d014      	beq.n	80042f0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ca:	f043 0201 	orr.w	r2, r3, #1
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80042d2:	2300      	movs	r3, #0
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00c      	beq.n	8004314 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042fe:	f043 0208 	orr.w	r2, r3, #8
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004306:	2300      	movs	r3, #0
 8004308:	60bb      	str	r3, [r7, #8]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	60bb      	str	r3, [r7, #8]
 8004312:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004318:	2b00      	cmp	r3, #0
 800431a:	d04f      	beq.n	80043bc <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800432a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d104      	bne.n	8004348 <HAL_SPI_IRQHandler+0x168>
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b00      	cmp	r3, #0
 8004346:	d034      	beq.n	80043b2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0203 	bic.w	r2, r2, #3
 8004356:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800435c:	2b00      	cmp	r3, #0
 800435e:	d011      	beq.n	8004384 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004364:	4a17      	ldr	r2, [pc, #92]	@ (80043c4 <HAL_SPI_IRQHandler+0x1e4>)
 8004366:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800436c:	4618      	mov	r0, r3
 800436e:	f7fe f963 	bl	8002638 <HAL_DMA_Abort_IT>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d005      	beq.n	8004384 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800437c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004388:	2b00      	cmp	r3, #0
 800438a:	d016      	beq.n	80043ba <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004390:	4a0c      	ldr	r2, [pc, #48]	@ (80043c4 <HAL_SPI_IRQHandler+0x1e4>)
 8004392:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004398:	4618      	mov	r0, r3
 800439a:	f7fe f94d 	bl	8002638 <HAL_DMA_Abort_IT>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00a      	beq.n	80043ba <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043a8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80043b0:	e003      	b.n	80043ba <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f808 	bl	80043c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80043b8:	e000      	b.n	80043bc <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80043ba:	bf00      	nop
    return;
 80043bc:	bf00      	nop
  }
}
 80043be:	3720      	adds	r7, #32
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	080043f9 	.word	0x080043f9

080043c8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80043ea:	b2db      	uxtb	r3, r3
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004404:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f7ff ffd8 	bl	80043c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004418:	bf00      	nop
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b088      	sub	sp, #32
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	603b      	str	r3, [r7, #0]
 800442c:	4613      	mov	r3, r2
 800442e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004430:	f7fd fd04 	bl	8001e3c <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004438:	1a9b      	subs	r3, r3, r2
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	4413      	add	r3, r2
 800443e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004440:	f7fd fcfc 	bl	8001e3c <HAL_GetTick>
 8004444:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004446:	4b39      	ldr	r3, [pc, #228]	@ (800452c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	015b      	lsls	r3, r3, #5
 800444c:	0d1b      	lsrs	r3, r3, #20
 800444e:	69fa      	ldr	r2, [r7, #28]
 8004450:	fb02 f303 	mul.w	r3, r2, r3
 8004454:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004456:	e054      	b.n	8004502 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445e:	d050      	beq.n	8004502 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004460:	f7fd fcec 	bl	8001e3c <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	69fa      	ldr	r2, [r7, #28]
 800446c:	429a      	cmp	r2, r3
 800446e:	d902      	bls.n	8004476 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d13d      	bne.n	80044f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004484:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800448e:	d111      	bne.n	80044b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004498:	d004      	beq.n	80044a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044a2:	d107      	bne.n	80044b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044bc:	d10f      	bne.n	80044de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044cc:	601a      	str	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e017      	b.n	8004522 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	3b01      	subs	r3, #1
 8004500:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	4013      	ands	r3, r2
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	429a      	cmp	r2, r3
 8004510:	bf0c      	ite	eq
 8004512:	2301      	moveq	r3, #1
 8004514:	2300      	movne	r3, #0
 8004516:	b2db      	uxtb	r3, r3
 8004518:	461a      	mov	r2, r3
 800451a:	79fb      	ldrb	r3, [r7, #7]
 800451c:	429a      	cmp	r2, r3
 800451e:	d19b      	bne.n	8004458 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3720      	adds	r7, #32
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	20000000 	.word	0x20000000

08004530 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b088      	sub	sp, #32
 8004534:	af02      	add	r7, sp, #8
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	2201      	movs	r2, #1
 8004544:	2102      	movs	r1, #2
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f7ff ff6a 	bl	8004420 <SPI_WaitFlagStateUntilTimeout>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d007      	beq.n	8004562 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004556:	f043 0220 	orr.w	r2, r3, #32
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e032      	b.n	80045c8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004562:	4b1b      	ldr	r3, [pc, #108]	@ (80045d0 <SPI_EndRxTxTransaction+0xa0>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a1b      	ldr	r2, [pc, #108]	@ (80045d4 <SPI_EndRxTxTransaction+0xa4>)
 8004568:	fba2 2303 	umull	r2, r3, r2, r3
 800456c:	0d5b      	lsrs	r3, r3, #21
 800456e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004572:	fb02 f303 	mul.w	r3, r2, r3
 8004576:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004580:	d112      	bne.n	80045a8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2200      	movs	r2, #0
 800458a:	2180      	movs	r1, #128	@ 0x80
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f7ff ff47 	bl	8004420 <SPI_WaitFlagStateUntilTimeout>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d016      	beq.n	80045c6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800459c:	f043 0220 	orr.w	r2, r3, #32
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e00f      	b.n	80045c8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00a      	beq.n	80045c4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	3b01      	subs	r3, #1
 80045b2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045be:	2b80      	cmp	r3, #128	@ 0x80
 80045c0:	d0f2      	beq.n	80045a8 <SPI_EndRxTxTransaction+0x78>
 80045c2:	e000      	b.n	80045c6 <SPI_EndRxTxTransaction+0x96>
        break;
 80045c4:	bf00      	nop
  }

  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3718      	adds	r7, #24
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	20000000 	.word	0x20000000
 80045d4:	165e9f81 	.word	0x165e9f81

080045d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e041      	b.n	800466e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d106      	bne.n	8004604 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7fd fb22 	bl	8001c48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2202      	movs	r2, #2
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	3304      	adds	r3, #4
 8004614:	4619      	mov	r1, r3
 8004616:	4610      	mov	r0, r2
 8004618:	f000 fae6 	bl	8004be8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
	...

08004678 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b01      	cmp	r3, #1
 800468a:	d001      	beq.n	8004690 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e046      	b.n	800471e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a23      	ldr	r2, [pc, #140]	@ (800472c <HAL_TIM_Base_Start+0xb4>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d022      	beq.n	80046e8 <HAL_TIM_Base_Start+0x70>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046aa:	d01d      	beq.n	80046e8 <HAL_TIM_Base_Start+0x70>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a1f      	ldr	r2, [pc, #124]	@ (8004730 <HAL_TIM_Base_Start+0xb8>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d018      	beq.n	80046e8 <HAL_TIM_Base_Start+0x70>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a1e      	ldr	r2, [pc, #120]	@ (8004734 <HAL_TIM_Base_Start+0xbc>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d013      	beq.n	80046e8 <HAL_TIM_Base_Start+0x70>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a1c      	ldr	r2, [pc, #112]	@ (8004738 <HAL_TIM_Base_Start+0xc0>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d00e      	beq.n	80046e8 <HAL_TIM_Base_Start+0x70>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a1b      	ldr	r2, [pc, #108]	@ (800473c <HAL_TIM_Base_Start+0xc4>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d009      	beq.n	80046e8 <HAL_TIM_Base_Start+0x70>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a19      	ldr	r2, [pc, #100]	@ (8004740 <HAL_TIM_Base_Start+0xc8>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d004      	beq.n	80046e8 <HAL_TIM_Base_Start+0x70>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a18      	ldr	r2, [pc, #96]	@ (8004744 <HAL_TIM_Base_Start+0xcc>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d111      	bne.n	800470c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f003 0307 	and.w	r3, r3, #7
 80046f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2b06      	cmp	r3, #6
 80046f8:	d010      	beq.n	800471c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f042 0201 	orr.w	r2, r2, #1
 8004708:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800470a:	e007      	b.n	800471c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0201 	orr.w	r2, r2, #1
 800471a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	40010000 	.word	0x40010000
 8004730:	40000400 	.word	0x40000400
 8004734:	40000800 	.word	0x40000800
 8004738:	40000c00 	.word	0x40000c00
 800473c:	40010400 	.word	0x40010400
 8004740:	40014000 	.word	0x40014000
 8004744:	40001800 	.word	0x40001800

08004748 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b01      	cmp	r3, #1
 800475a:	d001      	beq.n	8004760 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e04e      	b.n	80047fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2202      	movs	r2, #2
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f042 0201 	orr.w	r2, r2, #1
 8004776:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a23      	ldr	r2, [pc, #140]	@ (800480c <HAL_TIM_Base_Start_IT+0xc4>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d022      	beq.n	80047c8 <HAL_TIM_Base_Start_IT+0x80>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800478a:	d01d      	beq.n	80047c8 <HAL_TIM_Base_Start_IT+0x80>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a1f      	ldr	r2, [pc, #124]	@ (8004810 <HAL_TIM_Base_Start_IT+0xc8>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d018      	beq.n	80047c8 <HAL_TIM_Base_Start_IT+0x80>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a1e      	ldr	r2, [pc, #120]	@ (8004814 <HAL_TIM_Base_Start_IT+0xcc>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d013      	beq.n	80047c8 <HAL_TIM_Base_Start_IT+0x80>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a1c      	ldr	r2, [pc, #112]	@ (8004818 <HAL_TIM_Base_Start_IT+0xd0>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d00e      	beq.n	80047c8 <HAL_TIM_Base_Start_IT+0x80>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a1b      	ldr	r2, [pc, #108]	@ (800481c <HAL_TIM_Base_Start_IT+0xd4>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d009      	beq.n	80047c8 <HAL_TIM_Base_Start_IT+0x80>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a19      	ldr	r2, [pc, #100]	@ (8004820 <HAL_TIM_Base_Start_IT+0xd8>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d004      	beq.n	80047c8 <HAL_TIM_Base_Start_IT+0x80>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a18      	ldr	r2, [pc, #96]	@ (8004824 <HAL_TIM_Base_Start_IT+0xdc>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d111      	bne.n	80047ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 0307 	and.w	r3, r3, #7
 80047d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2b06      	cmp	r3, #6
 80047d8:	d010      	beq.n	80047fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f042 0201 	orr.w	r2, r2, #1
 80047e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ea:	e007      	b.n	80047fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0201 	orr.w	r2, r2, #1
 80047fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	40010000 	.word	0x40010000
 8004810:	40000400 	.word	0x40000400
 8004814:	40000800 	.word	0x40000800
 8004818:	40000c00 	.word	0x40000c00
 800481c:	40010400 	.word	0x40010400
 8004820:	40014000 	.word	0x40014000
 8004824:	40001800 	.word	0x40001800

08004828 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d020      	beq.n	800488c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d01b      	beq.n	800488c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f06f 0202 	mvn.w	r2, #2
 800485c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	f003 0303 	and.w	r3, r3, #3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f999 	bl	8004baa <HAL_TIM_IC_CaptureCallback>
 8004878:	e005      	b.n	8004886 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f98b 	bl	8004b96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f99c 	bl	8004bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	f003 0304 	and.w	r3, r3, #4
 8004892:	2b00      	cmp	r3, #0
 8004894:	d020      	beq.n	80048d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b00      	cmp	r3, #0
 800489e:	d01b      	beq.n	80048d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f06f 0204 	mvn.w	r2, #4
 80048a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2202      	movs	r2, #2
 80048ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f973 	bl	8004baa <HAL_TIM_IC_CaptureCallback>
 80048c4:	e005      	b.n	80048d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f965 	bl	8004b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f976 	bl	8004bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	f003 0308 	and.w	r3, r3, #8
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d020      	beq.n	8004924 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f003 0308 	and.w	r3, r3, #8
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d01b      	beq.n	8004924 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f06f 0208 	mvn.w	r2, #8
 80048f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2204      	movs	r2, #4
 80048fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	f003 0303 	and.w	r3, r3, #3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d003      	beq.n	8004912 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f94d 	bl	8004baa <HAL_TIM_IC_CaptureCallback>
 8004910:	e005      	b.n	800491e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f93f 	bl	8004b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 f950 	bl	8004bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	f003 0310 	and.w	r3, r3, #16
 800492a:	2b00      	cmp	r3, #0
 800492c:	d020      	beq.n	8004970 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f003 0310 	and.w	r3, r3, #16
 8004934:	2b00      	cmp	r3, #0
 8004936:	d01b      	beq.n	8004970 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f06f 0210 	mvn.w	r2, #16
 8004940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2208      	movs	r2, #8
 8004946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f927 	bl	8004baa <HAL_TIM_IC_CaptureCallback>
 800495c:	e005      	b.n	800496a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f919 	bl	8004b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f92a 	bl	8004bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00c      	beq.n	8004994 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b00      	cmp	r3, #0
 8004982:	d007      	beq.n	8004994 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f06f 0201 	mvn.w	r2, #1
 800498c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7fc fea4 	bl	80016dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00c      	beq.n	80049b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d007      	beq.n	80049b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80049b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 fae4 	bl	8004f80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00c      	beq.n	80049dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d007      	beq.n	80049dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80049d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f8fb 	bl	8004bd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	f003 0320 	and.w	r3, r3, #32
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00c      	beq.n	8004a00 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f003 0320 	and.w	r3, r3, #32
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d007      	beq.n	8004a00 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f06f 0220 	mvn.w	r2, #32
 80049f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 fab6 	bl	8004f6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a00:	bf00      	nop
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d101      	bne.n	8004a24 <HAL_TIM_ConfigClockSource+0x1c>
 8004a20:	2302      	movs	r3, #2
 8004a22:	e0b4      	b.n	8004b8e <HAL_TIM_ConfigClockSource+0x186>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004a42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a5c:	d03e      	beq.n	8004adc <HAL_TIM_ConfigClockSource+0xd4>
 8004a5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a62:	f200 8087 	bhi.w	8004b74 <HAL_TIM_ConfigClockSource+0x16c>
 8004a66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a6a:	f000 8086 	beq.w	8004b7a <HAL_TIM_ConfigClockSource+0x172>
 8004a6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a72:	d87f      	bhi.n	8004b74 <HAL_TIM_ConfigClockSource+0x16c>
 8004a74:	2b70      	cmp	r3, #112	@ 0x70
 8004a76:	d01a      	beq.n	8004aae <HAL_TIM_ConfigClockSource+0xa6>
 8004a78:	2b70      	cmp	r3, #112	@ 0x70
 8004a7a:	d87b      	bhi.n	8004b74 <HAL_TIM_ConfigClockSource+0x16c>
 8004a7c:	2b60      	cmp	r3, #96	@ 0x60
 8004a7e:	d050      	beq.n	8004b22 <HAL_TIM_ConfigClockSource+0x11a>
 8004a80:	2b60      	cmp	r3, #96	@ 0x60
 8004a82:	d877      	bhi.n	8004b74 <HAL_TIM_ConfigClockSource+0x16c>
 8004a84:	2b50      	cmp	r3, #80	@ 0x50
 8004a86:	d03c      	beq.n	8004b02 <HAL_TIM_ConfigClockSource+0xfa>
 8004a88:	2b50      	cmp	r3, #80	@ 0x50
 8004a8a:	d873      	bhi.n	8004b74 <HAL_TIM_ConfigClockSource+0x16c>
 8004a8c:	2b40      	cmp	r3, #64	@ 0x40
 8004a8e:	d058      	beq.n	8004b42 <HAL_TIM_ConfigClockSource+0x13a>
 8004a90:	2b40      	cmp	r3, #64	@ 0x40
 8004a92:	d86f      	bhi.n	8004b74 <HAL_TIM_ConfigClockSource+0x16c>
 8004a94:	2b30      	cmp	r3, #48	@ 0x30
 8004a96:	d064      	beq.n	8004b62 <HAL_TIM_ConfigClockSource+0x15a>
 8004a98:	2b30      	cmp	r3, #48	@ 0x30
 8004a9a:	d86b      	bhi.n	8004b74 <HAL_TIM_ConfigClockSource+0x16c>
 8004a9c:	2b20      	cmp	r3, #32
 8004a9e:	d060      	beq.n	8004b62 <HAL_TIM_ConfigClockSource+0x15a>
 8004aa0:	2b20      	cmp	r3, #32
 8004aa2:	d867      	bhi.n	8004b74 <HAL_TIM_ConfigClockSource+0x16c>
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d05c      	beq.n	8004b62 <HAL_TIM_ConfigClockSource+0x15a>
 8004aa8:	2b10      	cmp	r3, #16
 8004aaa:	d05a      	beq.n	8004b62 <HAL_TIM_ConfigClockSource+0x15a>
 8004aac:	e062      	b.n	8004b74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004abe:	f000 f9b9 	bl	8004e34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ad0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	609a      	str	r2, [r3, #8]
      break;
 8004ada:	e04f      	b.n	8004b7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004aec:	f000 f9a2 	bl	8004e34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689a      	ldr	r2, [r3, #8]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004afe:	609a      	str	r2, [r3, #8]
      break;
 8004b00:	e03c      	b.n	8004b7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b0e:	461a      	mov	r2, r3
 8004b10:	f000 f916 	bl	8004d40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2150      	movs	r1, #80	@ 0x50
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 f96f 	bl	8004dfe <TIM_ITRx_SetConfig>
      break;
 8004b20:	e02c      	b.n	8004b7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b2e:	461a      	mov	r2, r3
 8004b30:	f000 f935 	bl	8004d9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2160      	movs	r1, #96	@ 0x60
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 f95f 	bl	8004dfe <TIM_ITRx_SetConfig>
      break;
 8004b40:	e01c      	b.n	8004b7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b4e:	461a      	mov	r2, r3
 8004b50:	f000 f8f6 	bl	8004d40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2140      	movs	r1, #64	@ 0x40
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 f94f 	bl	8004dfe <TIM_ITRx_SetConfig>
      break;
 8004b60:	e00c      	b.n	8004b7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	4610      	mov	r0, r2
 8004b6e:	f000 f946 	bl	8004dfe <TIM_ITRx_SetConfig>
      break;
 8004b72:	e003      	b.n	8004b7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	73fb      	strb	r3, [r7, #15]
      break;
 8004b78:	e000      	b.n	8004b7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b083      	sub	sp, #12
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b9e:	bf00      	nop
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b083      	sub	sp, #12
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bb2:	bf00      	nop
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b083      	sub	sp, #12
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bc6:	bf00      	nop
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bda:	bf00      	nop
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
	...

08004be8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a46      	ldr	r2, [pc, #280]	@ (8004d14 <TIM_Base_SetConfig+0x12c>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d013      	beq.n	8004c28 <TIM_Base_SetConfig+0x40>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c06:	d00f      	beq.n	8004c28 <TIM_Base_SetConfig+0x40>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a43      	ldr	r2, [pc, #268]	@ (8004d18 <TIM_Base_SetConfig+0x130>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d00b      	beq.n	8004c28 <TIM_Base_SetConfig+0x40>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a42      	ldr	r2, [pc, #264]	@ (8004d1c <TIM_Base_SetConfig+0x134>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d007      	beq.n	8004c28 <TIM_Base_SetConfig+0x40>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a41      	ldr	r2, [pc, #260]	@ (8004d20 <TIM_Base_SetConfig+0x138>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d003      	beq.n	8004c28 <TIM_Base_SetConfig+0x40>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a40      	ldr	r2, [pc, #256]	@ (8004d24 <TIM_Base_SetConfig+0x13c>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d108      	bne.n	8004c3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a35      	ldr	r2, [pc, #212]	@ (8004d14 <TIM_Base_SetConfig+0x12c>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d02b      	beq.n	8004c9a <TIM_Base_SetConfig+0xb2>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c48:	d027      	beq.n	8004c9a <TIM_Base_SetConfig+0xb2>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a32      	ldr	r2, [pc, #200]	@ (8004d18 <TIM_Base_SetConfig+0x130>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d023      	beq.n	8004c9a <TIM_Base_SetConfig+0xb2>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a31      	ldr	r2, [pc, #196]	@ (8004d1c <TIM_Base_SetConfig+0x134>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d01f      	beq.n	8004c9a <TIM_Base_SetConfig+0xb2>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a30      	ldr	r2, [pc, #192]	@ (8004d20 <TIM_Base_SetConfig+0x138>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d01b      	beq.n	8004c9a <TIM_Base_SetConfig+0xb2>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a2f      	ldr	r2, [pc, #188]	@ (8004d24 <TIM_Base_SetConfig+0x13c>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d017      	beq.n	8004c9a <TIM_Base_SetConfig+0xb2>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a2e      	ldr	r2, [pc, #184]	@ (8004d28 <TIM_Base_SetConfig+0x140>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d013      	beq.n	8004c9a <TIM_Base_SetConfig+0xb2>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a2d      	ldr	r2, [pc, #180]	@ (8004d2c <TIM_Base_SetConfig+0x144>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d00f      	beq.n	8004c9a <TIM_Base_SetConfig+0xb2>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a2c      	ldr	r2, [pc, #176]	@ (8004d30 <TIM_Base_SetConfig+0x148>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d00b      	beq.n	8004c9a <TIM_Base_SetConfig+0xb2>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a2b      	ldr	r2, [pc, #172]	@ (8004d34 <TIM_Base_SetConfig+0x14c>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d007      	beq.n	8004c9a <TIM_Base_SetConfig+0xb2>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a2a      	ldr	r2, [pc, #168]	@ (8004d38 <TIM_Base_SetConfig+0x150>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d003      	beq.n	8004c9a <TIM_Base_SetConfig+0xb2>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a29      	ldr	r2, [pc, #164]	@ (8004d3c <TIM_Base_SetConfig+0x154>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d108      	bne.n	8004cac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a10      	ldr	r2, [pc, #64]	@ (8004d14 <TIM_Base_SetConfig+0x12c>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d003      	beq.n	8004ce0 <TIM_Base_SetConfig+0xf8>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a12      	ldr	r2, [pc, #72]	@ (8004d24 <TIM_Base_SetConfig+0x13c>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d103      	bne.n	8004ce8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	691a      	ldr	r2, [r3, #16]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d105      	bne.n	8004d06 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	f023 0201 	bic.w	r2, r3, #1
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	611a      	str	r2, [r3, #16]
  }
}
 8004d06:	bf00      	nop
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	40010000 	.word	0x40010000
 8004d18:	40000400 	.word	0x40000400
 8004d1c:	40000800 	.word	0x40000800
 8004d20:	40000c00 	.word	0x40000c00
 8004d24:	40010400 	.word	0x40010400
 8004d28:	40014000 	.word	0x40014000
 8004d2c:	40014400 	.word	0x40014400
 8004d30:	40014800 	.word	0x40014800
 8004d34:	40001800 	.word	0x40001800
 8004d38:	40001c00 	.word	0x40001c00
 8004d3c:	40002000 	.word	0x40002000

08004d40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b087      	sub	sp, #28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	f023 0201 	bic.w	r2, r3, #1
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	011b      	lsls	r3, r3, #4
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f023 030a 	bic.w	r3, r3, #10
 8004d7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	621a      	str	r2, [r3, #32]
}
 8004d92:	bf00      	nop
 8004d94:	371c      	adds	r7, #28
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b087      	sub	sp, #28
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	60f8      	str	r0, [r7, #12]
 8004da6:	60b9      	str	r1, [r7, #8]
 8004da8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	f023 0210 	bic.w	r2, r3, #16
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004dc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	031b      	lsls	r3, r3, #12
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004dda:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	011b      	lsls	r3, r3, #4
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	621a      	str	r2, [r3, #32]
}
 8004df2:	bf00      	nop
 8004df4:	371c      	adds	r7, #28
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b085      	sub	sp, #20
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
 8004e06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e16:	683a      	ldr	r2, [r7, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	f043 0307 	orr.w	r3, r3, #7
 8004e20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	609a      	str	r2, [r3, #8]
}
 8004e28:	bf00      	nop
 8004e2a:	3714      	adds	r7, #20
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b087      	sub	sp, #28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
 8004e40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	021a      	lsls	r2, r3, #8
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	431a      	orrs	r2, r3
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	609a      	str	r2, [r3, #8]
}
 8004e68:	bf00      	nop
 8004e6a:	371c      	adds	r7, #28
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d101      	bne.n	8004e8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	e05a      	b.n	8004f42 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2202      	movs	r2, #2
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a21      	ldr	r2, [pc, #132]	@ (8004f50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d022      	beq.n	8004f16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ed8:	d01d      	beq.n	8004f16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a1d      	ldr	r2, [pc, #116]	@ (8004f54 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d018      	beq.n	8004f16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a1b      	ldr	r2, [pc, #108]	@ (8004f58 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d013      	beq.n	8004f16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a1a      	ldr	r2, [pc, #104]	@ (8004f5c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d00e      	beq.n	8004f16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a18      	ldr	r2, [pc, #96]	@ (8004f60 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d009      	beq.n	8004f16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a17      	ldr	r2, [pc, #92]	@ (8004f64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d004      	beq.n	8004f16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a15      	ldr	r2, [pc, #84]	@ (8004f68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d10c      	bne.n	8004f30 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68ba      	ldr	r2, [r7, #8]
 8004f2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3714      	adds	r7, #20
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	40010000 	.word	0x40010000
 8004f54:	40000400 	.word	0x40000400
 8004f58:	40000800 	.word	0x40000800
 8004f5c:	40000c00 	.word	0x40000c00
 8004f60:	40010400 	.word	0x40010400
 8004f64:	40014000 	.word	0x40014000
 8004f68:	40001800 	.word	0x40001800

08004f6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e042      	b.n	800502c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d106      	bne.n	8004fc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7fc fe96 	bl	8001cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2224      	movs	r2, #36	@ 0x24
 8004fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68da      	ldr	r2, [r3, #12]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004fd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 f973 	bl	80052c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	691a      	ldr	r2, [r3, #16]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004fec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	695a      	ldr	r2, [r3, #20]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ffc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68da      	ldr	r2, [r3, #12]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800500c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2220      	movs	r2, #32
 8005018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2220      	movs	r2, #32
 8005020:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3708      	adds	r7, #8
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b08a      	sub	sp, #40	@ 0x28
 8005038:	af02      	add	r7, sp, #8
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	603b      	str	r3, [r7, #0]
 8005040:	4613      	mov	r3, r2
 8005042:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005044:	2300      	movs	r3, #0
 8005046:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b20      	cmp	r3, #32
 8005052:	d175      	bne.n	8005140 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <HAL_UART_Transmit+0x2c>
 800505a:	88fb      	ldrh	r3, [r7, #6]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e06e      	b.n	8005142 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2221      	movs	r2, #33	@ 0x21
 800506e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005072:	f7fc fee3 	bl	8001e3c <HAL_GetTick>
 8005076:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	88fa      	ldrh	r2, [r7, #6]
 800507c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	88fa      	ldrh	r2, [r7, #6]
 8005082:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800508c:	d108      	bne.n	80050a0 <HAL_UART_Transmit+0x6c>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d104      	bne.n	80050a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005096:	2300      	movs	r3, #0
 8005098:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	61bb      	str	r3, [r7, #24]
 800509e:	e003      	b.n	80050a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050a4:	2300      	movs	r3, #0
 80050a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050a8:	e02e      	b.n	8005108 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	2200      	movs	r2, #0
 80050b2:	2180      	movs	r1, #128	@ 0x80
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f000 f848 	bl	800514a <UART_WaitOnFlagUntilTimeout>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d005      	beq.n	80050cc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2220      	movs	r2, #32
 80050c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e03a      	b.n	8005142 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10b      	bne.n	80050ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	881b      	ldrh	r3, [r3, #0]
 80050d6:	461a      	mov	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	3302      	adds	r3, #2
 80050e6:	61bb      	str	r3, [r7, #24]
 80050e8:	e007      	b.n	80050fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	781a      	ldrb	r2, [r3, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	3301      	adds	r3, #1
 80050f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050fe:	b29b      	uxth	r3, r3
 8005100:	3b01      	subs	r3, #1
 8005102:	b29a      	uxth	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800510c:	b29b      	uxth	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1cb      	bne.n	80050aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	2200      	movs	r2, #0
 800511a:	2140      	movs	r1, #64	@ 0x40
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f000 f814 	bl	800514a <UART_WaitOnFlagUntilTimeout>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d005      	beq.n	8005134 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2220      	movs	r2, #32
 800512c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e006      	b.n	8005142 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2220      	movs	r2, #32
 8005138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800513c:	2300      	movs	r3, #0
 800513e:	e000      	b.n	8005142 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005140:	2302      	movs	r3, #2
  }
}
 8005142:	4618      	mov	r0, r3
 8005144:	3720      	adds	r7, #32
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b086      	sub	sp, #24
 800514e:	af00      	add	r7, sp, #0
 8005150:	60f8      	str	r0, [r7, #12]
 8005152:	60b9      	str	r1, [r7, #8]
 8005154:	603b      	str	r3, [r7, #0]
 8005156:	4613      	mov	r3, r2
 8005158:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800515a:	e03b      	b.n	80051d4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800515c:	6a3b      	ldr	r3, [r7, #32]
 800515e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005162:	d037      	beq.n	80051d4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005164:	f7fc fe6a 	bl	8001e3c <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	6a3a      	ldr	r2, [r7, #32]
 8005170:	429a      	cmp	r2, r3
 8005172:	d302      	bcc.n	800517a <UART_WaitOnFlagUntilTimeout+0x30>
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e03a      	b.n	80051f4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	f003 0304 	and.w	r3, r3, #4
 8005188:	2b00      	cmp	r3, #0
 800518a:	d023      	beq.n	80051d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2b80      	cmp	r3, #128	@ 0x80
 8005190:	d020      	beq.n	80051d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2b40      	cmp	r3, #64	@ 0x40
 8005196:	d01d      	beq.n	80051d4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0308 	and.w	r3, r3, #8
 80051a2:	2b08      	cmp	r3, #8
 80051a4:	d116      	bne.n	80051d4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80051a6:	2300      	movs	r3, #0
 80051a8:	617b      	str	r3, [r7, #20]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	617b      	str	r3, [r7, #20]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	617b      	str	r3, [r7, #20]
 80051ba:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 f81d 	bl	80051fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2208      	movs	r2, #8
 80051c6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e00f      	b.n	80051f4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	4013      	ands	r3, r2
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	bf0c      	ite	eq
 80051e4:	2301      	moveq	r3, #1
 80051e6:	2300      	movne	r3, #0
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	461a      	mov	r2, r3
 80051ec:	79fb      	ldrb	r3, [r7, #7]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d0b4      	beq.n	800515c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3718      	adds	r7, #24
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b095      	sub	sp, #84	@ 0x54
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	330c      	adds	r3, #12
 800520a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800520e:	e853 3f00 	ldrex	r3, [r3]
 8005212:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005216:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800521a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	330c      	adds	r3, #12
 8005222:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005224:	643a      	str	r2, [r7, #64]	@ 0x40
 8005226:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005228:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800522a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800522c:	e841 2300 	strex	r3, r2, [r1]
 8005230:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1e5      	bne.n	8005204 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	3314      	adds	r3, #20
 800523e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	e853 3f00 	ldrex	r3, [r3]
 8005246:	61fb      	str	r3, [r7, #28]
   return(result);
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	f023 0301 	bic.w	r3, r3, #1
 800524e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	3314      	adds	r3, #20
 8005256:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005258:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800525a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800525e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005260:	e841 2300 	strex	r3, r2, [r1]
 8005264:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1e5      	bne.n	8005238 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005270:	2b01      	cmp	r3, #1
 8005272:	d119      	bne.n	80052a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	330c      	adds	r3, #12
 800527a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	e853 3f00 	ldrex	r3, [r3]
 8005282:	60bb      	str	r3, [r7, #8]
   return(result);
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	f023 0310 	bic.w	r3, r3, #16
 800528a:	647b      	str	r3, [r7, #68]	@ 0x44
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	330c      	adds	r3, #12
 8005292:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005294:	61ba      	str	r2, [r7, #24]
 8005296:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005298:	6979      	ldr	r1, [r7, #20]
 800529a:	69ba      	ldr	r2, [r7, #24]
 800529c:	e841 2300 	strex	r3, r2, [r1]
 80052a0:	613b      	str	r3, [r7, #16]
   return(result);
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1e5      	bne.n	8005274 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2220      	movs	r2, #32
 80052ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80052b6:	bf00      	nop
 80052b8:	3754      	adds	r7, #84	@ 0x54
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
	...

080052c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052c8:	b0c0      	sub	sp, #256	@ 0x100
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80052dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e0:	68d9      	ldr	r1, [r3, #12]
 80052e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	ea40 0301 	orr.w	r3, r0, r1
 80052ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052f2:	689a      	ldr	r2, [r3, #8]
 80052f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	431a      	orrs	r2, r3
 80052fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	431a      	orrs	r2, r3
 8005304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005308:	69db      	ldr	r3, [r3, #28]
 800530a:	4313      	orrs	r3, r2
 800530c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800531c:	f021 010c 	bic.w	r1, r1, #12
 8005320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800532a:	430b      	orrs	r3, r1
 800532c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800532e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800533a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800533e:	6999      	ldr	r1, [r3, #24]
 8005340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	ea40 0301 	orr.w	r3, r0, r1
 800534a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800534c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	4b8f      	ldr	r3, [pc, #572]	@ (8005590 <UART_SetConfig+0x2cc>)
 8005354:	429a      	cmp	r2, r3
 8005356:	d005      	beq.n	8005364 <UART_SetConfig+0xa0>
 8005358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	4b8d      	ldr	r3, [pc, #564]	@ (8005594 <UART_SetConfig+0x2d0>)
 8005360:	429a      	cmp	r2, r3
 8005362:	d104      	bne.n	800536e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005364:	f7fe fb80 	bl	8003a68 <HAL_RCC_GetPCLK2Freq>
 8005368:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800536c:	e003      	b.n	8005376 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800536e:	f7fe fb67 	bl	8003a40 <HAL_RCC_GetPCLK1Freq>
 8005372:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800537a:	69db      	ldr	r3, [r3, #28]
 800537c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005380:	f040 810c 	bne.w	800559c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005384:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005388:	2200      	movs	r2, #0
 800538a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800538e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005392:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005396:	4622      	mov	r2, r4
 8005398:	462b      	mov	r3, r5
 800539a:	1891      	adds	r1, r2, r2
 800539c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800539e:	415b      	adcs	r3, r3
 80053a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80053a6:	4621      	mov	r1, r4
 80053a8:	eb12 0801 	adds.w	r8, r2, r1
 80053ac:	4629      	mov	r1, r5
 80053ae:	eb43 0901 	adc.w	r9, r3, r1
 80053b2:	f04f 0200 	mov.w	r2, #0
 80053b6:	f04f 0300 	mov.w	r3, #0
 80053ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053c6:	4690      	mov	r8, r2
 80053c8:	4699      	mov	r9, r3
 80053ca:	4623      	mov	r3, r4
 80053cc:	eb18 0303 	adds.w	r3, r8, r3
 80053d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80053d4:	462b      	mov	r3, r5
 80053d6:	eb49 0303 	adc.w	r3, r9, r3
 80053da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80053de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80053ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80053ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80053f2:	460b      	mov	r3, r1
 80053f4:	18db      	adds	r3, r3, r3
 80053f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80053f8:	4613      	mov	r3, r2
 80053fa:	eb42 0303 	adc.w	r3, r2, r3
 80053fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8005400:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005404:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005408:	f7fb fc3e 	bl	8000c88 <__aeabi_uldivmod>
 800540c:	4602      	mov	r2, r0
 800540e:	460b      	mov	r3, r1
 8005410:	4b61      	ldr	r3, [pc, #388]	@ (8005598 <UART_SetConfig+0x2d4>)
 8005412:	fba3 2302 	umull	r2, r3, r3, r2
 8005416:	095b      	lsrs	r3, r3, #5
 8005418:	011c      	lsls	r4, r3, #4
 800541a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800541e:	2200      	movs	r2, #0
 8005420:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005424:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005428:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800542c:	4642      	mov	r2, r8
 800542e:	464b      	mov	r3, r9
 8005430:	1891      	adds	r1, r2, r2
 8005432:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005434:	415b      	adcs	r3, r3
 8005436:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005438:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800543c:	4641      	mov	r1, r8
 800543e:	eb12 0a01 	adds.w	sl, r2, r1
 8005442:	4649      	mov	r1, r9
 8005444:	eb43 0b01 	adc.w	fp, r3, r1
 8005448:	f04f 0200 	mov.w	r2, #0
 800544c:	f04f 0300 	mov.w	r3, #0
 8005450:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005454:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005458:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800545c:	4692      	mov	sl, r2
 800545e:	469b      	mov	fp, r3
 8005460:	4643      	mov	r3, r8
 8005462:	eb1a 0303 	adds.w	r3, sl, r3
 8005466:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800546a:	464b      	mov	r3, r9
 800546c:	eb4b 0303 	adc.w	r3, fp, r3
 8005470:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005480:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005484:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005488:	460b      	mov	r3, r1
 800548a:	18db      	adds	r3, r3, r3
 800548c:	643b      	str	r3, [r7, #64]	@ 0x40
 800548e:	4613      	mov	r3, r2
 8005490:	eb42 0303 	adc.w	r3, r2, r3
 8005494:	647b      	str	r3, [r7, #68]	@ 0x44
 8005496:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800549a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800549e:	f7fb fbf3 	bl	8000c88 <__aeabi_uldivmod>
 80054a2:	4602      	mov	r2, r0
 80054a4:	460b      	mov	r3, r1
 80054a6:	4611      	mov	r1, r2
 80054a8:	4b3b      	ldr	r3, [pc, #236]	@ (8005598 <UART_SetConfig+0x2d4>)
 80054aa:	fba3 2301 	umull	r2, r3, r3, r1
 80054ae:	095b      	lsrs	r3, r3, #5
 80054b0:	2264      	movs	r2, #100	@ 0x64
 80054b2:	fb02 f303 	mul.w	r3, r2, r3
 80054b6:	1acb      	subs	r3, r1, r3
 80054b8:	00db      	lsls	r3, r3, #3
 80054ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80054be:	4b36      	ldr	r3, [pc, #216]	@ (8005598 <UART_SetConfig+0x2d4>)
 80054c0:	fba3 2302 	umull	r2, r3, r3, r2
 80054c4:	095b      	lsrs	r3, r3, #5
 80054c6:	005b      	lsls	r3, r3, #1
 80054c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80054cc:	441c      	add	r4, r3
 80054ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054d2:	2200      	movs	r2, #0
 80054d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80054d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80054dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80054e0:	4642      	mov	r2, r8
 80054e2:	464b      	mov	r3, r9
 80054e4:	1891      	adds	r1, r2, r2
 80054e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80054e8:	415b      	adcs	r3, r3
 80054ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80054f0:	4641      	mov	r1, r8
 80054f2:	1851      	adds	r1, r2, r1
 80054f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80054f6:	4649      	mov	r1, r9
 80054f8:	414b      	adcs	r3, r1
 80054fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80054fc:	f04f 0200 	mov.w	r2, #0
 8005500:	f04f 0300 	mov.w	r3, #0
 8005504:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005508:	4659      	mov	r1, fp
 800550a:	00cb      	lsls	r3, r1, #3
 800550c:	4651      	mov	r1, sl
 800550e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005512:	4651      	mov	r1, sl
 8005514:	00ca      	lsls	r2, r1, #3
 8005516:	4610      	mov	r0, r2
 8005518:	4619      	mov	r1, r3
 800551a:	4603      	mov	r3, r0
 800551c:	4642      	mov	r2, r8
 800551e:	189b      	adds	r3, r3, r2
 8005520:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005524:	464b      	mov	r3, r9
 8005526:	460a      	mov	r2, r1
 8005528:	eb42 0303 	adc.w	r3, r2, r3
 800552c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800553c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005540:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005544:	460b      	mov	r3, r1
 8005546:	18db      	adds	r3, r3, r3
 8005548:	62bb      	str	r3, [r7, #40]	@ 0x28
 800554a:	4613      	mov	r3, r2
 800554c:	eb42 0303 	adc.w	r3, r2, r3
 8005550:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005552:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005556:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800555a:	f7fb fb95 	bl	8000c88 <__aeabi_uldivmod>
 800555e:	4602      	mov	r2, r0
 8005560:	460b      	mov	r3, r1
 8005562:	4b0d      	ldr	r3, [pc, #52]	@ (8005598 <UART_SetConfig+0x2d4>)
 8005564:	fba3 1302 	umull	r1, r3, r3, r2
 8005568:	095b      	lsrs	r3, r3, #5
 800556a:	2164      	movs	r1, #100	@ 0x64
 800556c:	fb01 f303 	mul.w	r3, r1, r3
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	00db      	lsls	r3, r3, #3
 8005574:	3332      	adds	r3, #50	@ 0x32
 8005576:	4a08      	ldr	r2, [pc, #32]	@ (8005598 <UART_SetConfig+0x2d4>)
 8005578:	fba2 2303 	umull	r2, r3, r2, r3
 800557c:	095b      	lsrs	r3, r3, #5
 800557e:	f003 0207 	and.w	r2, r3, #7
 8005582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4422      	add	r2, r4
 800558a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800558c:	e106      	b.n	800579c <UART_SetConfig+0x4d8>
 800558e:	bf00      	nop
 8005590:	40011000 	.word	0x40011000
 8005594:	40011400 	.word	0x40011400
 8005598:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800559c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055a0:	2200      	movs	r2, #0
 80055a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80055a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80055aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80055ae:	4642      	mov	r2, r8
 80055b0:	464b      	mov	r3, r9
 80055b2:	1891      	adds	r1, r2, r2
 80055b4:	6239      	str	r1, [r7, #32]
 80055b6:	415b      	adcs	r3, r3
 80055b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80055ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055be:	4641      	mov	r1, r8
 80055c0:	1854      	adds	r4, r2, r1
 80055c2:	4649      	mov	r1, r9
 80055c4:	eb43 0501 	adc.w	r5, r3, r1
 80055c8:	f04f 0200 	mov.w	r2, #0
 80055cc:	f04f 0300 	mov.w	r3, #0
 80055d0:	00eb      	lsls	r3, r5, #3
 80055d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055d6:	00e2      	lsls	r2, r4, #3
 80055d8:	4614      	mov	r4, r2
 80055da:	461d      	mov	r5, r3
 80055dc:	4643      	mov	r3, r8
 80055de:	18e3      	adds	r3, r4, r3
 80055e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80055e4:	464b      	mov	r3, r9
 80055e6:	eb45 0303 	adc.w	r3, r5, r3
 80055ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80055ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80055fe:	f04f 0200 	mov.w	r2, #0
 8005602:	f04f 0300 	mov.w	r3, #0
 8005606:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800560a:	4629      	mov	r1, r5
 800560c:	008b      	lsls	r3, r1, #2
 800560e:	4621      	mov	r1, r4
 8005610:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005614:	4621      	mov	r1, r4
 8005616:	008a      	lsls	r2, r1, #2
 8005618:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800561c:	f7fb fb34 	bl	8000c88 <__aeabi_uldivmod>
 8005620:	4602      	mov	r2, r0
 8005622:	460b      	mov	r3, r1
 8005624:	4b60      	ldr	r3, [pc, #384]	@ (80057a8 <UART_SetConfig+0x4e4>)
 8005626:	fba3 2302 	umull	r2, r3, r3, r2
 800562a:	095b      	lsrs	r3, r3, #5
 800562c:	011c      	lsls	r4, r3, #4
 800562e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005632:	2200      	movs	r2, #0
 8005634:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005638:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800563c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005640:	4642      	mov	r2, r8
 8005642:	464b      	mov	r3, r9
 8005644:	1891      	adds	r1, r2, r2
 8005646:	61b9      	str	r1, [r7, #24]
 8005648:	415b      	adcs	r3, r3
 800564a:	61fb      	str	r3, [r7, #28]
 800564c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005650:	4641      	mov	r1, r8
 8005652:	1851      	adds	r1, r2, r1
 8005654:	6139      	str	r1, [r7, #16]
 8005656:	4649      	mov	r1, r9
 8005658:	414b      	adcs	r3, r1
 800565a:	617b      	str	r3, [r7, #20]
 800565c:	f04f 0200 	mov.w	r2, #0
 8005660:	f04f 0300 	mov.w	r3, #0
 8005664:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005668:	4659      	mov	r1, fp
 800566a:	00cb      	lsls	r3, r1, #3
 800566c:	4651      	mov	r1, sl
 800566e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005672:	4651      	mov	r1, sl
 8005674:	00ca      	lsls	r2, r1, #3
 8005676:	4610      	mov	r0, r2
 8005678:	4619      	mov	r1, r3
 800567a:	4603      	mov	r3, r0
 800567c:	4642      	mov	r2, r8
 800567e:	189b      	adds	r3, r3, r2
 8005680:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005684:	464b      	mov	r3, r9
 8005686:	460a      	mov	r2, r1
 8005688:	eb42 0303 	adc.w	r3, r2, r3
 800568c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	67bb      	str	r3, [r7, #120]	@ 0x78
 800569a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800569c:	f04f 0200 	mov.w	r2, #0
 80056a0:	f04f 0300 	mov.w	r3, #0
 80056a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80056a8:	4649      	mov	r1, r9
 80056aa:	008b      	lsls	r3, r1, #2
 80056ac:	4641      	mov	r1, r8
 80056ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056b2:	4641      	mov	r1, r8
 80056b4:	008a      	lsls	r2, r1, #2
 80056b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80056ba:	f7fb fae5 	bl	8000c88 <__aeabi_uldivmod>
 80056be:	4602      	mov	r2, r0
 80056c0:	460b      	mov	r3, r1
 80056c2:	4611      	mov	r1, r2
 80056c4:	4b38      	ldr	r3, [pc, #224]	@ (80057a8 <UART_SetConfig+0x4e4>)
 80056c6:	fba3 2301 	umull	r2, r3, r3, r1
 80056ca:	095b      	lsrs	r3, r3, #5
 80056cc:	2264      	movs	r2, #100	@ 0x64
 80056ce:	fb02 f303 	mul.w	r3, r2, r3
 80056d2:	1acb      	subs	r3, r1, r3
 80056d4:	011b      	lsls	r3, r3, #4
 80056d6:	3332      	adds	r3, #50	@ 0x32
 80056d8:	4a33      	ldr	r2, [pc, #204]	@ (80057a8 <UART_SetConfig+0x4e4>)
 80056da:	fba2 2303 	umull	r2, r3, r2, r3
 80056de:	095b      	lsrs	r3, r3, #5
 80056e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056e4:	441c      	add	r4, r3
 80056e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056ea:	2200      	movs	r2, #0
 80056ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80056ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80056f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80056f4:	4642      	mov	r2, r8
 80056f6:	464b      	mov	r3, r9
 80056f8:	1891      	adds	r1, r2, r2
 80056fa:	60b9      	str	r1, [r7, #8]
 80056fc:	415b      	adcs	r3, r3
 80056fe:	60fb      	str	r3, [r7, #12]
 8005700:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005704:	4641      	mov	r1, r8
 8005706:	1851      	adds	r1, r2, r1
 8005708:	6039      	str	r1, [r7, #0]
 800570a:	4649      	mov	r1, r9
 800570c:	414b      	adcs	r3, r1
 800570e:	607b      	str	r3, [r7, #4]
 8005710:	f04f 0200 	mov.w	r2, #0
 8005714:	f04f 0300 	mov.w	r3, #0
 8005718:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800571c:	4659      	mov	r1, fp
 800571e:	00cb      	lsls	r3, r1, #3
 8005720:	4651      	mov	r1, sl
 8005722:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005726:	4651      	mov	r1, sl
 8005728:	00ca      	lsls	r2, r1, #3
 800572a:	4610      	mov	r0, r2
 800572c:	4619      	mov	r1, r3
 800572e:	4603      	mov	r3, r0
 8005730:	4642      	mov	r2, r8
 8005732:	189b      	adds	r3, r3, r2
 8005734:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005736:	464b      	mov	r3, r9
 8005738:	460a      	mov	r2, r1
 800573a:	eb42 0303 	adc.w	r3, r2, r3
 800573e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	663b      	str	r3, [r7, #96]	@ 0x60
 800574a:	667a      	str	r2, [r7, #100]	@ 0x64
 800574c:	f04f 0200 	mov.w	r2, #0
 8005750:	f04f 0300 	mov.w	r3, #0
 8005754:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005758:	4649      	mov	r1, r9
 800575a:	008b      	lsls	r3, r1, #2
 800575c:	4641      	mov	r1, r8
 800575e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005762:	4641      	mov	r1, r8
 8005764:	008a      	lsls	r2, r1, #2
 8005766:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800576a:	f7fb fa8d 	bl	8000c88 <__aeabi_uldivmod>
 800576e:	4602      	mov	r2, r0
 8005770:	460b      	mov	r3, r1
 8005772:	4b0d      	ldr	r3, [pc, #52]	@ (80057a8 <UART_SetConfig+0x4e4>)
 8005774:	fba3 1302 	umull	r1, r3, r3, r2
 8005778:	095b      	lsrs	r3, r3, #5
 800577a:	2164      	movs	r1, #100	@ 0x64
 800577c:	fb01 f303 	mul.w	r3, r1, r3
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	011b      	lsls	r3, r3, #4
 8005784:	3332      	adds	r3, #50	@ 0x32
 8005786:	4a08      	ldr	r2, [pc, #32]	@ (80057a8 <UART_SetConfig+0x4e4>)
 8005788:	fba2 2303 	umull	r2, r3, r2, r3
 800578c:	095b      	lsrs	r3, r3, #5
 800578e:	f003 020f 	and.w	r2, r3, #15
 8005792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4422      	add	r2, r4
 800579a:	609a      	str	r2, [r3, #8]
}
 800579c:	bf00      	nop
 800579e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80057a2:	46bd      	mov	sp, r7
 80057a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057a8:	51eb851f 	.word	0x51eb851f

080057ac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	4603      	mov	r3, r0
 80057b4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80057b6:	2300      	movs	r3, #0
 80057b8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80057ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057be:	2b84      	cmp	r3, #132	@ 0x84
 80057c0:	d005      	beq.n	80057ce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80057c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	4413      	add	r3, r2
 80057ca:	3303      	adds	r3, #3
 80057cc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80057ce:	68fb      	ldr	r3, [r7, #12]
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80057e0:	f000 fafc 	bl	8005ddc <vTaskStartScheduler>
  
  return osOK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	bd80      	pop	{r7, pc}

080057ea <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80057ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057ec:	b089      	sub	sp, #36	@ 0x24
 80057ee:	af04      	add	r7, sp, #16
 80057f0:	6078      	str	r0, [r7, #4]
 80057f2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d020      	beq.n	800583e <osThreadCreate+0x54>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d01c      	beq.n	800583e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685c      	ldr	r4, [r3, #4]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	691e      	ldr	r6, [r3, #16]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005816:	4618      	mov	r0, r3
 8005818:	f7ff ffc8 	bl	80057ac <makeFreeRtosPriority>
 800581c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005826:	9202      	str	r2, [sp, #8]
 8005828:	9301      	str	r3, [sp, #4]
 800582a:	9100      	str	r1, [sp, #0]
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	4632      	mov	r2, r6
 8005830:	4629      	mov	r1, r5
 8005832:	4620      	mov	r0, r4
 8005834:	f000 f8ed 	bl	8005a12 <xTaskCreateStatic>
 8005838:	4603      	mov	r3, r0
 800583a:	60fb      	str	r3, [r7, #12]
 800583c:	e01c      	b.n	8005878 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685c      	ldr	r4, [r3, #4]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800584a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005852:	4618      	mov	r0, r3
 8005854:	f7ff ffaa 	bl	80057ac <makeFreeRtosPriority>
 8005858:	4602      	mov	r2, r0
 800585a:	f107 030c 	add.w	r3, r7, #12
 800585e:	9301      	str	r3, [sp, #4]
 8005860:	9200      	str	r2, [sp, #0]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	4632      	mov	r2, r6
 8005866:	4629      	mov	r1, r5
 8005868:	4620      	mov	r0, r4
 800586a:	f000 f932 	bl	8005ad2 <xTaskCreate>
 800586e:	4603      	mov	r3, r0
 8005870:	2b01      	cmp	r3, #1
 8005872:	d001      	beq.n	8005878 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005874:	2300      	movs	r3, #0
 8005876:	e000      	b.n	800587a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005878:	68fb      	ldr	r3, [r7, #12]
}
 800587a:	4618      	mov	r0, r3
 800587c:	3714      	adds	r7, #20
 800587e:	46bd      	mov	sp, r7
 8005880:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005882 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b084      	sub	sp, #16
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d001      	beq.n	8005898 <osDelay+0x16>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	e000      	b.n	800589a <osDelay+0x18>
 8005898:	2301      	movs	r3, #1
 800589a:	4618      	mov	r0, r3
 800589c:	f000 fa68 	bl	8005d70 <vTaskDelay>
  
  return osOK;
 80058a0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80058aa:	b480      	push	{r7}
 80058ac:	b083      	sub	sp, #12
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f103 0208 	add.w	r2, r3, #8
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f04f 32ff 	mov.w	r2, #4294967295
 80058c2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f103 0208 	add.w	r2, r3, #8
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f103 0208 	add.w	r2, r3, #8
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80058de:	bf00      	nop
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr

080058ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80058ea:	b480      	push	{r7}
 80058ec:	b083      	sub	sp, #12
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	689a      	ldr	r2, [r3, #8]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	683a      	ldr	r2, [r7, #0]
 8005928:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	683a      	ldr	r2, [r7, #0]
 800592e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	1c5a      	adds	r2, r3, #1
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	601a      	str	r2, [r3, #0]
}
 8005940:	bf00      	nop
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005962:	d103      	bne.n	800596c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	60fb      	str	r3, [r7, #12]
 800596a:	e00c      	b.n	8005986 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	3308      	adds	r3, #8
 8005970:	60fb      	str	r3, [r7, #12]
 8005972:	e002      	b.n	800597a <vListInsert+0x2e>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	60fb      	str	r3, [r7, #12]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	429a      	cmp	r2, r3
 8005984:	d2f6      	bcs.n	8005974 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	685a      	ldr	r2, [r3, #4]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	683a      	ldr	r2, [r7, #0]
 8005994:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	1c5a      	adds	r2, r3, #1
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	601a      	str	r2, [r3, #0]
}
 80059b2:	bf00      	nop
 80059b4:	3714      	adds	r7, #20
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80059be:	b480      	push	{r7}
 80059c0:	b085      	sub	sp, #20
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	6892      	ldr	r2, [r2, #8]
 80059d4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	6852      	ldr	r2, [r2, #4]
 80059de:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d103      	bne.n	80059f2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	689a      	ldr	r2, [r3, #8]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	1e5a      	subs	r2, r3, #1
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b08e      	sub	sp, #56	@ 0x38
 8005a16:	af04      	add	r7, sp, #16
 8005a18:	60f8      	str	r0, [r7, #12]
 8005a1a:	60b9      	str	r1, [r7, #8]
 8005a1c:	607a      	str	r2, [r7, #4]
 8005a1e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10b      	bne.n	8005a3e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a2a:	f383 8811 	msr	BASEPRI, r3
 8005a2e:	f3bf 8f6f 	isb	sy
 8005a32:	f3bf 8f4f 	dsb	sy
 8005a36:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005a38:	bf00      	nop
 8005a3a:	bf00      	nop
 8005a3c:	e7fd      	b.n	8005a3a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d10b      	bne.n	8005a5c <xTaskCreateStatic+0x4a>
	__asm volatile
 8005a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a48:	f383 8811 	msr	BASEPRI, r3
 8005a4c:	f3bf 8f6f 	isb	sy
 8005a50:	f3bf 8f4f 	dsb	sy
 8005a54:	61fb      	str	r3, [r7, #28]
}
 8005a56:	bf00      	nop
 8005a58:	bf00      	nop
 8005a5a:	e7fd      	b.n	8005a58 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005a5c:	23a0      	movs	r3, #160	@ 0xa0
 8005a5e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	2ba0      	cmp	r3, #160	@ 0xa0
 8005a64:	d00b      	beq.n	8005a7e <xTaskCreateStatic+0x6c>
	__asm volatile
 8005a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a6a:	f383 8811 	msr	BASEPRI, r3
 8005a6e:	f3bf 8f6f 	isb	sy
 8005a72:	f3bf 8f4f 	dsb	sy
 8005a76:	61bb      	str	r3, [r7, #24]
}
 8005a78:	bf00      	nop
 8005a7a:	bf00      	nop
 8005a7c:	e7fd      	b.n	8005a7a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005a7e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d01e      	beq.n	8005ac4 <xTaskCreateStatic+0xb2>
 8005a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d01b      	beq.n	8005ac4 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a8e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a94:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a98:	2202      	movs	r2, #2
 8005a9a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	9303      	str	r3, [sp, #12]
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa4:	9302      	str	r3, [sp, #8]
 8005aa6:	f107 0314 	add.w	r3, r7, #20
 8005aaa:	9301      	str	r3, [sp, #4]
 8005aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	68b9      	ldr	r1, [r7, #8]
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f000 f850 	bl	8005b5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005abc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005abe:	f000 f8ed 	bl	8005c9c <prvAddNewTaskToReadyList>
 8005ac2:	e001      	b.n	8005ac8 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005ac8:	697b      	ldr	r3, [r7, #20]
	}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3728      	adds	r7, #40	@ 0x28
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b08c      	sub	sp, #48	@ 0x30
 8005ad6:	af04      	add	r7, sp, #16
 8005ad8:	60f8      	str	r0, [r7, #12]
 8005ada:	60b9      	str	r1, [r7, #8]
 8005adc:	603b      	str	r3, [r7, #0]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ae2:	88fb      	ldrh	r3, [r7, #6]
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f000 fefe 	bl	80068e8 <pvPortMalloc>
 8005aec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d00e      	beq.n	8005b12 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005af4:	20a0      	movs	r0, #160	@ 0xa0
 8005af6:	f000 fef7 	bl	80068e8 <pvPortMalloc>
 8005afa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b08:	e005      	b.n	8005b16 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005b0a:	6978      	ldr	r0, [r7, #20]
 8005b0c:	f000 ffba 	bl	8006a84 <vPortFree>
 8005b10:	e001      	b.n	8005b16 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005b12:	2300      	movs	r3, #0
 8005b14:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d017      	beq.n	8005b4c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005b24:	88fa      	ldrh	r2, [r7, #6]
 8005b26:	2300      	movs	r3, #0
 8005b28:	9303      	str	r3, [sp, #12]
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	9302      	str	r3, [sp, #8]
 8005b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b30:	9301      	str	r3, [sp, #4]
 8005b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	68b9      	ldr	r1, [r7, #8]
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f000 f80e 	bl	8005b5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b40:	69f8      	ldr	r0, [r7, #28]
 8005b42:	f000 f8ab 	bl	8005c9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005b46:	2301      	movs	r3, #1
 8005b48:	61bb      	str	r3, [r7, #24]
 8005b4a:	e002      	b.n	8005b52 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b50:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005b52:	69bb      	ldr	r3, [r7, #24]
	}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3720      	adds	r7, #32
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b088      	sub	sp, #32
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
 8005b68:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005b74:	3b01      	subs	r3, #1
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	4413      	add	r3, r2
 8005b7a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	f023 0307 	bic.w	r3, r3, #7
 8005b82:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	f003 0307 	and.w	r3, r3, #7
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00b      	beq.n	8005ba6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b92:	f383 8811 	msr	BASEPRI, r3
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	617b      	str	r3, [r7, #20]
}
 8005ba0:	bf00      	nop
 8005ba2:	bf00      	nop
 8005ba4:	e7fd      	b.n	8005ba2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d01f      	beq.n	8005bec <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005bac:	2300      	movs	r3, #0
 8005bae:	61fb      	str	r3, [r7, #28]
 8005bb0:	e012      	b.n	8005bd8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	7819      	ldrb	r1, [r3, #0]
 8005bba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	3334      	adds	r3, #52	@ 0x34
 8005bc2:	460a      	mov	r2, r1
 8005bc4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005bc6:	68ba      	ldr	r2, [r7, #8]
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	4413      	add	r3, r2
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d006      	beq.n	8005be0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	61fb      	str	r3, [r7, #28]
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	2b0f      	cmp	r3, #15
 8005bdc:	d9e9      	bls.n	8005bb2 <prvInitialiseNewTask+0x56>
 8005bde:	e000      	b.n	8005be2 <prvInitialiseNewTask+0x86>
			{
				break;
 8005be0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005bea:	e003      	b.n	8005bf4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bf6:	2b06      	cmp	r3, #6
 8005bf8:	d901      	bls.n	8005bfe <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005bfa:	2306      	movs	r3, #6
 8005bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c02:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c08:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c12:	3304      	adds	r3, #4
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7ff fe68 	bl	80058ea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c1c:	3318      	adds	r3, #24
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7ff fe63 	bl	80058ea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c28:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c2c:	f1c3 0207 	rsb	r2, r3, #7
 8005c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c32:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c38:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c4c:	334c      	adds	r3, #76	@ 0x4c
 8005c4e:	224c      	movs	r2, #76	@ 0x4c
 8005c50:	2100      	movs	r1, #0
 8005c52:	4618      	mov	r0, r3
 8005c54:	f002 fc7c 	bl	8008550 <memset>
 8005c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c5a:	4a0d      	ldr	r2, [pc, #52]	@ (8005c90 <prvInitialiseNewTask+0x134>)
 8005c5c:	651a      	str	r2, [r3, #80]	@ 0x50
 8005c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c60:	4a0c      	ldr	r2, [pc, #48]	@ (8005c94 <prvInitialiseNewTask+0x138>)
 8005c62:	655a      	str	r2, [r3, #84]	@ 0x54
 8005c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c66:	4a0c      	ldr	r2, [pc, #48]	@ (8005c98 <prvInitialiseNewTask+0x13c>)
 8005c68:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005c6a:	683a      	ldr	r2, [r7, #0]
 8005c6c:	68f9      	ldr	r1, [r7, #12]
 8005c6e:	69b8      	ldr	r0, [r7, #24]
 8005c70:	f000 fc2a 	bl	80064c8 <pxPortInitialiseStack>
 8005c74:	4602      	mov	r2, r0
 8005c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c78:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d002      	beq.n	8005c86 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c86:	bf00      	nop
 8005c88:	3720      	adds	r7, #32
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	200047ac 	.word	0x200047ac
 8005c94:	20004814 	.word	0x20004814
 8005c98:	2000487c 	.word	0x2000487c

08005c9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ca4:	f000 fd40 	bl	8006728 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ca8:	4b2a      	ldr	r3, [pc, #168]	@ (8005d54 <prvAddNewTaskToReadyList+0xb8>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	3301      	adds	r3, #1
 8005cae:	4a29      	ldr	r2, [pc, #164]	@ (8005d54 <prvAddNewTaskToReadyList+0xb8>)
 8005cb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005cb2:	4b29      	ldr	r3, [pc, #164]	@ (8005d58 <prvAddNewTaskToReadyList+0xbc>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d109      	bne.n	8005cce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005cba:	4a27      	ldr	r2, [pc, #156]	@ (8005d58 <prvAddNewTaskToReadyList+0xbc>)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005cc0:	4b24      	ldr	r3, [pc, #144]	@ (8005d54 <prvAddNewTaskToReadyList+0xb8>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d110      	bne.n	8005cea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005cc8:	f000 fad4 	bl	8006274 <prvInitialiseTaskLists>
 8005ccc:	e00d      	b.n	8005cea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005cce:	4b23      	ldr	r3, [pc, #140]	@ (8005d5c <prvAddNewTaskToReadyList+0xc0>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d109      	bne.n	8005cea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005cd6:	4b20      	ldr	r3, [pc, #128]	@ (8005d58 <prvAddNewTaskToReadyList+0xbc>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d802      	bhi.n	8005cea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ce4:	4a1c      	ldr	r2, [pc, #112]	@ (8005d58 <prvAddNewTaskToReadyList+0xbc>)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005cea:	4b1d      	ldr	r3, [pc, #116]	@ (8005d60 <prvAddNewTaskToReadyList+0xc4>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	4a1b      	ldr	r2, [pc, #108]	@ (8005d60 <prvAddNewTaskToReadyList+0xc4>)
 8005cf2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	409a      	lsls	r2, r3
 8005cfc:	4b19      	ldr	r3, [pc, #100]	@ (8005d64 <prvAddNewTaskToReadyList+0xc8>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	4a18      	ldr	r2, [pc, #96]	@ (8005d64 <prvAddNewTaskToReadyList+0xc8>)
 8005d04:	6013      	str	r3, [r2, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4413      	add	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	4a15      	ldr	r2, [pc, #84]	@ (8005d68 <prvAddNewTaskToReadyList+0xcc>)
 8005d14:	441a      	add	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	3304      	adds	r3, #4
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	4610      	mov	r0, r2
 8005d1e:	f7ff fdf1 	bl	8005904 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005d22:	f000 fd33 	bl	800678c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005d26:	4b0d      	ldr	r3, [pc, #52]	@ (8005d5c <prvAddNewTaskToReadyList+0xc0>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00e      	beq.n	8005d4c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8005d58 <prvAddNewTaskToReadyList+0xbc>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d207      	bcs.n	8005d4c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8005d6c <prvAddNewTaskToReadyList+0xd0>)
 8005d3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d42:	601a      	str	r2, [r3, #0]
 8005d44:	f3bf 8f4f 	dsb	sy
 8005d48:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d4c:	bf00      	nop
 8005d4e:	3708      	adds	r7, #8
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	20000b0c 	.word	0x20000b0c
 8005d58:	20000a0c 	.word	0x20000a0c
 8005d5c:	20000b18 	.word	0x20000b18
 8005d60:	20000b28 	.word	0x20000b28
 8005d64:	20000b14 	.word	0x20000b14
 8005d68:	20000a10 	.word	0x20000a10
 8005d6c:	e000ed04 	.word	0xe000ed04

08005d70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d018      	beq.n	8005db4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005d82:	4b14      	ldr	r3, [pc, #80]	@ (8005dd4 <vTaskDelay+0x64>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00b      	beq.n	8005da2 <vTaskDelay+0x32>
	__asm volatile
 8005d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d8e:	f383 8811 	msr	BASEPRI, r3
 8005d92:	f3bf 8f6f 	isb	sy
 8005d96:	f3bf 8f4f 	dsb	sy
 8005d9a:	60bb      	str	r3, [r7, #8]
}
 8005d9c:	bf00      	nop
 8005d9e:	bf00      	nop
 8005da0:	e7fd      	b.n	8005d9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005da2:	f000 f885 	bl	8005eb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005da6:	2100      	movs	r1, #0
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 fb27 	bl	80063fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005dae:	f000 f88d 	bl	8005ecc <xTaskResumeAll>
 8005db2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d107      	bne.n	8005dca <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005dba:	4b07      	ldr	r3, [pc, #28]	@ (8005dd8 <vTaskDelay+0x68>)
 8005dbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	f3bf 8f4f 	dsb	sy
 8005dc6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005dca:	bf00      	nop
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	20000b34 	.word	0x20000b34
 8005dd8:	e000ed04 	.word	0xe000ed04

08005ddc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b08a      	sub	sp, #40	@ 0x28
 8005de0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005de2:	2300      	movs	r3, #0
 8005de4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005de6:	2300      	movs	r3, #0
 8005de8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005dea:	463a      	mov	r2, r7
 8005dec:	1d39      	adds	r1, r7, #4
 8005dee:	f107 0308 	add.w	r3, r7, #8
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7fb f9de 	bl	80011b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005df8:	6839      	ldr	r1, [r7, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	9202      	str	r2, [sp, #8]
 8005e00:	9301      	str	r3, [sp, #4]
 8005e02:	2300      	movs	r3, #0
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	2300      	movs	r3, #0
 8005e08:	460a      	mov	r2, r1
 8005e0a:	4921      	ldr	r1, [pc, #132]	@ (8005e90 <vTaskStartScheduler+0xb4>)
 8005e0c:	4821      	ldr	r0, [pc, #132]	@ (8005e94 <vTaskStartScheduler+0xb8>)
 8005e0e:	f7ff fe00 	bl	8005a12 <xTaskCreateStatic>
 8005e12:	4603      	mov	r3, r0
 8005e14:	4a20      	ldr	r2, [pc, #128]	@ (8005e98 <vTaskStartScheduler+0xbc>)
 8005e16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e18:	4b1f      	ldr	r3, [pc, #124]	@ (8005e98 <vTaskStartScheduler+0xbc>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d002      	beq.n	8005e26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005e20:	2301      	movs	r3, #1
 8005e22:	617b      	str	r3, [r7, #20]
 8005e24:	e001      	b.n	8005e2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005e26:	2300      	movs	r3, #0
 8005e28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d11b      	bne.n	8005e68 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e34:	f383 8811 	msr	BASEPRI, r3
 8005e38:	f3bf 8f6f 	isb	sy
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	613b      	str	r3, [r7, #16]
}
 8005e42:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005e44:	4b15      	ldr	r3, [pc, #84]	@ (8005e9c <vTaskStartScheduler+0xc0>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	334c      	adds	r3, #76	@ 0x4c
 8005e4a:	4a15      	ldr	r2, [pc, #84]	@ (8005ea0 <vTaskStartScheduler+0xc4>)
 8005e4c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005e4e:	4b15      	ldr	r3, [pc, #84]	@ (8005ea4 <vTaskStartScheduler+0xc8>)
 8005e50:	f04f 32ff 	mov.w	r2, #4294967295
 8005e54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005e56:	4b14      	ldr	r3, [pc, #80]	@ (8005ea8 <vTaskStartScheduler+0xcc>)
 8005e58:	2201      	movs	r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005e5c:	4b13      	ldr	r3, [pc, #76]	@ (8005eac <vTaskStartScheduler+0xd0>)
 8005e5e:	2200      	movs	r2, #0
 8005e60:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005e62:	f000 fbbd 	bl	80065e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005e66:	e00f      	b.n	8005e88 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6e:	d10b      	bne.n	8005e88 <vTaskStartScheduler+0xac>
	__asm volatile
 8005e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e74:	f383 8811 	msr	BASEPRI, r3
 8005e78:	f3bf 8f6f 	isb	sy
 8005e7c:	f3bf 8f4f 	dsb	sy
 8005e80:	60fb      	str	r3, [r7, #12]
}
 8005e82:	bf00      	nop
 8005e84:	bf00      	nop
 8005e86:	e7fd      	b.n	8005e84 <vTaskStartScheduler+0xa8>
}
 8005e88:	bf00      	nop
 8005e8a:	3718      	adds	r7, #24
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	0800bd88 	.word	0x0800bd88
 8005e94:	08006245 	.word	0x08006245
 8005e98:	20000b30 	.word	0x20000b30
 8005e9c:	20000a0c 	.word	0x20000a0c
 8005ea0:	2000001c 	.word	0x2000001c
 8005ea4:	20000b2c 	.word	0x20000b2c
 8005ea8:	20000b18 	.word	0x20000b18
 8005eac:	20000b10 	.word	0x20000b10

08005eb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005eb4:	4b04      	ldr	r3, [pc, #16]	@ (8005ec8 <vTaskSuspendAll+0x18>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	4a03      	ldr	r2, [pc, #12]	@ (8005ec8 <vTaskSuspendAll+0x18>)
 8005ebc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005ebe:	bf00      	nop
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	20000b34 	.word	0x20000b34

08005ecc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005eda:	4b42      	ldr	r3, [pc, #264]	@ (8005fe4 <xTaskResumeAll+0x118>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10b      	bne.n	8005efa <xTaskResumeAll+0x2e>
	__asm volatile
 8005ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee6:	f383 8811 	msr	BASEPRI, r3
 8005eea:	f3bf 8f6f 	isb	sy
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	603b      	str	r3, [r7, #0]
}
 8005ef4:	bf00      	nop
 8005ef6:	bf00      	nop
 8005ef8:	e7fd      	b.n	8005ef6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005efa:	f000 fc15 	bl	8006728 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005efe:	4b39      	ldr	r3, [pc, #228]	@ (8005fe4 <xTaskResumeAll+0x118>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	3b01      	subs	r3, #1
 8005f04:	4a37      	ldr	r2, [pc, #220]	@ (8005fe4 <xTaskResumeAll+0x118>)
 8005f06:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f08:	4b36      	ldr	r3, [pc, #216]	@ (8005fe4 <xTaskResumeAll+0x118>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d161      	bne.n	8005fd4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f10:	4b35      	ldr	r3, [pc, #212]	@ (8005fe8 <xTaskResumeAll+0x11c>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d05d      	beq.n	8005fd4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f18:	e02e      	b.n	8005f78 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f1a:	4b34      	ldr	r3, [pc, #208]	@ (8005fec <xTaskResumeAll+0x120>)
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	3318      	adds	r3, #24
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7ff fd49 	bl	80059be <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	3304      	adds	r3, #4
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7ff fd44 	bl	80059be <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	409a      	lsls	r2, r3
 8005f3e:	4b2c      	ldr	r3, [pc, #176]	@ (8005ff0 <xTaskResumeAll+0x124>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	4a2a      	ldr	r2, [pc, #168]	@ (8005ff0 <xTaskResumeAll+0x124>)
 8005f46:	6013      	str	r3, [r2, #0]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4413      	add	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4a27      	ldr	r2, [pc, #156]	@ (8005ff4 <xTaskResumeAll+0x128>)
 8005f56:	441a      	add	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	3304      	adds	r3, #4
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	4610      	mov	r0, r2
 8005f60:	f7ff fcd0 	bl	8005904 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f68:	4b23      	ldr	r3, [pc, #140]	@ (8005ff8 <xTaskResumeAll+0x12c>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d302      	bcc.n	8005f78 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005f72:	4b22      	ldr	r3, [pc, #136]	@ (8005ffc <xTaskResumeAll+0x130>)
 8005f74:	2201      	movs	r2, #1
 8005f76:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f78:	4b1c      	ldr	r3, [pc, #112]	@ (8005fec <xTaskResumeAll+0x120>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1cc      	bne.n	8005f1a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d001      	beq.n	8005f8a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005f86:	f000 fa19 	bl	80063bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8006000 <xTaskResumeAll+0x134>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d010      	beq.n	8005fb8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005f96:	f000 f837 	bl	8006008 <xTaskIncrementTick>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d002      	beq.n	8005fa6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005fa0:	4b16      	ldr	r3, [pc, #88]	@ (8005ffc <xTaskResumeAll+0x130>)
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1f1      	bne.n	8005f96 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005fb2:	4b13      	ldr	r3, [pc, #76]	@ (8006000 <xTaskResumeAll+0x134>)
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005fb8:	4b10      	ldr	r3, [pc, #64]	@ (8005ffc <xTaskResumeAll+0x130>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d009      	beq.n	8005fd4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8006004 <xTaskResumeAll+0x138>)
 8005fc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fca:	601a      	str	r2, [r3, #0]
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005fd4:	f000 fbda 	bl	800678c <vPortExitCritical>

	return xAlreadyYielded;
 8005fd8:	68bb      	ldr	r3, [r7, #8]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	20000b34 	.word	0x20000b34
 8005fe8:	20000b0c 	.word	0x20000b0c
 8005fec:	20000acc 	.word	0x20000acc
 8005ff0:	20000b14 	.word	0x20000b14
 8005ff4:	20000a10 	.word	0x20000a10
 8005ff8:	20000a0c 	.word	0x20000a0c
 8005ffc:	20000b20 	.word	0x20000b20
 8006000:	20000b1c 	.word	0x20000b1c
 8006004:	e000ed04 	.word	0xe000ed04

08006008 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800600e:	2300      	movs	r3, #0
 8006010:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006012:	4b4f      	ldr	r3, [pc, #316]	@ (8006150 <xTaskIncrementTick+0x148>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	f040 808f 	bne.w	800613a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800601c:	4b4d      	ldr	r3, [pc, #308]	@ (8006154 <xTaskIncrementTick+0x14c>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	3301      	adds	r3, #1
 8006022:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006024:	4a4b      	ldr	r2, [pc, #300]	@ (8006154 <xTaskIncrementTick+0x14c>)
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d121      	bne.n	8006074 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006030:	4b49      	ldr	r3, [pc, #292]	@ (8006158 <xTaskIncrementTick+0x150>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00b      	beq.n	8006052 <xTaskIncrementTick+0x4a>
	__asm volatile
 800603a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800603e:	f383 8811 	msr	BASEPRI, r3
 8006042:	f3bf 8f6f 	isb	sy
 8006046:	f3bf 8f4f 	dsb	sy
 800604a:	603b      	str	r3, [r7, #0]
}
 800604c:	bf00      	nop
 800604e:	bf00      	nop
 8006050:	e7fd      	b.n	800604e <xTaskIncrementTick+0x46>
 8006052:	4b41      	ldr	r3, [pc, #260]	@ (8006158 <xTaskIncrementTick+0x150>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	4b40      	ldr	r3, [pc, #256]	@ (800615c <xTaskIncrementTick+0x154>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a3e      	ldr	r2, [pc, #248]	@ (8006158 <xTaskIncrementTick+0x150>)
 800605e:	6013      	str	r3, [r2, #0]
 8006060:	4a3e      	ldr	r2, [pc, #248]	@ (800615c <xTaskIncrementTick+0x154>)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6013      	str	r3, [r2, #0]
 8006066:	4b3e      	ldr	r3, [pc, #248]	@ (8006160 <xTaskIncrementTick+0x158>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	3301      	adds	r3, #1
 800606c:	4a3c      	ldr	r2, [pc, #240]	@ (8006160 <xTaskIncrementTick+0x158>)
 800606e:	6013      	str	r3, [r2, #0]
 8006070:	f000 f9a4 	bl	80063bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006074:	4b3b      	ldr	r3, [pc, #236]	@ (8006164 <xTaskIncrementTick+0x15c>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	429a      	cmp	r2, r3
 800607c:	d348      	bcc.n	8006110 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800607e:	4b36      	ldr	r3, [pc, #216]	@ (8006158 <xTaskIncrementTick+0x150>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d104      	bne.n	8006092 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006088:	4b36      	ldr	r3, [pc, #216]	@ (8006164 <xTaskIncrementTick+0x15c>)
 800608a:	f04f 32ff 	mov.w	r2, #4294967295
 800608e:	601a      	str	r2, [r3, #0]
					break;
 8006090:	e03e      	b.n	8006110 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006092:	4b31      	ldr	r3, [pc, #196]	@ (8006158 <xTaskIncrementTick+0x150>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d203      	bcs.n	80060b2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80060aa:	4a2e      	ldr	r2, [pc, #184]	@ (8006164 <xTaskIncrementTick+0x15c>)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80060b0:	e02e      	b.n	8006110 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	3304      	adds	r3, #4
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7ff fc81 	bl	80059be <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d004      	beq.n	80060ce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	3318      	adds	r3, #24
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7ff fc78 	bl	80059be <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d2:	2201      	movs	r2, #1
 80060d4:	409a      	lsls	r2, r3
 80060d6:	4b24      	ldr	r3, [pc, #144]	@ (8006168 <xTaskIncrementTick+0x160>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4313      	orrs	r3, r2
 80060dc:	4a22      	ldr	r2, [pc, #136]	@ (8006168 <xTaskIncrementTick+0x160>)
 80060de:	6013      	str	r3, [r2, #0]
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060e4:	4613      	mov	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4413      	add	r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4a1f      	ldr	r2, [pc, #124]	@ (800616c <xTaskIncrementTick+0x164>)
 80060ee:	441a      	add	r2, r3
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	3304      	adds	r3, #4
 80060f4:	4619      	mov	r1, r3
 80060f6:	4610      	mov	r0, r2
 80060f8:	f7ff fc04 	bl	8005904 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006100:	4b1b      	ldr	r3, [pc, #108]	@ (8006170 <xTaskIncrementTick+0x168>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006106:	429a      	cmp	r2, r3
 8006108:	d3b9      	bcc.n	800607e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800610a:	2301      	movs	r3, #1
 800610c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800610e:	e7b6      	b.n	800607e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006110:	4b17      	ldr	r3, [pc, #92]	@ (8006170 <xTaskIncrementTick+0x168>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006116:	4915      	ldr	r1, [pc, #84]	@ (800616c <xTaskIncrementTick+0x164>)
 8006118:	4613      	mov	r3, r2
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	4413      	add	r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	440b      	add	r3, r1
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d901      	bls.n	800612c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006128:	2301      	movs	r3, #1
 800612a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800612c:	4b11      	ldr	r3, [pc, #68]	@ (8006174 <xTaskIncrementTick+0x16c>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d007      	beq.n	8006144 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006134:	2301      	movs	r3, #1
 8006136:	617b      	str	r3, [r7, #20]
 8006138:	e004      	b.n	8006144 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800613a:	4b0f      	ldr	r3, [pc, #60]	@ (8006178 <xTaskIncrementTick+0x170>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	3301      	adds	r3, #1
 8006140:	4a0d      	ldr	r2, [pc, #52]	@ (8006178 <xTaskIncrementTick+0x170>)
 8006142:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006144:	697b      	ldr	r3, [r7, #20]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3718      	adds	r7, #24
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	20000b34 	.word	0x20000b34
 8006154:	20000b10 	.word	0x20000b10
 8006158:	20000ac4 	.word	0x20000ac4
 800615c:	20000ac8 	.word	0x20000ac8
 8006160:	20000b24 	.word	0x20000b24
 8006164:	20000b2c 	.word	0x20000b2c
 8006168:	20000b14 	.word	0x20000b14
 800616c:	20000a10 	.word	0x20000a10
 8006170:	20000a0c 	.word	0x20000a0c
 8006174:	20000b20 	.word	0x20000b20
 8006178:	20000b1c 	.word	0x20000b1c

0800617c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800617c:	b480      	push	{r7}
 800617e:	b087      	sub	sp, #28
 8006180:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006182:	4b2a      	ldr	r3, [pc, #168]	@ (800622c <vTaskSwitchContext+0xb0>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d003      	beq.n	8006192 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800618a:	4b29      	ldr	r3, [pc, #164]	@ (8006230 <vTaskSwitchContext+0xb4>)
 800618c:	2201      	movs	r2, #1
 800618e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006190:	e045      	b.n	800621e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8006192:	4b27      	ldr	r3, [pc, #156]	@ (8006230 <vTaskSwitchContext+0xb4>)
 8006194:	2200      	movs	r2, #0
 8006196:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006198:	4b26      	ldr	r3, [pc, #152]	@ (8006234 <vTaskSwitchContext+0xb8>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	fab3 f383 	clz	r3, r3
 80061a4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80061a6:	7afb      	ldrb	r3, [r7, #11]
 80061a8:	f1c3 031f 	rsb	r3, r3, #31
 80061ac:	617b      	str	r3, [r7, #20]
 80061ae:	4922      	ldr	r1, [pc, #136]	@ (8006238 <vTaskSwitchContext+0xbc>)
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	4613      	mov	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4413      	add	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	440b      	add	r3, r1
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10b      	bne.n	80061da <vTaskSwitchContext+0x5e>
	__asm volatile
 80061c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c6:	f383 8811 	msr	BASEPRI, r3
 80061ca:	f3bf 8f6f 	isb	sy
 80061ce:	f3bf 8f4f 	dsb	sy
 80061d2:	607b      	str	r3, [r7, #4]
}
 80061d4:	bf00      	nop
 80061d6:	bf00      	nop
 80061d8:	e7fd      	b.n	80061d6 <vTaskSwitchContext+0x5a>
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	4613      	mov	r3, r2
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4413      	add	r3, r2
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	4a14      	ldr	r2, [pc, #80]	@ (8006238 <vTaskSwitchContext+0xbc>)
 80061e6:	4413      	add	r3, r2
 80061e8:	613b      	str	r3, [r7, #16]
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	605a      	str	r2, [r3, #4]
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	685a      	ldr	r2, [r3, #4]
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	3308      	adds	r3, #8
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d104      	bne.n	800620a <vTaskSwitchContext+0x8e>
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	685a      	ldr	r2, [r3, #4]
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	605a      	str	r2, [r3, #4]
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	4a0a      	ldr	r2, [pc, #40]	@ (800623c <vTaskSwitchContext+0xc0>)
 8006212:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006214:	4b09      	ldr	r3, [pc, #36]	@ (800623c <vTaskSwitchContext+0xc0>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	334c      	adds	r3, #76	@ 0x4c
 800621a:	4a09      	ldr	r2, [pc, #36]	@ (8006240 <vTaskSwitchContext+0xc4>)
 800621c:	6013      	str	r3, [r2, #0]
}
 800621e:	bf00      	nop
 8006220:	371c      	adds	r7, #28
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	20000b34 	.word	0x20000b34
 8006230:	20000b20 	.word	0x20000b20
 8006234:	20000b14 	.word	0x20000b14
 8006238:	20000a10 	.word	0x20000a10
 800623c:	20000a0c 	.word	0x20000a0c
 8006240:	2000001c 	.word	0x2000001c

08006244 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800624c:	f000 f852 	bl	80062f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006250:	4b06      	ldr	r3, [pc, #24]	@ (800626c <prvIdleTask+0x28>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d9f9      	bls.n	800624c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006258:	4b05      	ldr	r3, [pc, #20]	@ (8006270 <prvIdleTask+0x2c>)
 800625a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800625e:	601a      	str	r2, [r3, #0]
 8006260:	f3bf 8f4f 	dsb	sy
 8006264:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006268:	e7f0      	b.n	800624c <prvIdleTask+0x8>
 800626a:	bf00      	nop
 800626c:	20000a10 	.word	0x20000a10
 8006270:	e000ed04 	.word	0xe000ed04

08006274 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800627a:	2300      	movs	r3, #0
 800627c:	607b      	str	r3, [r7, #4]
 800627e:	e00c      	b.n	800629a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	4613      	mov	r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	4413      	add	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4a12      	ldr	r2, [pc, #72]	@ (80062d4 <prvInitialiseTaskLists+0x60>)
 800628c:	4413      	add	r3, r2
 800628e:	4618      	mov	r0, r3
 8006290:	f7ff fb0b 	bl	80058aa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	3301      	adds	r3, #1
 8006298:	607b      	str	r3, [r7, #4]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2b06      	cmp	r3, #6
 800629e:	d9ef      	bls.n	8006280 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80062a0:	480d      	ldr	r0, [pc, #52]	@ (80062d8 <prvInitialiseTaskLists+0x64>)
 80062a2:	f7ff fb02 	bl	80058aa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80062a6:	480d      	ldr	r0, [pc, #52]	@ (80062dc <prvInitialiseTaskLists+0x68>)
 80062a8:	f7ff faff 	bl	80058aa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80062ac:	480c      	ldr	r0, [pc, #48]	@ (80062e0 <prvInitialiseTaskLists+0x6c>)
 80062ae:	f7ff fafc 	bl	80058aa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80062b2:	480c      	ldr	r0, [pc, #48]	@ (80062e4 <prvInitialiseTaskLists+0x70>)
 80062b4:	f7ff faf9 	bl	80058aa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80062b8:	480b      	ldr	r0, [pc, #44]	@ (80062e8 <prvInitialiseTaskLists+0x74>)
 80062ba:	f7ff faf6 	bl	80058aa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80062be:	4b0b      	ldr	r3, [pc, #44]	@ (80062ec <prvInitialiseTaskLists+0x78>)
 80062c0:	4a05      	ldr	r2, [pc, #20]	@ (80062d8 <prvInitialiseTaskLists+0x64>)
 80062c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80062c4:	4b0a      	ldr	r3, [pc, #40]	@ (80062f0 <prvInitialiseTaskLists+0x7c>)
 80062c6:	4a05      	ldr	r2, [pc, #20]	@ (80062dc <prvInitialiseTaskLists+0x68>)
 80062c8:	601a      	str	r2, [r3, #0]
}
 80062ca:	bf00      	nop
 80062cc:	3708      	adds	r7, #8
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	20000a10 	.word	0x20000a10
 80062d8:	20000a9c 	.word	0x20000a9c
 80062dc:	20000ab0 	.word	0x20000ab0
 80062e0:	20000acc 	.word	0x20000acc
 80062e4:	20000ae0 	.word	0x20000ae0
 80062e8:	20000af8 	.word	0x20000af8
 80062ec:	20000ac4 	.word	0x20000ac4
 80062f0:	20000ac8 	.word	0x20000ac8

080062f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062fa:	e019      	b.n	8006330 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80062fc:	f000 fa14 	bl	8006728 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006300:	4b10      	ldr	r3, [pc, #64]	@ (8006344 <prvCheckTasksWaitingTermination+0x50>)
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	3304      	adds	r3, #4
 800630c:	4618      	mov	r0, r3
 800630e:	f7ff fb56 	bl	80059be <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006312:	4b0d      	ldr	r3, [pc, #52]	@ (8006348 <prvCheckTasksWaitingTermination+0x54>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	3b01      	subs	r3, #1
 8006318:	4a0b      	ldr	r2, [pc, #44]	@ (8006348 <prvCheckTasksWaitingTermination+0x54>)
 800631a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800631c:	4b0b      	ldr	r3, [pc, #44]	@ (800634c <prvCheckTasksWaitingTermination+0x58>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	3b01      	subs	r3, #1
 8006322:	4a0a      	ldr	r2, [pc, #40]	@ (800634c <prvCheckTasksWaitingTermination+0x58>)
 8006324:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006326:	f000 fa31 	bl	800678c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f810 	bl	8006350 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006330:	4b06      	ldr	r3, [pc, #24]	@ (800634c <prvCheckTasksWaitingTermination+0x58>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1e1      	bne.n	80062fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006338:	bf00      	nop
 800633a:	bf00      	nop
 800633c:	3708      	adds	r7, #8
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	20000ae0 	.word	0x20000ae0
 8006348:	20000b0c 	.word	0x20000b0c
 800634c:	20000af4 	.word	0x20000af4

08006350 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	334c      	adds	r3, #76	@ 0x4c
 800635c:	4618      	mov	r0, r3
 800635e:	f002 f913 	bl	8008588 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006368:	2b00      	cmp	r3, #0
 800636a:	d108      	bne.n	800637e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006370:	4618      	mov	r0, r3
 8006372:	f000 fb87 	bl	8006a84 <vPortFree>
				vPortFree( pxTCB );
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 fb84 	bl	8006a84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800637c:	e019      	b.n	80063b2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006384:	2b01      	cmp	r3, #1
 8006386:	d103      	bne.n	8006390 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 fb7b 	bl	8006a84 <vPortFree>
	}
 800638e:	e010      	b.n	80063b2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006396:	2b02      	cmp	r3, #2
 8006398:	d00b      	beq.n	80063b2 <prvDeleteTCB+0x62>
	__asm volatile
 800639a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800639e:	f383 8811 	msr	BASEPRI, r3
 80063a2:	f3bf 8f6f 	isb	sy
 80063a6:	f3bf 8f4f 	dsb	sy
 80063aa:	60fb      	str	r3, [r7, #12]
}
 80063ac:	bf00      	nop
 80063ae:	bf00      	nop
 80063b0:	e7fd      	b.n	80063ae <prvDeleteTCB+0x5e>
	}
 80063b2:	bf00      	nop
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
	...

080063bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063c2:	4b0c      	ldr	r3, [pc, #48]	@ (80063f4 <prvResetNextTaskUnblockTime+0x38>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d104      	bne.n	80063d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80063cc:	4b0a      	ldr	r3, [pc, #40]	@ (80063f8 <prvResetNextTaskUnblockTime+0x3c>)
 80063ce:	f04f 32ff 	mov.w	r2, #4294967295
 80063d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80063d4:	e008      	b.n	80063e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063d6:	4b07      	ldr	r3, [pc, #28]	@ (80063f4 <prvResetNextTaskUnblockTime+0x38>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	4a04      	ldr	r2, [pc, #16]	@ (80063f8 <prvResetNextTaskUnblockTime+0x3c>)
 80063e6:	6013      	str	r3, [r2, #0]
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr
 80063f4:	20000ac4 	.word	0x20000ac4
 80063f8:	20000b2c 	.word	0x20000b2c

080063fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006406:	4b29      	ldr	r3, [pc, #164]	@ (80064ac <prvAddCurrentTaskToDelayedList+0xb0>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800640c:	4b28      	ldr	r3, [pc, #160]	@ (80064b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3304      	adds	r3, #4
 8006412:	4618      	mov	r0, r3
 8006414:	f7ff fad3 	bl	80059be <uxListRemove>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d10b      	bne.n	8006436 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800641e:	4b24      	ldr	r3, [pc, #144]	@ (80064b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006424:	2201      	movs	r2, #1
 8006426:	fa02 f303 	lsl.w	r3, r2, r3
 800642a:	43da      	mvns	r2, r3
 800642c:	4b21      	ldr	r3, [pc, #132]	@ (80064b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4013      	ands	r3, r2
 8006432:	4a20      	ldr	r2, [pc, #128]	@ (80064b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006434:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643c:	d10a      	bne.n	8006454 <prvAddCurrentTaskToDelayedList+0x58>
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d007      	beq.n	8006454 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006444:	4b1a      	ldr	r3, [pc, #104]	@ (80064b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	3304      	adds	r3, #4
 800644a:	4619      	mov	r1, r3
 800644c:	481a      	ldr	r0, [pc, #104]	@ (80064b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800644e:	f7ff fa59 	bl	8005904 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006452:	e026      	b.n	80064a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4413      	add	r3, r2
 800645a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800645c:	4b14      	ldr	r3, [pc, #80]	@ (80064b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006464:	68ba      	ldr	r2, [r7, #8]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	429a      	cmp	r2, r3
 800646a:	d209      	bcs.n	8006480 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800646c:	4b13      	ldr	r3, [pc, #76]	@ (80064bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	4b0f      	ldr	r3, [pc, #60]	@ (80064b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	3304      	adds	r3, #4
 8006476:	4619      	mov	r1, r3
 8006478:	4610      	mov	r0, r2
 800647a:	f7ff fa67 	bl	800594c <vListInsert>
}
 800647e:	e010      	b.n	80064a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006480:	4b0f      	ldr	r3, [pc, #60]	@ (80064c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	4b0a      	ldr	r3, [pc, #40]	@ (80064b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	3304      	adds	r3, #4
 800648a:	4619      	mov	r1, r3
 800648c:	4610      	mov	r0, r2
 800648e:	f7ff fa5d 	bl	800594c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006492:	4b0c      	ldr	r3, [pc, #48]	@ (80064c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	429a      	cmp	r2, r3
 800649a:	d202      	bcs.n	80064a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800649c:	4a09      	ldr	r2, [pc, #36]	@ (80064c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	6013      	str	r3, [r2, #0]
}
 80064a2:	bf00      	nop
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20000b10 	.word	0x20000b10
 80064b0:	20000a0c 	.word	0x20000a0c
 80064b4:	20000b14 	.word	0x20000b14
 80064b8:	20000af8 	.word	0x20000af8
 80064bc:	20000ac8 	.word	0x20000ac8
 80064c0:	20000ac4 	.word	0x20000ac4
 80064c4:	20000b2c 	.word	0x20000b2c

080064c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	3b04      	subs	r3, #4
 80064d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80064e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	3b04      	subs	r3, #4
 80064e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	f023 0201 	bic.w	r2, r3, #1
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	3b04      	subs	r3, #4
 80064f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80064f8:	4a0c      	ldr	r2, [pc, #48]	@ (800652c <pxPortInitialiseStack+0x64>)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	3b14      	subs	r3, #20
 8006502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	3b04      	subs	r3, #4
 800650e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f06f 0202 	mvn.w	r2, #2
 8006516:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	3b20      	subs	r3, #32
 800651c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800651e:	68fb      	ldr	r3, [r7, #12]
}
 8006520:	4618      	mov	r0, r3
 8006522:	3714      	adds	r7, #20
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	08006531 	.word	0x08006531

08006530 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006536:	2300      	movs	r3, #0
 8006538:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800653a:	4b13      	ldr	r3, [pc, #76]	@ (8006588 <prvTaskExitError+0x58>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006542:	d00b      	beq.n	800655c <prvTaskExitError+0x2c>
	__asm volatile
 8006544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006548:	f383 8811 	msr	BASEPRI, r3
 800654c:	f3bf 8f6f 	isb	sy
 8006550:	f3bf 8f4f 	dsb	sy
 8006554:	60fb      	str	r3, [r7, #12]
}
 8006556:	bf00      	nop
 8006558:	bf00      	nop
 800655a:	e7fd      	b.n	8006558 <prvTaskExitError+0x28>
	__asm volatile
 800655c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006560:	f383 8811 	msr	BASEPRI, r3
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	60bb      	str	r3, [r7, #8]
}
 800656e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006570:	bf00      	nop
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d0fc      	beq.n	8006572 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006578:	bf00      	nop
 800657a:	bf00      	nop
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	2000000c 	.word	0x2000000c
 800658c:	00000000 	.word	0x00000000

08006590 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006590:	4b07      	ldr	r3, [pc, #28]	@ (80065b0 <pxCurrentTCBConst2>)
 8006592:	6819      	ldr	r1, [r3, #0]
 8006594:	6808      	ldr	r0, [r1, #0]
 8006596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800659a:	f380 8809 	msr	PSP, r0
 800659e:	f3bf 8f6f 	isb	sy
 80065a2:	f04f 0000 	mov.w	r0, #0
 80065a6:	f380 8811 	msr	BASEPRI, r0
 80065aa:	4770      	bx	lr
 80065ac:	f3af 8000 	nop.w

080065b0 <pxCurrentTCBConst2>:
 80065b0:	20000a0c 	.word	0x20000a0c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80065b4:	bf00      	nop
 80065b6:	bf00      	nop

080065b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80065b8:	4808      	ldr	r0, [pc, #32]	@ (80065dc <prvPortStartFirstTask+0x24>)
 80065ba:	6800      	ldr	r0, [r0, #0]
 80065bc:	6800      	ldr	r0, [r0, #0]
 80065be:	f380 8808 	msr	MSP, r0
 80065c2:	f04f 0000 	mov.w	r0, #0
 80065c6:	f380 8814 	msr	CONTROL, r0
 80065ca:	b662      	cpsie	i
 80065cc:	b661      	cpsie	f
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	f3bf 8f6f 	isb	sy
 80065d6:	df00      	svc	0
 80065d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80065da:	bf00      	nop
 80065dc:	e000ed08 	.word	0xe000ed08

080065e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80065e6:	4b47      	ldr	r3, [pc, #284]	@ (8006704 <xPortStartScheduler+0x124>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a47      	ldr	r2, [pc, #284]	@ (8006708 <xPortStartScheduler+0x128>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d10b      	bne.n	8006608 <xPortStartScheduler+0x28>
	__asm volatile
 80065f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f4:	f383 8811 	msr	BASEPRI, r3
 80065f8:	f3bf 8f6f 	isb	sy
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	613b      	str	r3, [r7, #16]
}
 8006602:	bf00      	nop
 8006604:	bf00      	nop
 8006606:	e7fd      	b.n	8006604 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006608:	4b3e      	ldr	r3, [pc, #248]	@ (8006704 <xPortStartScheduler+0x124>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a3f      	ldr	r2, [pc, #252]	@ (800670c <xPortStartScheduler+0x12c>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d10b      	bne.n	800662a <xPortStartScheduler+0x4a>
	__asm volatile
 8006612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006616:	f383 8811 	msr	BASEPRI, r3
 800661a:	f3bf 8f6f 	isb	sy
 800661e:	f3bf 8f4f 	dsb	sy
 8006622:	60fb      	str	r3, [r7, #12]
}
 8006624:	bf00      	nop
 8006626:	bf00      	nop
 8006628:	e7fd      	b.n	8006626 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800662a:	4b39      	ldr	r3, [pc, #228]	@ (8006710 <xPortStartScheduler+0x130>)
 800662c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	b2db      	uxtb	r3, r3
 8006634:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	22ff      	movs	r2, #255	@ 0xff
 800663a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	b2db      	uxtb	r3, r3
 8006642:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006644:	78fb      	ldrb	r3, [r7, #3]
 8006646:	b2db      	uxtb	r3, r3
 8006648:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800664c:	b2da      	uxtb	r2, r3
 800664e:	4b31      	ldr	r3, [pc, #196]	@ (8006714 <xPortStartScheduler+0x134>)
 8006650:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006652:	4b31      	ldr	r3, [pc, #196]	@ (8006718 <xPortStartScheduler+0x138>)
 8006654:	2207      	movs	r2, #7
 8006656:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006658:	e009      	b.n	800666e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800665a:	4b2f      	ldr	r3, [pc, #188]	@ (8006718 <xPortStartScheduler+0x138>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	3b01      	subs	r3, #1
 8006660:	4a2d      	ldr	r2, [pc, #180]	@ (8006718 <xPortStartScheduler+0x138>)
 8006662:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006664:	78fb      	ldrb	r3, [r7, #3]
 8006666:	b2db      	uxtb	r3, r3
 8006668:	005b      	lsls	r3, r3, #1
 800666a:	b2db      	uxtb	r3, r3
 800666c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800666e:	78fb      	ldrb	r3, [r7, #3]
 8006670:	b2db      	uxtb	r3, r3
 8006672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006676:	2b80      	cmp	r3, #128	@ 0x80
 8006678:	d0ef      	beq.n	800665a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800667a:	4b27      	ldr	r3, [pc, #156]	@ (8006718 <xPortStartScheduler+0x138>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f1c3 0307 	rsb	r3, r3, #7
 8006682:	2b04      	cmp	r3, #4
 8006684:	d00b      	beq.n	800669e <xPortStartScheduler+0xbe>
	__asm volatile
 8006686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800668a:	f383 8811 	msr	BASEPRI, r3
 800668e:	f3bf 8f6f 	isb	sy
 8006692:	f3bf 8f4f 	dsb	sy
 8006696:	60bb      	str	r3, [r7, #8]
}
 8006698:	bf00      	nop
 800669a:	bf00      	nop
 800669c:	e7fd      	b.n	800669a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800669e:	4b1e      	ldr	r3, [pc, #120]	@ (8006718 <xPortStartScheduler+0x138>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	021b      	lsls	r3, r3, #8
 80066a4:	4a1c      	ldr	r2, [pc, #112]	@ (8006718 <xPortStartScheduler+0x138>)
 80066a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80066a8:	4b1b      	ldr	r3, [pc, #108]	@ (8006718 <xPortStartScheduler+0x138>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80066b0:	4a19      	ldr	r2, [pc, #100]	@ (8006718 <xPortStartScheduler+0x138>)
 80066b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	b2da      	uxtb	r2, r3
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80066bc:	4b17      	ldr	r3, [pc, #92]	@ (800671c <xPortStartScheduler+0x13c>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a16      	ldr	r2, [pc, #88]	@ (800671c <xPortStartScheduler+0x13c>)
 80066c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80066c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80066c8:	4b14      	ldr	r3, [pc, #80]	@ (800671c <xPortStartScheduler+0x13c>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a13      	ldr	r2, [pc, #76]	@ (800671c <xPortStartScheduler+0x13c>)
 80066ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80066d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80066d4:	f000 f8da 	bl	800688c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80066d8:	4b11      	ldr	r3, [pc, #68]	@ (8006720 <xPortStartScheduler+0x140>)
 80066da:	2200      	movs	r2, #0
 80066dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80066de:	f000 f8f9 	bl	80068d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80066e2:	4b10      	ldr	r3, [pc, #64]	@ (8006724 <xPortStartScheduler+0x144>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a0f      	ldr	r2, [pc, #60]	@ (8006724 <xPortStartScheduler+0x144>)
 80066e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80066ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80066ee:	f7ff ff63 	bl	80065b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80066f2:	f7ff fd43 	bl	800617c <vTaskSwitchContext>
	prvTaskExitError();
 80066f6:	f7ff ff1b 	bl	8006530 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3718      	adds	r7, #24
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	e000ed00 	.word	0xe000ed00
 8006708:	410fc271 	.word	0x410fc271
 800670c:	410fc270 	.word	0x410fc270
 8006710:	e000e400 	.word	0xe000e400
 8006714:	20000b38 	.word	0x20000b38
 8006718:	20000b3c 	.word	0x20000b3c
 800671c:	e000ed20 	.word	0xe000ed20
 8006720:	2000000c 	.word	0x2000000c
 8006724:	e000ef34 	.word	0xe000ef34

08006728 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
	__asm volatile
 800672e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006732:	f383 8811 	msr	BASEPRI, r3
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	607b      	str	r3, [r7, #4]
}
 8006740:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006742:	4b10      	ldr	r3, [pc, #64]	@ (8006784 <vPortEnterCritical+0x5c>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	3301      	adds	r3, #1
 8006748:	4a0e      	ldr	r2, [pc, #56]	@ (8006784 <vPortEnterCritical+0x5c>)
 800674a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800674c:	4b0d      	ldr	r3, [pc, #52]	@ (8006784 <vPortEnterCritical+0x5c>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2b01      	cmp	r3, #1
 8006752:	d110      	bne.n	8006776 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006754:	4b0c      	ldr	r3, [pc, #48]	@ (8006788 <vPortEnterCritical+0x60>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00b      	beq.n	8006776 <vPortEnterCritical+0x4e>
	__asm volatile
 800675e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006762:	f383 8811 	msr	BASEPRI, r3
 8006766:	f3bf 8f6f 	isb	sy
 800676a:	f3bf 8f4f 	dsb	sy
 800676e:	603b      	str	r3, [r7, #0]
}
 8006770:	bf00      	nop
 8006772:	bf00      	nop
 8006774:	e7fd      	b.n	8006772 <vPortEnterCritical+0x4a>
	}
}
 8006776:	bf00      	nop
 8006778:	370c      	adds	r7, #12
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	2000000c 	.word	0x2000000c
 8006788:	e000ed04 	.word	0xe000ed04

0800678c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006792:	4b12      	ldr	r3, [pc, #72]	@ (80067dc <vPortExitCritical+0x50>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10b      	bne.n	80067b2 <vPortExitCritical+0x26>
	__asm volatile
 800679a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800679e:	f383 8811 	msr	BASEPRI, r3
 80067a2:	f3bf 8f6f 	isb	sy
 80067a6:	f3bf 8f4f 	dsb	sy
 80067aa:	607b      	str	r3, [r7, #4]
}
 80067ac:	bf00      	nop
 80067ae:	bf00      	nop
 80067b0:	e7fd      	b.n	80067ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80067b2:	4b0a      	ldr	r3, [pc, #40]	@ (80067dc <vPortExitCritical+0x50>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	3b01      	subs	r3, #1
 80067b8:	4a08      	ldr	r2, [pc, #32]	@ (80067dc <vPortExitCritical+0x50>)
 80067ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80067bc:	4b07      	ldr	r3, [pc, #28]	@ (80067dc <vPortExitCritical+0x50>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d105      	bne.n	80067d0 <vPortExitCritical+0x44>
 80067c4:	2300      	movs	r3, #0
 80067c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80067ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr
 80067dc:	2000000c 	.word	0x2000000c

080067e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80067e0:	f3ef 8009 	mrs	r0, PSP
 80067e4:	f3bf 8f6f 	isb	sy
 80067e8:	4b15      	ldr	r3, [pc, #84]	@ (8006840 <pxCurrentTCBConst>)
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	f01e 0f10 	tst.w	lr, #16
 80067f0:	bf08      	it	eq
 80067f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80067f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067fa:	6010      	str	r0, [r2, #0]
 80067fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006800:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006804:	f380 8811 	msr	BASEPRI, r0
 8006808:	f3bf 8f4f 	dsb	sy
 800680c:	f3bf 8f6f 	isb	sy
 8006810:	f7ff fcb4 	bl	800617c <vTaskSwitchContext>
 8006814:	f04f 0000 	mov.w	r0, #0
 8006818:	f380 8811 	msr	BASEPRI, r0
 800681c:	bc09      	pop	{r0, r3}
 800681e:	6819      	ldr	r1, [r3, #0]
 8006820:	6808      	ldr	r0, [r1, #0]
 8006822:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006826:	f01e 0f10 	tst.w	lr, #16
 800682a:	bf08      	it	eq
 800682c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006830:	f380 8809 	msr	PSP, r0
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	f3af 8000 	nop.w

08006840 <pxCurrentTCBConst>:
 8006840:	20000a0c 	.word	0x20000a0c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006844:	bf00      	nop
 8006846:	bf00      	nop

08006848 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
	__asm volatile
 800684e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006852:	f383 8811 	msr	BASEPRI, r3
 8006856:	f3bf 8f6f 	isb	sy
 800685a:	f3bf 8f4f 	dsb	sy
 800685e:	607b      	str	r3, [r7, #4]
}
 8006860:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006862:	f7ff fbd1 	bl	8006008 <xTaskIncrementTick>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d003      	beq.n	8006874 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800686c:	4b06      	ldr	r3, [pc, #24]	@ (8006888 <SysTick_Handler+0x40>)
 800686e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006872:	601a      	str	r2, [r3, #0]
 8006874:	2300      	movs	r3, #0
 8006876:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	f383 8811 	msr	BASEPRI, r3
}
 800687e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006880:	bf00      	nop
 8006882:	3708      	adds	r7, #8
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	e000ed04 	.word	0xe000ed04

0800688c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800688c:	b480      	push	{r7}
 800688e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006890:	4b0b      	ldr	r3, [pc, #44]	@ (80068c0 <vPortSetupTimerInterrupt+0x34>)
 8006892:	2200      	movs	r2, #0
 8006894:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006896:	4b0b      	ldr	r3, [pc, #44]	@ (80068c4 <vPortSetupTimerInterrupt+0x38>)
 8006898:	2200      	movs	r2, #0
 800689a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800689c:	4b0a      	ldr	r3, [pc, #40]	@ (80068c8 <vPortSetupTimerInterrupt+0x3c>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a0a      	ldr	r2, [pc, #40]	@ (80068cc <vPortSetupTimerInterrupt+0x40>)
 80068a2:	fba2 2303 	umull	r2, r3, r2, r3
 80068a6:	099b      	lsrs	r3, r3, #6
 80068a8:	4a09      	ldr	r2, [pc, #36]	@ (80068d0 <vPortSetupTimerInterrupt+0x44>)
 80068aa:	3b01      	subs	r3, #1
 80068ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80068ae:	4b04      	ldr	r3, [pc, #16]	@ (80068c0 <vPortSetupTimerInterrupt+0x34>)
 80068b0:	2207      	movs	r2, #7
 80068b2:	601a      	str	r2, [r3, #0]
}
 80068b4:	bf00      	nop
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	e000e010 	.word	0xe000e010
 80068c4:	e000e018 	.word	0xe000e018
 80068c8:	20000000 	.word	0x20000000
 80068cc:	10624dd3 	.word	0x10624dd3
 80068d0:	e000e014 	.word	0xe000e014

080068d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80068d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80068e4 <vPortEnableVFP+0x10>
 80068d8:	6801      	ldr	r1, [r0, #0]
 80068da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80068de:	6001      	str	r1, [r0, #0]
 80068e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80068e2:	bf00      	nop
 80068e4:	e000ed88 	.word	0xe000ed88

080068e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b08a      	sub	sp, #40	@ 0x28
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80068f0:	2300      	movs	r3, #0
 80068f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80068f4:	f7ff fadc 	bl	8005eb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80068f8:	4b5c      	ldr	r3, [pc, #368]	@ (8006a6c <pvPortMalloc+0x184>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d101      	bne.n	8006904 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006900:	f000 f924 	bl	8006b4c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006904:	4b5a      	ldr	r3, [pc, #360]	@ (8006a70 <pvPortMalloc+0x188>)
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4013      	ands	r3, r2
 800690c:	2b00      	cmp	r3, #0
 800690e:	f040 8095 	bne.w	8006a3c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d01e      	beq.n	8006956 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006918:	2208      	movs	r2, #8
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4413      	add	r3, r2
 800691e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f003 0307 	and.w	r3, r3, #7
 8006926:	2b00      	cmp	r3, #0
 8006928:	d015      	beq.n	8006956 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f023 0307 	bic.w	r3, r3, #7
 8006930:	3308      	adds	r3, #8
 8006932:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f003 0307 	and.w	r3, r3, #7
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00b      	beq.n	8006956 <pvPortMalloc+0x6e>
	__asm volatile
 800693e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	617b      	str	r3, [r7, #20]
}
 8006950:	bf00      	nop
 8006952:	bf00      	nop
 8006954:	e7fd      	b.n	8006952 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d06f      	beq.n	8006a3c <pvPortMalloc+0x154>
 800695c:	4b45      	ldr	r3, [pc, #276]	@ (8006a74 <pvPortMalloc+0x18c>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	429a      	cmp	r2, r3
 8006964:	d86a      	bhi.n	8006a3c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006966:	4b44      	ldr	r3, [pc, #272]	@ (8006a78 <pvPortMalloc+0x190>)
 8006968:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800696a:	4b43      	ldr	r3, [pc, #268]	@ (8006a78 <pvPortMalloc+0x190>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006970:	e004      	b.n	800697c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006974:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800697c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	429a      	cmp	r2, r3
 8006984:	d903      	bls.n	800698e <pvPortMalloc+0xa6>
 8006986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1f1      	bne.n	8006972 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800698e:	4b37      	ldr	r3, [pc, #220]	@ (8006a6c <pvPortMalloc+0x184>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006994:	429a      	cmp	r2, r3
 8006996:	d051      	beq.n	8006a3c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006998:	6a3b      	ldr	r3, [r7, #32]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2208      	movs	r2, #8
 800699e:	4413      	add	r3, r2
 80069a0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80069a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	6a3b      	ldr	r3, [r7, #32]
 80069a8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80069aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ac:	685a      	ldr	r2, [r3, #4]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	1ad2      	subs	r2, r2, r3
 80069b2:	2308      	movs	r3, #8
 80069b4:	005b      	lsls	r3, r3, #1
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d920      	bls.n	80069fc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80069ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4413      	add	r3, r2
 80069c0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	f003 0307 	and.w	r3, r3, #7
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00b      	beq.n	80069e4 <pvPortMalloc+0xfc>
	__asm volatile
 80069cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d0:	f383 8811 	msr	BASEPRI, r3
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	f3bf 8f4f 	dsb	sy
 80069dc:	613b      	str	r3, [r7, #16]
}
 80069de:	bf00      	nop
 80069e0:	bf00      	nop
 80069e2:	e7fd      	b.n	80069e0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80069e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e6:	685a      	ldr	r2, [r3, #4]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	1ad2      	subs	r2, r2, r3
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80069f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80069f6:	69b8      	ldr	r0, [r7, #24]
 80069f8:	f000 f90a 	bl	8006c10 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80069fc:	4b1d      	ldr	r3, [pc, #116]	@ (8006a74 <pvPortMalloc+0x18c>)
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	4a1b      	ldr	r2, [pc, #108]	@ (8006a74 <pvPortMalloc+0x18c>)
 8006a08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8006a74 <pvPortMalloc+0x18c>)
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8006a7c <pvPortMalloc+0x194>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d203      	bcs.n	8006a1e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a16:	4b17      	ldr	r3, [pc, #92]	@ (8006a74 <pvPortMalloc+0x18c>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a18      	ldr	r2, [pc, #96]	@ (8006a7c <pvPortMalloc+0x194>)
 8006a1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a20:	685a      	ldr	r2, [r3, #4]
 8006a22:	4b13      	ldr	r3, [pc, #76]	@ (8006a70 <pvPortMalloc+0x188>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	431a      	orrs	r2, r3
 8006a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2e:	2200      	movs	r2, #0
 8006a30:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006a32:	4b13      	ldr	r3, [pc, #76]	@ (8006a80 <pvPortMalloc+0x198>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	3301      	adds	r3, #1
 8006a38:	4a11      	ldr	r2, [pc, #68]	@ (8006a80 <pvPortMalloc+0x198>)
 8006a3a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006a3c:	f7ff fa46 	bl	8005ecc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	f003 0307 	and.w	r3, r3, #7
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00b      	beq.n	8006a62 <pvPortMalloc+0x17a>
	__asm volatile
 8006a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	60fb      	str	r3, [r7, #12]
}
 8006a5c:	bf00      	nop
 8006a5e:	bf00      	nop
 8006a60:	e7fd      	b.n	8006a5e <pvPortMalloc+0x176>
	return pvReturn;
 8006a62:	69fb      	ldr	r3, [r7, #28]
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3728      	adds	r7, #40	@ 0x28
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	20004748 	.word	0x20004748
 8006a70:	2000475c 	.word	0x2000475c
 8006a74:	2000474c 	.word	0x2000474c
 8006a78:	20004740 	.word	0x20004740
 8006a7c:	20004750 	.word	0x20004750
 8006a80:	20004754 	.word	0x20004754

08006a84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d04f      	beq.n	8006b36 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006a96:	2308      	movs	r3, #8
 8006a98:	425b      	negs	r3, r3
 8006a9a:	697a      	ldr	r2, [r7, #20]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	685a      	ldr	r2, [r3, #4]
 8006aa8:	4b25      	ldr	r3, [pc, #148]	@ (8006b40 <vPortFree+0xbc>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4013      	ands	r3, r2
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d10b      	bne.n	8006aca <vPortFree+0x46>
	__asm volatile
 8006ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab6:	f383 8811 	msr	BASEPRI, r3
 8006aba:	f3bf 8f6f 	isb	sy
 8006abe:	f3bf 8f4f 	dsb	sy
 8006ac2:	60fb      	str	r3, [r7, #12]
}
 8006ac4:	bf00      	nop
 8006ac6:	bf00      	nop
 8006ac8:	e7fd      	b.n	8006ac6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00b      	beq.n	8006aea <vPortFree+0x66>
	__asm volatile
 8006ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad6:	f383 8811 	msr	BASEPRI, r3
 8006ada:	f3bf 8f6f 	isb	sy
 8006ade:	f3bf 8f4f 	dsb	sy
 8006ae2:	60bb      	str	r3, [r7, #8]
}
 8006ae4:	bf00      	nop
 8006ae6:	bf00      	nop
 8006ae8:	e7fd      	b.n	8006ae6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	685a      	ldr	r2, [r3, #4]
 8006aee:	4b14      	ldr	r3, [pc, #80]	@ (8006b40 <vPortFree+0xbc>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4013      	ands	r3, r2
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d01e      	beq.n	8006b36 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d11a      	bne.n	8006b36 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	685a      	ldr	r2, [r3, #4]
 8006b04:	4b0e      	ldr	r3, [pc, #56]	@ (8006b40 <vPortFree+0xbc>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	43db      	mvns	r3, r3
 8006b0a:	401a      	ands	r2, r3
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006b10:	f7ff f9ce 	bl	8005eb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	685a      	ldr	r2, [r3, #4]
 8006b18:	4b0a      	ldr	r3, [pc, #40]	@ (8006b44 <vPortFree+0xc0>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	4a09      	ldr	r2, [pc, #36]	@ (8006b44 <vPortFree+0xc0>)
 8006b20:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b22:	6938      	ldr	r0, [r7, #16]
 8006b24:	f000 f874 	bl	8006c10 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006b28:	4b07      	ldr	r3, [pc, #28]	@ (8006b48 <vPortFree+0xc4>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	4a06      	ldr	r2, [pc, #24]	@ (8006b48 <vPortFree+0xc4>)
 8006b30:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006b32:	f7ff f9cb 	bl	8005ecc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006b36:	bf00      	nop
 8006b38:	3718      	adds	r7, #24
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	2000475c 	.word	0x2000475c
 8006b44:	2000474c 	.word	0x2000474c
 8006b48:	20004758 	.word	0x20004758

08006b4c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006b52:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006b56:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006b58:	4b27      	ldr	r3, [pc, #156]	@ (8006bf8 <prvHeapInit+0xac>)
 8006b5a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f003 0307 	and.w	r3, r3, #7
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00c      	beq.n	8006b80 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	3307      	adds	r3, #7
 8006b6a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f023 0307 	bic.w	r3, r3, #7
 8006b72:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	4a1f      	ldr	r2, [pc, #124]	@ (8006bf8 <prvHeapInit+0xac>)
 8006b7c:	4413      	add	r3, r2
 8006b7e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006b84:	4a1d      	ldr	r2, [pc, #116]	@ (8006bfc <prvHeapInit+0xb0>)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006b8a:	4b1c      	ldr	r3, [pc, #112]	@ (8006bfc <prvHeapInit+0xb0>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	4413      	add	r3, r2
 8006b96:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006b98:	2208      	movs	r2, #8
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	1a9b      	subs	r3, r3, r2
 8006b9e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f023 0307 	bic.w	r3, r3, #7
 8006ba6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	4a15      	ldr	r2, [pc, #84]	@ (8006c00 <prvHeapInit+0xb4>)
 8006bac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006bae:	4b14      	ldr	r3, [pc, #80]	@ (8006c00 <prvHeapInit+0xb4>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006bb6:	4b12      	ldr	r3, [pc, #72]	@ (8006c00 <prvHeapInit+0xb4>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	1ad2      	subs	r2, r2, r3
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8006c00 <prvHeapInit+0xb4>)
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	4a0a      	ldr	r2, [pc, #40]	@ (8006c04 <prvHeapInit+0xb8>)
 8006bda:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	4a09      	ldr	r2, [pc, #36]	@ (8006c08 <prvHeapInit+0xbc>)
 8006be2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006be4:	4b09      	ldr	r3, [pc, #36]	@ (8006c0c <prvHeapInit+0xc0>)
 8006be6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006bea:	601a      	str	r2, [r3, #0]
}
 8006bec:	bf00      	nop
 8006bee:	3714      	adds	r7, #20
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr
 8006bf8:	20000b40 	.word	0x20000b40
 8006bfc:	20004740 	.word	0x20004740
 8006c00:	20004748 	.word	0x20004748
 8006c04:	20004750 	.word	0x20004750
 8006c08:	2000474c 	.word	0x2000474c
 8006c0c:	2000475c 	.word	0x2000475c

08006c10 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c18:	4b28      	ldr	r3, [pc, #160]	@ (8006cbc <prvInsertBlockIntoFreeList+0xac>)
 8006c1a:	60fb      	str	r3, [r7, #12]
 8006c1c:	e002      	b.n	8006c24 <prvInsertBlockIntoFreeList+0x14>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	60fb      	str	r3, [r7, #12]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d8f7      	bhi.n	8006c1e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	68ba      	ldr	r2, [r7, #8]
 8006c38:	4413      	add	r3, r2
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d108      	bne.n	8006c52 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	685a      	ldr	r2, [r3, #4]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	441a      	add	r2, r3
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	441a      	add	r2, r3
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d118      	bne.n	8006c98 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	4b15      	ldr	r3, [pc, #84]	@ (8006cc0 <prvInsertBlockIntoFreeList+0xb0>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d00d      	beq.n	8006c8e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685a      	ldr	r2, [r3, #4]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	441a      	add	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	601a      	str	r2, [r3, #0]
 8006c8c:	e008      	b.n	8006ca0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8006cc0 <prvInsertBlockIntoFreeList+0xb0>)
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	601a      	str	r2, [r3, #0]
 8006c96:	e003      	b.n	8006ca0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d002      	beq.n	8006cae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cae:	bf00      	nop
 8006cb0:	3714      	adds	r7, #20
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	20004740 	.word	0x20004740
 8006cc0:	20004748 	.word	0x20004748

08006cc4 <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	460b      	mov	r3, r1
 8006cce:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	78fa      	ldrb	r2, [r7, #3]
 8006cd6:	4611      	mov	r1, r2
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f000 fac9 	bl	8007270 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f000 fae4 	bl	80072b0 <SX1278_hw_SPIReadByte>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2101      	movs	r1, #1
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f000 fa81 	bl	80071fa <SX1278_hw_SetNSS>
	return tmp;
 8006cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b082      	sub	sp, #8
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	70fb      	strb	r3, [r7, #3]
 8006d0e:	4613      	mov	r3, r2
 8006d10:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2100      	movs	r1, #0
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f000 fa6e 	bl	80071fa <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	78fb      	ldrb	r3, [r7, #3]
 8006d24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	4610      	mov	r0, r2
 8006d2e:	f000 fa9f 	bl	8007270 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	78ba      	ldrb	r2, [r7, #2]
 8006d38:	4611      	mov	r1, r2
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 fa98 	bl	8007270 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2101      	movs	r1, #1
 8006d46:	4618      	mov	r0, r3
 8006d48:	f000 fa57 	bl	80071fa <SX1278_hw_SetNSS>
}
 8006d4c:	bf00      	nop
 8006d4e:	3708      	adds	r7, #8
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <SX1278_SPIBurstWrite>:
		SX1278_hw_SetNSS(module->hw, 1);
	}
}

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b086      	sub	sp, #24
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	607a      	str	r2, [r7, #4]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	460b      	mov	r3, r1
 8006d62:	72fb      	strb	r3, [r7, #11]
 8006d64:	4613      	mov	r3, r2
 8006d66:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8006d68:	7abb      	ldrb	r3, [r7, #10]
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d929      	bls.n	8006dc2 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2100      	movs	r1, #0
 8006d74:	4618      	mov	r0, r3
 8006d76:	f000 fa40 	bl	80071fa <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	7afb      	ldrb	r3, [r7, #11]
 8006d80:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	4619      	mov	r1, r3
 8006d88:	4610      	mov	r0, r2
 8006d8a:	f000 fa71 	bl	8007270 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8006d8e:	2300      	movs	r3, #0
 8006d90:	75fb      	strb	r3, [r7, #23]
 8006d92:	e00b      	b.n	8006dac <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6818      	ldr	r0, [r3, #0]
 8006d98:	7dfb      	ldrb	r3, [r7, #23]
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	4619      	mov	r1, r3
 8006da2:	f000 fa65 	bl	8007270 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8006da6:	7dfb      	ldrb	r3, [r7, #23]
 8006da8:	3301      	adds	r3, #1
 8006daa:	75fb      	strb	r3, [r7, #23]
 8006dac:	7dfa      	ldrb	r2, [r7, #23]
 8006dae:	7abb      	ldrb	r3, [r7, #10]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d3ef      	bcc.n	8006d94 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2101      	movs	r1, #1
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 fa1d 	bl	80071fa <SX1278_hw_SetNSS>
 8006dc0:	e000      	b.n	8006dc4 <SX1278_SPIBurstWrite+0x70>
		return;
 8006dc2:	bf00      	nop
	}
}
 8006dc4:	3718      	adds	r7, #24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
	...

08006dcc <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b086      	sub	sp, #24
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 f90d 	bl	8006ff4 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8006dda:	200f      	movs	r0, #15
 8006ddc:	f000 fa8e 	bl	80072fc <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 f917 	bl	8007014 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006dec:	f04f 0000 	mov.w	r0, #0
 8006df0:	f04f 0100 	mov.w	r1, #0
 8006df4:	04d9      	lsls	r1, r3, #19
 8006df6:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8006dfa:	04d0      	lsls	r0, r2, #19
 8006dfc:	4a6f      	ldr	r2, [pc, #444]	@ (8006fbc <SX1278_config+0x1f0>)
 8006dfe:	f04f 0300 	mov.w	r3, #0
 8006e02:	f7f9 ff41 	bl	8000c88 <__aeabi_uldivmod>
 8006e06:	4602      	mov	r2, r0
 8006e08:	460b      	mov	r3, r1
 8006e0a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8006e0e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006e12:	f04f 0200 	mov.w	r2, #0
 8006e16:	f04f 0300 	mov.w	r3, #0
 8006e1a:	0c02      	lsrs	r2, r0, #16
 8006e1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006e20:	0c0b      	lsrs	r3, r1, #16
 8006e22:	b2d3      	uxtb	r3, r2
 8006e24:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 8006e26:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006e2a:	f04f 0200 	mov.w	r2, #0
 8006e2e:	f04f 0300 	mov.w	r3, #0
 8006e32:	0a02      	lsrs	r2, r0, #8
 8006e34:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8006e38:	0a0b      	lsrs	r3, r1, #8
 8006e3a:	b2d3      	uxtb	r3, r2
 8006e3c:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8006e3e:	7c3b      	ldrb	r3, [r7, #16]
 8006e40:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 8006e42:	f107 020c 	add.w	r2, r7, #12
 8006e46:	2303      	movs	r3, #3
 8006e48:	2106      	movs	r1, #6
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f7ff ff82 	bl	8006d54 <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8006e50:	2234      	movs	r2, #52	@ 0x34
 8006e52:	2139      	movs	r1, #57	@ 0x39
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f7ff ff54 	bl	8006d02 <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	7c1b      	ldrb	r3, [r3, #16]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	4b57      	ldr	r3, [pc, #348]	@ (8006fc0 <SX1278_config+0x1f4>)
 8006e62:	5c9b      	ldrb	r3, [r3, r2]
 8006e64:	461a      	mov	r2, r3
 8006e66:	2109      	movs	r1, #9
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f7ff ff4a 	bl	8006d02 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8006e6e:	220b      	movs	r2, #11
 8006e70:	210b      	movs	r1, #11
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f7ff ff45 	bl	8006d02 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8006e78:	2223      	movs	r2, #35	@ 0x23
 8006e7a:	210c      	movs	r1, #12
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f7ff ff40 	bl	8006d02 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	7c5b      	ldrb	r3, [r3, #17]
 8006e86:	461a      	mov	r2, r3
 8006e88:	4b4e      	ldr	r3, [pc, #312]	@ (8006fc4 <SX1278_config+0x1f8>)
 8006e8a:	5c9b      	ldrb	r3, [r3, r2]
 8006e8c:	2b06      	cmp	r3, #6
 8006e8e:	d147      	bne.n	8006f20 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	7c9b      	ldrb	r3, [r3, #18]
 8006e94:	461a      	mov	r2, r3
 8006e96:	4b4c      	ldr	r3, [pc, #304]	@ (8006fc8 <SX1278_config+0x1fc>)
 8006e98:	5c9b      	ldrb	r3, [r3, r2]
 8006e9a:	011b      	lsls	r3, r3, #4
 8006e9c:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	7cdb      	ldrb	r3, [r3, #19]
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	4b49      	ldr	r3, [pc, #292]	@ (8006fcc <SX1278_config+0x200>)
 8006ea6:	5c5b      	ldrb	r3, [r3, r1]
 8006ea8:	005b      	lsls	r3, r3, #1
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	4413      	add	r3, r2
 8006eae:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	211d      	movs	r1, #29
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f7ff ff22 	bl	8006d02 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	7c5b      	ldrb	r3, [r3, #17]
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	4b3f      	ldr	r3, [pc, #252]	@ (8006fc4 <SX1278_config+0x1f8>)
 8006ec6:	5c9b      	ldrb	r3, [r3, r2]
 8006ec8:	011b      	lsls	r3, r3, #4
 8006eca:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	7d1b      	ldrb	r3, [r3, #20]
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	4b3f      	ldr	r3, [pc, #252]	@ (8006fd0 <SX1278_config+0x204>)
 8006ed4:	5c5b      	ldrb	r3, [r3, r1]
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	4413      	add	r3, r2
 8006edc:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8006ede:	3303      	adds	r3, #3
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	211e      	movs	r1, #30
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7ff ff0b 	bl	8006d02 <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 8006eec:	2131      	movs	r1, #49	@ 0x31
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f7ff fee8 	bl	8006cc4 <SX1278_SPIRead>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8006ef8:	7bfb      	ldrb	r3, [r7, #15]
 8006efa:	f023 0307 	bic.w	r3, r3, #7
 8006efe:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8006f00:	7bfb      	ldrb	r3, [r7, #15]
 8006f02:	f043 0305 	orr.w	r3, r3, #5
 8006f06:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 8006f08:	7bfb      	ldrb	r3, [r7, #15]
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	2131      	movs	r1, #49	@ 0x31
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f7ff fef7 	bl	8006d02 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8006f14:	220c      	movs	r2, #12
 8006f16:	2137      	movs	r1, #55	@ 0x37
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f7ff fef2 	bl	8006d02 <SX1278_SPIWrite>
 8006f1e:	e029      	b.n	8006f74 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	7c9b      	ldrb	r3, [r3, #18]
 8006f24:	461a      	mov	r2, r3
 8006f26:	4b28      	ldr	r3, [pc, #160]	@ (8006fc8 <SX1278_config+0x1fc>)
 8006f28:	5c9b      	ldrb	r3, [r3, r2]
 8006f2a:	011b      	lsls	r3, r3, #4
 8006f2c:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	7cdb      	ldrb	r3, [r3, #19]
 8006f32:	4619      	mov	r1, r3
 8006f34:	4b25      	ldr	r3, [pc, #148]	@ (8006fcc <SX1278_config+0x200>)
 8006f36:	5c5b      	ldrb	r3, [r3, r1]
 8006f38:	005b      	lsls	r3, r3, #1
 8006f3a:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8006f3c:	4413      	add	r3, r2
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	461a      	mov	r2, r3
 8006f42:	211d      	movs	r1, #29
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f7ff fedc 	bl	8006d02 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	7c5b      	ldrb	r3, [r3, #17]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	4b1c      	ldr	r3, [pc, #112]	@ (8006fc4 <SX1278_config+0x1f8>)
 8006f52:	5c9b      	ldrb	r3, [r3, r2]
 8006f54:	011b      	lsls	r3, r3, #4
 8006f56:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	7d1b      	ldrb	r3, [r3, #20]
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8006fd0 <SX1278_config+0x204>)
 8006f60:	5c5b      	ldrb	r3, [r3, r1]
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8006f66:	4413      	add	r3, r2
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	211e      	movs	r1, #30
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f7ff fec7 	bl	8006d02 <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8006f74:	2204      	movs	r2, #4
 8006f76:	2126      	movs	r1, #38	@ 0x26
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f7ff fec2 	bl	8006d02 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8006f7e:	2208      	movs	r2, #8
 8006f80:	211f      	movs	r1, #31
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f7ff febd 	bl	8006d02 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8006f88:	2200      	movs	r2, #0
 8006f8a:	2120      	movs	r1, #32
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f7ff feb8 	bl	8006d02 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 8006f92:	2208      	movs	r2, #8
 8006f94:	2121      	movs	r1, #33	@ 0x21
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f7ff feb3 	bl	8006d02 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	2141      	movs	r1, #65	@ 0x41
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f7ff feae 	bl	8006d02 <SX1278_SPIWrite>
	module->readBytes = 0;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	SX1278_standby(module); //Entry standby mode
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f810 	bl	8006fd4 <SX1278_standby>
}
 8006fb4:	bf00      	nop
 8006fb6:	3718      	adds	r7, #24
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	01e84800 	.word	0x01e84800
 8006fc0:	0800bdb0 	.word	0x0800bdb0
 8006fc4:	0800bdb4 	.word	0x0800bdb4
 8006fc8:	0800bdbc 	.word	0x0800bdbc
 8006fcc:	0800bdc8 	.word	0x0800bdc8
 8006fd0:	0800bdcc 	.word	0x0800bdcc

08006fd4 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8006fdc:	2209      	movs	r2, #9
 8006fde:	2101      	movs	r1, #1
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f7ff fe8e 	bl	8006d02 <SX1278_SPIWrite>
	module->status = STANDBY;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	759a      	strb	r2, [r3, #22]
}
 8006fec:	bf00      	nop
 8006fee:	3708      	adds	r7, #8
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8006ffc:	2208      	movs	r2, #8
 8006ffe:	2101      	movs	r1, #1
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f7ff fe7e 	bl	8006d02 <SX1278_SPIWrite>
	module->status = SLEEP;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	759a      	strb	r2, [r3, #22]
}
 800700c:	bf00      	nop
 800700e:	3708      	adds	r7, #8
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 800701c:	2288      	movs	r2, #136	@ 0x88
 800701e:	2101      	movs	r1, #1
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f7ff fe6e 	bl	8006d02 <SX1278_SPIWrite>
}
 8007026:	bf00      	nop
 8007028:	3708      	adds	r7, #8
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 800702e:	b580      	push	{r7, lr}
 8007030:	b082      	sub	sp, #8
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8007036:	22ff      	movs	r2, #255	@ 0xff
 8007038:	2112      	movs	r1, #18
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f7ff fe61 	bl	8006d02 <SX1278_SPIWrite>
}
 8007040:	bf00      	nop
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <SX1278_LoRaEntryTx>:
		SX1278_clearLoRaIrq(module);
	}
	return module->readBytes;
}

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8007048:	b580      	push	{r7, lr}
 800704a:	b086      	sub	sp, #24
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	460b      	mov	r3, r1
 8007052:	607a      	str	r2, [r7, #4]
 8007054:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	7afa      	ldrb	r2, [r7, #11]
 800705a:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f7ff feb5 	bl	8006dcc <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8007062:	2287      	movs	r2, #135	@ 0x87
 8007064:	214d      	movs	r1, #77	@ 0x4d
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	f7ff fe4b 	bl	8006d02 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 800706c:	2200      	movs	r2, #0
 800706e:	2124      	movs	r1, #36	@ 0x24
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f7ff fe46 	bl	8006d02 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8007076:	2241      	movs	r2, #65	@ 0x41
 8007078:	2140      	movs	r1, #64	@ 0x40
 800707a:	68f8      	ldr	r0, [r7, #12]
 800707c:	f7ff fe41 	bl	8006d02 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f7ff ffd4 	bl	800702e <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 8007086:	22f7      	movs	r2, #247	@ 0xf7
 8007088:	2111      	movs	r1, #17
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f7ff fe39 	bl	8006d02 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 8007090:	7afb      	ldrb	r3, [r7, #11]
 8007092:	461a      	mov	r2, r3
 8007094:	2122      	movs	r1, #34	@ 0x22
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f7ff fe33 	bl	8006d02 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 800709c:	210e      	movs	r1, #14
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f7ff fe10 	bl	8006cc4 <SX1278_SPIRead>
 80070a4:	4603      	mov	r3, r0
 80070a6:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 80070a8:	7dfb      	ldrb	r3, [r7, #23]
 80070aa:	461a      	mov	r2, r3
 80070ac:	210d      	movs	r1, #13
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	f7ff fe27 	bl	8006d02 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 80070b4:	2122      	movs	r1, #34	@ 0x22
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	f7ff fe04 	bl	8006cc4 <SX1278_SPIRead>
 80070bc:	4603      	mov	r3, r0
 80070be:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 80070c0:	7dba      	ldrb	r2, [r7, #22]
 80070c2:	7afb      	ldrb	r3, [r7, #11]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d104      	bne.n	80070d2 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2202      	movs	r2, #2
 80070cc:	759a      	strb	r2, [r3, #22]
			return 1;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e00e      	b.n	80070f0 <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	3b01      	subs	r3, #1
 80070d6:	607b      	str	r3, [r7, #4]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1ea      	bne.n	80070b4 <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4618      	mov	r0, r3
 80070e4:	f000 f8a0 	bl	8007228 <SX1278_hw_Reset>
			SX1278_config(module);
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f7ff fe6f 	bl	8006dcc <SX1278_config>
			return 0;
 80070ee:	2300      	movs	r3, #0
		}
	}
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3718      	adds	r7, #24
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	603b      	str	r3, [r7, #0]
 8007104:	4613      	mov	r3, r2
 8007106:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8007108:	79fb      	ldrb	r3, [r7, #7]
 800710a:	68ba      	ldr	r2, [r7, #8]
 800710c:	2100      	movs	r1, #0
 800710e:	68f8      	ldr	r0, [r7, #12]
 8007110:	f7ff fe20 	bl	8006d54 <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8007114:	228b      	movs	r2, #139	@ 0x8b
 8007116:	2101      	movs	r1, #1
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f7ff fdf2 	bl	8006d02 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4618      	mov	r0, r3
 8007124:	f000 f8f5 	bl	8007312 <SX1278_hw_GetDIO0>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00b      	beq.n	8007146 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 800712e:	2112      	movs	r1, #18
 8007130:	68f8      	ldr	r0, [r7, #12]
 8007132:	f7ff fdc7 	bl	8006cc4 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f7ff ff79 	bl	800702e <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f7ff ff49 	bl	8006fd4 <SX1278_standby>
			return 1;
 8007142:	2301      	movs	r3, #1
 8007144:	e013      	b.n	800716e <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	3b01      	subs	r3, #1
 800714a:	603b      	str	r3, [r7, #0]
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d109      	bne.n	8007166 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4618      	mov	r0, r3
 8007158:	f000 f866 	bl	8007228 <SX1278_hw_Reset>
			SX1278_config(module);
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f7ff fe35 	bl	8006dcc <SX1278_config>
			return 0;
 8007162:	2300      	movs	r3, #0
 8007164:	e003      	b.n	800716e <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8007166:	2001      	movs	r0, #1
 8007168:	f000 f8c8 	bl	80072fc <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 800716c:	e7d7      	b.n	800711e <SX1278_LoRaTxPacket+0x26>
	}
}
 800716e:	4618      	mov	r0, r3
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8007176:	b580      	push	{r7, lr}
 8007178:	b084      	sub	sp, #16
 800717a:	af00      	add	r7, sp, #0
 800717c:	60f8      	str	r0, [r7, #12]
 800717e:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4618      	mov	r0, r3
 8007188:	f000 f822 	bl	80071d0 <SX1278_hw_init>
	module->frequency = frequency;
 800718c:	68f9      	ldr	r1, [r7, #12]
 800718e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007192:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	7e3a      	ldrb	r2, [r7, #24]
 800719a:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	7f3a      	ldrb	r2, [r7, #28]
 80071a0:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80071a8:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80071b0:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80071b8:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80071c0:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f7ff fe02 	bl	8006dcc <SX1278_config>
}
 80071c8:	bf00      	nop
 80071ca:	3710      	adds	r7, #16
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <SX1278_hw_init>:

#include "gpio.h"
#include "spi.h"


__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80071d8:	2101      	movs	r1, #1
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 f80d 	bl	80071fa <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6858      	ldr	r0, [r3, #4]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	2201      	movs	r2, #1
 80071ec:	4619      	mov	r1, r3
 80071ee:	f7fb fe35 	bl	8002e5c <HAL_GPIO_WritePin>
}
 80071f2:	bf00      	nop
 80071f4:	3708      	adds	r7, #8
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b082      	sub	sp, #8
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
 8007202:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6958      	ldr	r0, [r3, #20]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	b299      	uxth	r1, r3
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	2b01      	cmp	r3, #1
 8007212:	bf0c      	ite	eq
 8007214:	2301      	moveq	r3, #1
 8007216:	2300      	movne	r3, #0
 8007218:	b2db      	uxtb	r3, r3
 800721a:	461a      	mov	r2, r3
 800721c:	f7fb fe1e 	bl	8002e5c <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8007220:	bf00      	nop
 8007222:	3708      	adds	r7, #8
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8007230:	2101      	movs	r1, #1
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f7ff ffe1 	bl	80071fa <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6858      	ldr	r0, [r3, #4]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	b29b      	uxth	r3, r3
 8007242:	2200      	movs	r2, #0
 8007244:	4619      	mov	r1, r3
 8007246:	f7fb fe09 	bl	8002e5c <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 800724a:	2001      	movs	r0, #1
 800724c:	f000 f856 	bl	80072fc <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6858      	ldr	r0, [r3, #4]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	b29b      	uxth	r3, r3
 800725a:	2201      	movs	r2, #1
 800725c:	4619      	mov	r1, r3
 800725e:	f7fb fdfd 	bl	8002e5c <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8007262:	2064      	movs	r0, #100	@ 0x64
 8007264:	f000 f84a 	bl	80072fc <SX1278_hw_DelayMs>
}
 8007268:	bf00      	nop
 800726a:	3708      	adds	r7, #8
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	460b      	mov	r3, r1
 800727a:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 800727c:	2100      	movs	r1, #0
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f7ff ffbb 	bl	80071fa <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6998      	ldr	r0, [r3, #24]
 8007288:	1cf9      	adds	r1, r7, #3
 800728a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800728e:	2201      	movs	r2, #1
 8007290:	f7fc fcb9 	bl	8003c06 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8007294:	bf00      	nop
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	699b      	ldr	r3, [r3, #24]
 800729a:	4618      	mov	r0, r3
 800729c:	f7fd f89e 	bl	80043dc <HAL_SPI_GetState>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d1f7      	bne.n	8007296 <SX1278_hw_SPICommand+0x26>
		;
}
 80072a6:	bf00      	nop
 80072a8:	bf00      	nop
 80072aa:	3708      	adds	r7, #8
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b086      	sub	sp, #24
 80072b4:	af02      	add	r7, sp, #8
 80072b6:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 80072b8:	2300      	movs	r3, #0
 80072ba:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 80072bc:	2300      	movs	r3, #0
 80072be:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 80072c0:	2100      	movs	r1, #0
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f7ff ff99 	bl	80071fa <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6998      	ldr	r0, [r3, #24]
 80072cc:	f107 020e 	add.w	r2, r7, #14
 80072d0:	f107 010f 	add.w	r1, r7, #15
 80072d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	2301      	movs	r3, #1
 80072dc:	f7fc fdd7 	bl	8003e8e <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 80072e0:	bf00      	nop
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7fd f878 	bl	80043dc <HAL_SPI_GetState>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d1f7      	bne.n	80072e2 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 80072f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3710      	adds	r7, #16
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
	osDelay(msec);
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f7fe fabc 	bl	8005882 <osDelay>
}
 800730a:	bf00      	nop
 800730c:	3708      	adds	r7, #8
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8007312:	b580      	push	{r7, lr}
 8007314:	b082      	sub	sp, #8
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	68da      	ldr	r2, [r3, #12]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	b29b      	uxth	r3, r3
 8007324:	4619      	mov	r1, r3
 8007326:	4610      	mov	r0, r2
 8007328:	f7fb fd80 	bl	8002e2c <HAL_GPIO_ReadPin>
 800732c:	4603      	mov	r3, r0
 800732e:	2b01      	cmp	r3, #1
 8007330:	bf0c      	ite	eq
 8007332:	2301      	moveq	r3, #1
 8007334:	2300      	movne	r3, #0
 8007336:	b2db      	uxtb	r3, r3
}
 8007338:	4618      	mov	r0, r3
 800733a:	3708      	adds	r7, #8
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <TimerDelay_Init>:

volatile static TIM_HandleTypeDef HTIMx;
volatile static uint32_t gu32_ticks = 0;

void TimerDelay_Init(void)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b086      	sub	sp, #24
 8007344:	af00      	add	r7, sp, #0
	gu32_ticks = (HAL_RCC_GetHCLKFreq() / (1000000*2)); // tần số TIM4 (BUS APB1) = 1/2 tần số HCLK hệ thống
 8007346:	f7fc fb6f 	bl	8003a28 <HAL_RCC_GetHCLKFreq>
 800734a:	4603      	mov	r3, r0
 800734c:	4a28      	ldr	r2, [pc, #160]	@ (80073f0 <TimerDelay_Init+0xb0>)
 800734e:	fba2 2303 	umull	r2, r3, r2, r3
 8007352:	0cdb      	lsrs	r3, r3, #19
 8007354:	4a27      	ldr	r2, [pc, #156]	@ (80073f4 <TimerDelay_Init+0xb4>)
 8007356:	6013      	str	r3, [r2, #0]
	HTIMx.Instance = TIMER;
 8007358:	4b27      	ldr	r3, [pc, #156]	@ (80073f8 <TimerDelay_Init+0xb8>)
 800735a:	4a28      	ldr	r2, [pc, #160]	@ (80073fc <TimerDelay_Init+0xbc>)
 800735c:	601a      	str	r2, [r3, #0]

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800735e:	f107 0308 	add.w	r3, r7, #8
 8007362:	2200      	movs	r2, #0
 8007364:	601a      	str	r2, [r3, #0]
 8007366:	605a      	str	r2, [r3, #4]
 8007368:	609a      	str	r2, [r3, #8]
 800736a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800736c:	463b      	mov	r3, r7
 800736e:	2200      	movs	r2, #0
 8007370:	601a      	str	r2, [r3, #0]
 8007372:	605a      	str	r2, [r3, #4]


    HTIMx.Init.Prescaler = gu32_ticks-1;
 8007374:	4b1f      	ldr	r3, [pc, #124]	@ (80073f4 <TimerDelay_Init+0xb4>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	3b01      	subs	r3, #1
 800737a:	4a1f      	ldr	r2, [pc, #124]	@ (80073f8 <TimerDelay_Init+0xb8>)
 800737c:	6053      	str	r3, [r2, #4]
    HTIMx.Init.CounterMode = TIM_COUNTERMODE_UP;
 800737e:	4b1e      	ldr	r3, [pc, #120]	@ (80073f8 <TimerDelay_Init+0xb8>)
 8007380:	2200      	movs	r2, #0
 8007382:	609a      	str	r2, [r3, #8]
    HTIMx.Init.Period = 65535;
 8007384:	4b1c      	ldr	r3, [pc, #112]	@ (80073f8 <TimerDelay_Init+0xb8>)
 8007386:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800738a:	60da      	str	r2, [r3, #12]
    HTIMx.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800738c:	4b1a      	ldr	r3, [pc, #104]	@ (80073f8 <TimerDelay_Init+0xb8>)
 800738e:	2200      	movs	r2, #0
 8007390:	611a      	str	r2, [r3, #16]
    HTIMx.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007392:	4b19      	ldr	r3, [pc, #100]	@ (80073f8 <TimerDelay_Init+0xb8>)
 8007394:	2280      	movs	r2, #128	@ 0x80
 8007396:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&HTIMx) != HAL_OK)
 8007398:	4817      	ldr	r0, [pc, #92]	@ (80073f8 <TimerDelay_Init+0xb8>)
 800739a:	f7fd f91d 	bl	80045d8 <HAL_TIM_Base_Init>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d001      	beq.n	80073a8 <TimerDelay_Init+0x68>
    {
      Error_Handler();
 80073a4:	f7fa f9ac 	bl	8001700 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80073a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80073ac:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&HTIMx, &sClockSourceConfig) != HAL_OK)
 80073ae:	f107 0308 	add.w	r3, r7, #8
 80073b2:	4619      	mov	r1, r3
 80073b4:	4810      	ldr	r0, [pc, #64]	@ (80073f8 <TimerDelay_Init+0xb8>)
 80073b6:	f7fd fb27 	bl	8004a08 <HAL_TIM_ConfigClockSource>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d001      	beq.n	80073c4 <TimerDelay_Init+0x84>
    {
      Error_Handler();
 80073c0:	f7fa f99e 	bl	8001700 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80073c4:	2300      	movs	r3, #0
 80073c6:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80073c8:	2300      	movs	r3, #0
 80073ca:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&HTIMx, &sMasterConfig) != HAL_OK)
 80073cc:	463b      	mov	r3, r7
 80073ce:	4619      	mov	r1, r3
 80073d0:	4809      	ldr	r0, [pc, #36]	@ (80073f8 <TimerDelay_Init+0xb8>)
 80073d2:	f7fd fd4f 	bl	8004e74 <HAL_TIMEx_MasterConfigSynchronization>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d001      	beq.n	80073e0 <TimerDelay_Init+0xa0>
    {
      Error_Handler();
 80073dc:	f7fa f990 	bl	8001700 <Error_Handler>
    }

    HAL_TIM_Base_Start(&HTIMx);
 80073e0:	4805      	ldr	r0, [pc, #20]	@ (80073f8 <TimerDelay_Init+0xb8>)
 80073e2:	f7fd f949 	bl	8004678 <HAL_TIM_Base_Start>

}
 80073e6:	bf00      	nop
 80073e8:	3718      	adds	r7, #24
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	431bde83 	.word	0x431bde83
 80073f4:	200047a8 	.word	0x200047a8
 80073f8:	20004760 	.word	0x20004760
 80073fc:	40000800 	.word	0x40000800

08007400 <__io_putchar>:
#include "uart_printf.h"

// Định nghĩa lại hàm printf cho UART
PUTCHAR_PROTOTYPE
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8007408:	1d39      	adds	r1, r7, #4
 800740a:	f04f 33ff 	mov.w	r3, #4294967295
 800740e:	2201      	movs	r2, #1
 8007410:	4803      	ldr	r0, [pc, #12]	@ (8007420 <__io_putchar+0x20>)
 8007412:	f7fd fe0f 	bl	8005034 <HAL_UART_Transmit>
    return ch;
 8007416:	687b      	ldr	r3, [r7, #4]
}
 8007418:	4618      	mov	r0, r3
 800741a:	3708      	adds	r7, #8
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}
 8007420:	200009c0 	.word	0x200009c0

08007424 <__cvt>:
 8007424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007428:	ec57 6b10 	vmov	r6, r7, d0
 800742c:	2f00      	cmp	r7, #0
 800742e:	460c      	mov	r4, r1
 8007430:	4619      	mov	r1, r3
 8007432:	463b      	mov	r3, r7
 8007434:	bfbb      	ittet	lt
 8007436:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800743a:	461f      	movlt	r7, r3
 800743c:	2300      	movge	r3, #0
 800743e:	232d      	movlt	r3, #45	@ 0x2d
 8007440:	700b      	strb	r3, [r1, #0]
 8007442:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007444:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007448:	4691      	mov	r9, r2
 800744a:	f023 0820 	bic.w	r8, r3, #32
 800744e:	bfbc      	itt	lt
 8007450:	4632      	movlt	r2, r6
 8007452:	4616      	movlt	r6, r2
 8007454:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007458:	d005      	beq.n	8007466 <__cvt+0x42>
 800745a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800745e:	d100      	bne.n	8007462 <__cvt+0x3e>
 8007460:	3401      	adds	r4, #1
 8007462:	2102      	movs	r1, #2
 8007464:	e000      	b.n	8007468 <__cvt+0x44>
 8007466:	2103      	movs	r1, #3
 8007468:	ab03      	add	r3, sp, #12
 800746a:	9301      	str	r3, [sp, #4]
 800746c:	ab02      	add	r3, sp, #8
 800746e:	9300      	str	r3, [sp, #0]
 8007470:	ec47 6b10 	vmov	d0, r6, r7
 8007474:	4653      	mov	r3, sl
 8007476:	4622      	mov	r2, r4
 8007478:	f001 f9de 	bl	8008838 <_dtoa_r>
 800747c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007480:	4605      	mov	r5, r0
 8007482:	d119      	bne.n	80074b8 <__cvt+0x94>
 8007484:	f019 0f01 	tst.w	r9, #1
 8007488:	d00e      	beq.n	80074a8 <__cvt+0x84>
 800748a:	eb00 0904 	add.w	r9, r0, r4
 800748e:	2200      	movs	r2, #0
 8007490:	2300      	movs	r3, #0
 8007492:	4630      	mov	r0, r6
 8007494:	4639      	mov	r1, r7
 8007496:	f7f9 fb17 	bl	8000ac8 <__aeabi_dcmpeq>
 800749a:	b108      	cbz	r0, 80074a0 <__cvt+0x7c>
 800749c:	f8cd 900c 	str.w	r9, [sp, #12]
 80074a0:	2230      	movs	r2, #48	@ 0x30
 80074a2:	9b03      	ldr	r3, [sp, #12]
 80074a4:	454b      	cmp	r3, r9
 80074a6:	d31e      	bcc.n	80074e6 <__cvt+0xc2>
 80074a8:	9b03      	ldr	r3, [sp, #12]
 80074aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80074ac:	1b5b      	subs	r3, r3, r5
 80074ae:	4628      	mov	r0, r5
 80074b0:	6013      	str	r3, [r2, #0]
 80074b2:	b004      	add	sp, #16
 80074b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80074bc:	eb00 0904 	add.w	r9, r0, r4
 80074c0:	d1e5      	bne.n	800748e <__cvt+0x6a>
 80074c2:	7803      	ldrb	r3, [r0, #0]
 80074c4:	2b30      	cmp	r3, #48	@ 0x30
 80074c6:	d10a      	bne.n	80074de <__cvt+0xba>
 80074c8:	2200      	movs	r2, #0
 80074ca:	2300      	movs	r3, #0
 80074cc:	4630      	mov	r0, r6
 80074ce:	4639      	mov	r1, r7
 80074d0:	f7f9 fafa 	bl	8000ac8 <__aeabi_dcmpeq>
 80074d4:	b918      	cbnz	r0, 80074de <__cvt+0xba>
 80074d6:	f1c4 0401 	rsb	r4, r4, #1
 80074da:	f8ca 4000 	str.w	r4, [sl]
 80074de:	f8da 3000 	ldr.w	r3, [sl]
 80074e2:	4499      	add	r9, r3
 80074e4:	e7d3      	b.n	800748e <__cvt+0x6a>
 80074e6:	1c59      	adds	r1, r3, #1
 80074e8:	9103      	str	r1, [sp, #12]
 80074ea:	701a      	strb	r2, [r3, #0]
 80074ec:	e7d9      	b.n	80074a2 <__cvt+0x7e>

080074ee <__exponent>:
 80074ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074f0:	2900      	cmp	r1, #0
 80074f2:	bfba      	itte	lt
 80074f4:	4249      	neglt	r1, r1
 80074f6:	232d      	movlt	r3, #45	@ 0x2d
 80074f8:	232b      	movge	r3, #43	@ 0x2b
 80074fa:	2909      	cmp	r1, #9
 80074fc:	7002      	strb	r2, [r0, #0]
 80074fe:	7043      	strb	r3, [r0, #1]
 8007500:	dd29      	ble.n	8007556 <__exponent+0x68>
 8007502:	f10d 0307 	add.w	r3, sp, #7
 8007506:	461d      	mov	r5, r3
 8007508:	270a      	movs	r7, #10
 800750a:	461a      	mov	r2, r3
 800750c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007510:	fb07 1416 	mls	r4, r7, r6, r1
 8007514:	3430      	adds	r4, #48	@ 0x30
 8007516:	f802 4c01 	strb.w	r4, [r2, #-1]
 800751a:	460c      	mov	r4, r1
 800751c:	2c63      	cmp	r4, #99	@ 0x63
 800751e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007522:	4631      	mov	r1, r6
 8007524:	dcf1      	bgt.n	800750a <__exponent+0x1c>
 8007526:	3130      	adds	r1, #48	@ 0x30
 8007528:	1e94      	subs	r4, r2, #2
 800752a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800752e:	1c41      	adds	r1, r0, #1
 8007530:	4623      	mov	r3, r4
 8007532:	42ab      	cmp	r3, r5
 8007534:	d30a      	bcc.n	800754c <__exponent+0x5e>
 8007536:	f10d 0309 	add.w	r3, sp, #9
 800753a:	1a9b      	subs	r3, r3, r2
 800753c:	42ac      	cmp	r4, r5
 800753e:	bf88      	it	hi
 8007540:	2300      	movhi	r3, #0
 8007542:	3302      	adds	r3, #2
 8007544:	4403      	add	r3, r0
 8007546:	1a18      	subs	r0, r3, r0
 8007548:	b003      	add	sp, #12
 800754a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800754c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007550:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007554:	e7ed      	b.n	8007532 <__exponent+0x44>
 8007556:	2330      	movs	r3, #48	@ 0x30
 8007558:	3130      	adds	r1, #48	@ 0x30
 800755a:	7083      	strb	r3, [r0, #2]
 800755c:	70c1      	strb	r1, [r0, #3]
 800755e:	1d03      	adds	r3, r0, #4
 8007560:	e7f1      	b.n	8007546 <__exponent+0x58>
	...

08007564 <_printf_float>:
 8007564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007568:	b08d      	sub	sp, #52	@ 0x34
 800756a:	460c      	mov	r4, r1
 800756c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007570:	4616      	mov	r6, r2
 8007572:	461f      	mov	r7, r3
 8007574:	4605      	mov	r5, r0
 8007576:	f000 fff3 	bl	8008560 <_localeconv_r>
 800757a:	6803      	ldr	r3, [r0, #0]
 800757c:	9304      	str	r3, [sp, #16]
 800757e:	4618      	mov	r0, r3
 8007580:	f7f8 fe76 	bl	8000270 <strlen>
 8007584:	2300      	movs	r3, #0
 8007586:	930a      	str	r3, [sp, #40]	@ 0x28
 8007588:	f8d8 3000 	ldr.w	r3, [r8]
 800758c:	9005      	str	r0, [sp, #20]
 800758e:	3307      	adds	r3, #7
 8007590:	f023 0307 	bic.w	r3, r3, #7
 8007594:	f103 0208 	add.w	r2, r3, #8
 8007598:	f894 a018 	ldrb.w	sl, [r4, #24]
 800759c:	f8d4 b000 	ldr.w	fp, [r4]
 80075a0:	f8c8 2000 	str.w	r2, [r8]
 80075a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80075a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80075ac:	9307      	str	r3, [sp, #28]
 80075ae:	f8cd 8018 	str.w	r8, [sp, #24]
 80075b2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80075b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075ba:	4b9c      	ldr	r3, [pc, #624]	@ (800782c <_printf_float+0x2c8>)
 80075bc:	f04f 32ff 	mov.w	r2, #4294967295
 80075c0:	f7f9 fab4 	bl	8000b2c <__aeabi_dcmpun>
 80075c4:	bb70      	cbnz	r0, 8007624 <_printf_float+0xc0>
 80075c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075ca:	4b98      	ldr	r3, [pc, #608]	@ (800782c <_printf_float+0x2c8>)
 80075cc:	f04f 32ff 	mov.w	r2, #4294967295
 80075d0:	f7f9 fa8e 	bl	8000af0 <__aeabi_dcmple>
 80075d4:	bb30      	cbnz	r0, 8007624 <_printf_float+0xc0>
 80075d6:	2200      	movs	r2, #0
 80075d8:	2300      	movs	r3, #0
 80075da:	4640      	mov	r0, r8
 80075dc:	4649      	mov	r1, r9
 80075de:	f7f9 fa7d 	bl	8000adc <__aeabi_dcmplt>
 80075e2:	b110      	cbz	r0, 80075ea <_printf_float+0x86>
 80075e4:	232d      	movs	r3, #45	@ 0x2d
 80075e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075ea:	4a91      	ldr	r2, [pc, #580]	@ (8007830 <_printf_float+0x2cc>)
 80075ec:	4b91      	ldr	r3, [pc, #580]	@ (8007834 <_printf_float+0x2d0>)
 80075ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80075f2:	bf94      	ite	ls
 80075f4:	4690      	movls	r8, r2
 80075f6:	4698      	movhi	r8, r3
 80075f8:	2303      	movs	r3, #3
 80075fa:	6123      	str	r3, [r4, #16]
 80075fc:	f02b 0304 	bic.w	r3, fp, #4
 8007600:	6023      	str	r3, [r4, #0]
 8007602:	f04f 0900 	mov.w	r9, #0
 8007606:	9700      	str	r7, [sp, #0]
 8007608:	4633      	mov	r3, r6
 800760a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800760c:	4621      	mov	r1, r4
 800760e:	4628      	mov	r0, r5
 8007610:	f000 f9d2 	bl	80079b8 <_printf_common>
 8007614:	3001      	adds	r0, #1
 8007616:	f040 808d 	bne.w	8007734 <_printf_float+0x1d0>
 800761a:	f04f 30ff 	mov.w	r0, #4294967295
 800761e:	b00d      	add	sp, #52	@ 0x34
 8007620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007624:	4642      	mov	r2, r8
 8007626:	464b      	mov	r3, r9
 8007628:	4640      	mov	r0, r8
 800762a:	4649      	mov	r1, r9
 800762c:	f7f9 fa7e 	bl	8000b2c <__aeabi_dcmpun>
 8007630:	b140      	cbz	r0, 8007644 <_printf_float+0xe0>
 8007632:	464b      	mov	r3, r9
 8007634:	2b00      	cmp	r3, #0
 8007636:	bfbc      	itt	lt
 8007638:	232d      	movlt	r3, #45	@ 0x2d
 800763a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800763e:	4a7e      	ldr	r2, [pc, #504]	@ (8007838 <_printf_float+0x2d4>)
 8007640:	4b7e      	ldr	r3, [pc, #504]	@ (800783c <_printf_float+0x2d8>)
 8007642:	e7d4      	b.n	80075ee <_printf_float+0x8a>
 8007644:	6863      	ldr	r3, [r4, #4]
 8007646:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800764a:	9206      	str	r2, [sp, #24]
 800764c:	1c5a      	adds	r2, r3, #1
 800764e:	d13b      	bne.n	80076c8 <_printf_float+0x164>
 8007650:	2306      	movs	r3, #6
 8007652:	6063      	str	r3, [r4, #4]
 8007654:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007658:	2300      	movs	r3, #0
 800765a:	6022      	str	r2, [r4, #0]
 800765c:	9303      	str	r3, [sp, #12]
 800765e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007660:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007664:	ab09      	add	r3, sp, #36	@ 0x24
 8007666:	9300      	str	r3, [sp, #0]
 8007668:	6861      	ldr	r1, [r4, #4]
 800766a:	ec49 8b10 	vmov	d0, r8, r9
 800766e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007672:	4628      	mov	r0, r5
 8007674:	f7ff fed6 	bl	8007424 <__cvt>
 8007678:	9b06      	ldr	r3, [sp, #24]
 800767a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800767c:	2b47      	cmp	r3, #71	@ 0x47
 800767e:	4680      	mov	r8, r0
 8007680:	d129      	bne.n	80076d6 <_printf_float+0x172>
 8007682:	1cc8      	adds	r0, r1, #3
 8007684:	db02      	blt.n	800768c <_printf_float+0x128>
 8007686:	6863      	ldr	r3, [r4, #4]
 8007688:	4299      	cmp	r1, r3
 800768a:	dd41      	ble.n	8007710 <_printf_float+0x1ac>
 800768c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007690:	fa5f fa8a 	uxtb.w	sl, sl
 8007694:	3901      	subs	r1, #1
 8007696:	4652      	mov	r2, sl
 8007698:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800769c:	9109      	str	r1, [sp, #36]	@ 0x24
 800769e:	f7ff ff26 	bl	80074ee <__exponent>
 80076a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80076a4:	1813      	adds	r3, r2, r0
 80076a6:	2a01      	cmp	r2, #1
 80076a8:	4681      	mov	r9, r0
 80076aa:	6123      	str	r3, [r4, #16]
 80076ac:	dc02      	bgt.n	80076b4 <_printf_float+0x150>
 80076ae:	6822      	ldr	r2, [r4, #0]
 80076b0:	07d2      	lsls	r2, r2, #31
 80076b2:	d501      	bpl.n	80076b8 <_printf_float+0x154>
 80076b4:	3301      	adds	r3, #1
 80076b6:	6123      	str	r3, [r4, #16]
 80076b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d0a2      	beq.n	8007606 <_printf_float+0xa2>
 80076c0:	232d      	movs	r3, #45	@ 0x2d
 80076c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076c6:	e79e      	b.n	8007606 <_printf_float+0xa2>
 80076c8:	9a06      	ldr	r2, [sp, #24]
 80076ca:	2a47      	cmp	r2, #71	@ 0x47
 80076cc:	d1c2      	bne.n	8007654 <_printf_float+0xf0>
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1c0      	bne.n	8007654 <_printf_float+0xf0>
 80076d2:	2301      	movs	r3, #1
 80076d4:	e7bd      	b.n	8007652 <_printf_float+0xee>
 80076d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80076da:	d9db      	bls.n	8007694 <_printf_float+0x130>
 80076dc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80076e0:	d118      	bne.n	8007714 <_printf_float+0x1b0>
 80076e2:	2900      	cmp	r1, #0
 80076e4:	6863      	ldr	r3, [r4, #4]
 80076e6:	dd0b      	ble.n	8007700 <_printf_float+0x19c>
 80076e8:	6121      	str	r1, [r4, #16]
 80076ea:	b913      	cbnz	r3, 80076f2 <_printf_float+0x18e>
 80076ec:	6822      	ldr	r2, [r4, #0]
 80076ee:	07d0      	lsls	r0, r2, #31
 80076f0:	d502      	bpl.n	80076f8 <_printf_float+0x194>
 80076f2:	3301      	adds	r3, #1
 80076f4:	440b      	add	r3, r1
 80076f6:	6123      	str	r3, [r4, #16]
 80076f8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80076fa:	f04f 0900 	mov.w	r9, #0
 80076fe:	e7db      	b.n	80076b8 <_printf_float+0x154>
 8007700:	b913      	cbnz	r3, 8007708 <_printf_float+0x1a4>
 8007702:	6822      	ldr	r2, [r4, #0]
 8007704:	07d2      	lsls	r2, r2, #31
 8007706:	d501      	bpl.n	800770c <_printf_float+0x1a8>
 8007708:	3302      	adds	r3, #2
 800770a:	e7f4      	b.n	80076f6 <_printf_float+0x192>
 800770c:	2301      	movs	r3, #1
 800770e:	e7f2      	b.n	80076f6 <_printf_float+0x192>
 8007710:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007714:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007716:	4299      	cmp	r1, r3
 8007718:	db05      	blt.n	8007726 <_printf_float+0x1c2>
 800771a:	6823      	ldr	r3, [r4, #0]
 800771c:	6121      	str	r1, [r4, #16]
 800771e:	07d8      	lsls	r0, r3, #31
 8007720:	d5ea      	bpl.n	80076f8 <_printf_float+0x194>
 8007722:	1c4b      	adds	r3, r1, #1
 8007724:	e7e7      	b.n	80076f6 <_printf_float+0x192>
 8007726:	2900      	cmp	r1, #0
 8007728:	bfd4      	ite	le
 800772a:	f1c1 0202 	rsble	r2, r1, #2
 800772e:	2201      	movgt	r2, #1
 8007730:	4413      	add	r3, r2
 8007732:	e7e0      	b.n	80076f6 <_printf_float+0x192>
 8007734:	6823      	ldr	r3, [r4, #0]
 8007736:	055a      	lsls	r2, r3, #21
 8007738:	d407      	bmi.n	800774a <_printf_float+0x1e6>
 800773a:	6923      	ldr	r3, [r4, #16]
 800773c:	4642      	mov	r2, r8
 800773e:	4631      	mov	r1, r6
 8007740:	4628      	mov	r0, r5
 8007742:	47b8      	blx	r7
 8007744:	3001      	adds	r0, #1
 8007746:	d12b      	bne.n	80077a0 <_printf_float+0x23c>
 8007748:	e767      	b.n	800761a <_printf_float+0xb6>
 800774a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800774e:	f240 80dd 	bls.w	800790c <_printf_float+0x3a8>
 8007752:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007756:	2200      	movs	r2, #0
 8007758:	2300      	movs	r3, #0
 800775a:	f7f9 f9b5 	bl	8000ac8 <__aeabi_dcmpeq>
 800775e:	2800      	cmp	r0, #0
 8007760:	d033      	beq.n	80077ca <_printf_float+0x266>
 8007762:	4a37      	ldr	r2, [pc, #220]	@ (8007840 <_printf_float+0x2dc>)
 8007764:	2301      	movs	r3, #1
 8007766:	4631      	mov	r1, r6
 8007768:	4628      	mov	r0, r5
 800776a:	47b8      	blx	r7
 800776c:	3001      	adds	r0, #1
 800776e:	f43f af54 	beq.w	800761a <_printf_float+0xb6>
 8007772:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007776:	4543      	cmp	r3, r8
 8007778:	db02      	blt.n	8007780 <_printf_float+0x21c>
 800777a:	6823      	ldr	r3, [r4, #0]
 800777c:	07d8      	lsls	r0, r3, #31
 800777e:	d50f      	bpl.n	80077a0 <_printf_float+0x23c>
 8007780:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007784:	4631      	mov	r1, r6
 8007786:	4628      	mov	r0, r5
 8007788:	47b8      	blx	r7
 800778a:	3001      	adds	r0, #1
 800778c:	f43f af45 	beq.w	800761a <_printf_float+0xb6>
 8007790:	f04f 0900 	mov.w	r9, #0
 8007794:	f108 38ff 	add.w	r8, r8, #4294967295
 8007798:	f104 0a1a 	add.w	sl, r4, #26
 800779c:	45c8      	cmp	r8, r9
 800779e:	dc09      	bgt.n	80077b4 <_printf_float+0x250>
 80077a0:	6823      	ldr	r3, [r4, #0]
 80077a2:	079b      	lsls	r3, r3, #30
 80077a4:	f100 8103 	bmi.w	80079ae <_printf_float+0x44a>
 80077a8:	68e0      	ldr	r0, [r4, #12]
 80077aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077ac:	4298      	cmp	r0, r3
 80077ae:	bfb8      	it	lt
 80077b0:	4618      	movlt	r0, r3
 80077b2:	e734      	b.n	800761e <_printf_float+0xba>
 80077b4:	2301      	movs	r3, #1
 80077b6:	4652      	mov	r2, sl
 80077b8:	4631      	mov	r1, r6
 80077ba:	4628      	mov	r0, r5
 80077bc:	47b8      	blx	r7
 80077be:	3001      	adds	r0, #1
 80077c0:	f43f af2b 	beq.w	800761a <_printf_float+0xb6>
 80077c4:	f109 0901 	add.w	r9, r9, #1
 80077c8:	e7e8      	b.n	800779c <_printf_float+0x238>
 80077ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	dc39      	bgt.n	8007844 <_printf_float+0x2e0>
 80077d0:	4a1b      	ldr	r2, [pc, #108]	@ (8007840 <_printf_float+0x2dc>)
 80077d2:	2301      	movs	r3, #1
 80077d4:	4631      	mov	r1, r6
 80077d6:	4628      	mov	r0, r5
 80077d8:	47b8      	blx	r7
 80077da:	3001      	adds	r0, #1
 80077dc:	f43f af1d 	beq.w	800761a <_printf_float+0xb6>
 80077e0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80077e4:	ea59 0303 	orrs.w	r3, r9, r3
 80077e8:	d102      	bne.n	80077f0 <_printf_float+0x28c>
 80077ea:	6823      	ldr	r3, [r4, #0]
 80077ec:	07d9      	lsls	r1, r3, #31
 80077ee:	d5d7      	bpl.n	80077a0 <_printf_float+0x23c>
 80077f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077f4:	4631      	mov	r1, r6
 80077f6:	4628      	mov	r0, r5
 80077f8:	47b8      	blx	r7
 80077fa:	3001      	adds	r0, #1
 80077fc:	f43f af0d 	beq.w	800761a <_printf_float+0xb6>
 8007800:	f04f 0a00 	mov.w	sl, #0
 8007804:	f104 0b1a 	add.w	fp, r4, #26
 8007808:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800780a:	425b      	negs	r3, r3
 800780c:	4553      	cmp	r3, sl
 800780e:	dc01      	bgt.n	8007814 <_printf_float+0x2b0>
 8007810:	464b      	mov	r3, r9
 8007812:	e793      	b.n	800773c <_printf_float+0x1d8>
 8007814:	2301      	movs	r3, #1
 8007816:	465a      	mov	r2, fp
 8007818:	4631      	mov	r1, r6
 800781a:	4628      	mov	r0, r5
 800781c:	47b8      	blx	r7
 800781e:	3001      	adds	r0, #1
 8007820:	f43f aefb 	beq.w	800761a <_printf_float+0xb6>
 8007824:	f10a 0a01 	add.w	sl, sl, #1
 8007828:	e7ee      	b.n	8007808 <_printf_float+0x2a4>
 800782a:	bf00      	nop
 800782c:	7fefffff 	.word	0x7fefffff
 8007830:	0800bdce 	.word	0x0800bdce
 8007834:	0800bdd2 	.word	0x0800bdd2
 8007838:	0800bdd6 	.word	0x0800bdd6
 800783c:	0800bdda 	.word	0x0800bdda
 8007840:	0800bdde 	.word	0x0800bdde
 8007844:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007846:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800784a:	4553      	cmp	r3, sl
 800784c:	bfa8      	it	ge
 800784e:	4653      	movge	r3, sl
 8007850:	2b00      	cmp	r3, #0
 8007852:	4699      	mov	r9, r3
 8007854:	dc36      	bgt.n	80078c4 <_printf_float+0x360>
 8007856:	f04f 0b00 	mov.w	fp, #0
 800785a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800785e:	f104 021a 	add.w	r2, r4, #26
 8007862:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007864:	9306      	str	r3, [sp, #24]
 8007866:	eba3 0309 	sub.w	r3, r3, r9
 800786a:	455b      	cmp	r3, fp
 800786c:	dc31      	bgt.n	80078d2 <_printf_float+0x36e>
 800786e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007870:	459a      	cmp	sl, r3
 8007872:	dc3a      	bgt.n	80078ea <_printf_float+0x386>
 8007874:	6823      	ldr	r3, [r4, #0]
 8007876:	07da      	lsls	r2, r3, #31
 8007878:	d437      	bmi.n	80078ea <_printf_float+0x386>
 800787a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800787c:	ebaa 0903 	sub.w	r9, sl, r3
 8007880:	9b06      	ldr	r3, [sp, #24]
 8007882:	ebaa 0303 	sub.w	r3, sl, r3
 8007886:	4599      	cmp	r9, r3
 8007888:	bfa8      	it	ge
 800788a:	4699      	movge	r9, r3
 800788c:	f1b9 0f00 	cmp.w	r9, #0
 8007890:	dc33      	bgt.n	80078fa <_printf_float+0x396>
 8007892:	f04f 0800 	mov.w	r8, #0
 8007896:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800789a:	f104 0b1a 	add.w	fp, r4, #26
 800789e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078a0:	ebaa 0303 	sub.w	r3, sl, r3
 80078a4:	eba3 0309 	sub.w	r3, r3, r9
 80078a8:	4543      	cmp	r3, r8
 80078aa:	f77f af79 	ble.w	80077a0 <_printf_float+0x23c>
 80078ae:	2301      	movs	r3, #1
 80078b0:	465a      	mov	r2, fp
 80078b2:	4631      	mov	r1, r6
 80078b4:	4628      	mov	r0, r5
 80078b6:	47b8      	blx	r7
 80078b8:	3001      	adds	r0, #1
 80078ba:	f43f aeae 	beq.w	800761a <_printf_float+0xb6>
 80078be:	f108 0801 	add.w	r8, r8, #1
 80078c2:	e7ec      	b.n	800789e <_printf_float+0x33a>
 80078c4:	4642      	mov	r2, r8
 80078c6:	4631      	mov	r1, r6
 80078c8:	4628      	mov	r0, r5
 80078ca:	47b8      	blx	r7
 80078cc:	3001      	adds	r0, #1
 80078ce:	d1c2      	bne.n	8007856 <_printf_float+0x2f2>
 80078d0:	e6a3      	b.n	800761a <_printf_float+0xb6>
 80078d2:	2301      	movs	r3, #1
 80078d4:	4631      	mov	r1, r6
 80078d6:	4628      	mov	r0, r5
 80078d8:	9206      	str	r2, [sp, #24]
 80078da:	47b8      	blx	r7
 80078dc:	3001      	adds	r0, #1
 80078de:	f43f ae9c 	beq.w	800761a <_printf_float+0xb6>
 80078e2:	9a06      	ldr	r2, [sp, #24]
 80078e4:	f10b 0b01 	add.w	fp, fp, #1
 80078e8:	e7bb      	b.n	8007862 <_printf_float+0x2fe>
 80078ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078ee:	4631      	mov	r1, r6
 80078f0:	4628      	mov	r0, r5
 80078f2:	47b8      	blx	r7
 80078f4:	3001      	adds	r0, #1
 80078f6:	d1c0      	bne.n	800787a <_printf_float+0x316>
 80078f8:	e68f      	b.n	800761a <_printf_float+0xb6>
 80078fa:	9a06      	ldr	r2, [sp, #24]
 80078fc:	464b      	mov	r3, r9
 80078fe:	4442      	add	r2, r8
 8007900:	4631      	mov	r1, r6
 8007902:	4628      	mov	r0, r5
 8007904:	47b8      	blx	r7
 8007906:	3001      	adds	r0, #1
 8007908:	d1c3      	bne.n	8007892 <_printf_float+0x32e>
 800790a:	e686      	b.n	800761a <_printf_float+0xb6>
 800790c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007910:	f1ba 0f01 	cmp.w	sl, #1
 8007914:	dc01      	bgt.n	800791a <_printf_float+0x3b6>
 8007916:	07db      	lsls	r3, r3, #31
 8007918:	d536      	bpl.n	8007988 <_printf_float+0x424>
 800791a:	2301      	movs	r3, #1
 800791c:	4642      	mov	r2, r8
 800791e:	4631      	mov	r1, r6
 8007920:	4628      	mov	r0, r5
 8007922:	47b8      	blx	r7
 8007924:	3001      	adds	r0, #1
 8007926:	f43f ae78 	beq.w	800761a <_printf_float+0xb6>
 800792a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800792e:	4631      	mov	r1, r6
 8007930:	4628      	mov	r0, r5
 8007932:	47b8      	blx	r7
 8007934:	3001      	adds	r0, #1
 8007936:	f43f ae70 	beq.w	800761a <_printf_float+0xb6>
 800793a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800793e:	2200      	movs	r2, #0
 8007940:	2300      	movs	r3, #0
 8007942:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007946:	f7f9 f8bf 	bl	8000ac8 <__aeabi_dcmpeq>
 800794a:	b9c0      	cbnz	r0, 800797e <_printf_float+0x41a>
 800794c:	4653      	mov	r3, sl
 800794e:	f108 0201 	add.w	r2, r8, #1
 8007952:	4631      	mov	r1, r6
 8007954:	4628      	mov	r0, r5
 8007956:	47b8      	blx	r7
 8007958:	3001      	adds	r0, #1
 800795a:	d10c      	bne.n	8007976 <_printf_float+0x412>
 800795c:	e65d      	b.n	800761a <_printf_float+0xb6>
 800795e:	2301      	movs	r3, #1
 8007960:	465a      	mov	r2, fp
 8007962:	4631      	mov	r1, r6
 8007964:	4628      	mov	r0, r5
 8007966:	47b8      	blx	r7
 8007968:	3001      	adds	r0, #1
 800796a:	f43f ae56 	beq.w	800761a <_printf_float+0xb6>
 800796e:	f108 0801 	add.w	r8, r8, #1
 8007972:	45d0      	cmp	r8, sl
 8007974:	dbf3      	blt.n	800795e <_printf_float+0x3fa>
 8007976:	464b      	mov	r3, r9
 8007978:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800797c:	e6df      	b.n	800773e <_printf_float+0x1da>
 800797e:	f04f 0800 	mov.w	r8, #0
 8007982:	f104 0b1a 	add.w	fp, r4, #26
 8007986:	e7f4      	b.n	8007972 <_printf_float+0x40e>
 8007988:	2301      	movs	r3, #1
 800798a:	4642      	mov	r2, r8
 800798c:	e7e1      	b.n	8007952 <_printf_float+0x3ee>
 800798e:	2301      	movs	r3, #1
 8007990:	464a      	mov	r2, r9
 8007992:	4631      	mov	r1, r6
 8007994:	4628      	mov	r0, r5
 8007996:	47b8      	blx	r7
 8007998:	3001      	adds	r0, #1
 800799a:	f43f ae3e 	beq.w	800761a <_printf_float+0xb6>
 800799e:	f108 0801 	add.w	r8, r8, #1
 80079a2:	68e3      	ldr	r3, [r4, #12]
 80079a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80079a6:	1a5b      	subs	r3, r3, r1
 80079a8:	4543      	cmp	r3, r8
 80079aa:	dcf0      	bgt.n	800798e <_printf_float+0x42a>
 80079ac:	e6fc      	b.n	80077a8 <_printf_float+0x244>
 80079ae:	f04f 0800 	mov.w	r8, #0
 80079b2:	f104 0919 	add.w	r9, r4, #25
 80079b6:	e7f4      	b.n	80079a2 <_printf_float+0x43e>

080079b8 <_printf_common>:
 80079b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079bc:	4616      	mov	r6, r2
 80079be:	4698      	mov	r8, r3
 80079c0:	688a      	ldr	r2, [r1, #8]
 80079c2:	690b      	ldr	r3, [r1, #16]
 80079c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80079c8:	4293      	cmp	r3, r2
 80079ca:	bfb8      	it	lt
 80079cc:	4613      	movlt	r3, r2
 80079ce:	6033      	str	r3, [r6, #0]
 80079d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80079d4:	4607      	mov	r7, r0
 80079d6:	460c      	mov	r4, r1
 80079d8:	b10a      	cbz	r2, 80079de <_printf_common+0x26>
 80079da:	3301      	adds	r3, #1
 80079dc:	6033      	str	r3, [r6, #0]
 80079de:	6823      	ldr	r3, [r4, #0]
 80079e0:	0699      	lsls	r1, r3, #26
 80079e2:	bf42      	ittt	mi
 80079e4:	6833      	ldrmi	r3, [r6, #0]
 80079e6:	3302      	addmi	r3, #2
 80079e8:	6033      	strmi	r3, [r6, #0]
 80079ea:	6825      	ldr	r5, [r4, #0]
 80079ec:	f015 0506 	ands.w	r5, r5, #6
 80079f0:	d106      	bne.n	8007a00 <_printf_common+0x48>
 80079f2:	f104 0a19 	add.w	sl, r4, #25
 80079f6:	68e3      	ldr	r3, [r4, #12]
 80079f8:	6832      	ldr	r2, [r6, #0]
 80079fa:	1a9b      	subs	r3, r3, r2
 80079fc:	42ab      	cmp	r3, r5
 80079fe:	dc26      	bgt.n	8007a4e <_printf_common+0x96>
 8007a00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007a04:	6822      	ldr	r2, [r4, #0]
 8007a06:	3b00      	subs	r3, #0
 8007a08:	bf18      	it	ne
 8007a0a:	2301      	movne	r3, #1
 8007a0c:	0692      	lsls	r2, r2, #26
 8007a0e:	d42b      	bmi.n	8007a68 <_printf_common+0xb0>
 8007a10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007a14:	4641      	mov	r1, r8
 8007a16:	4638      	mov	r0, r7
 8007a18:	47c8      	blx	r9
 8007a1a:	3001      	adds	r0, #1
 8007a1c:	d01e      	beq.n	8007a5c <_printf_common+0xa4>
 8007a1e:	6823      	ldr	r3, [r4, #0]
 8007a20:	6922      	ldr	r2, [r4, #16]
 8007a22:	f003 0306 	and.w	r3, r3, #6
 8007a26:	2b04      	cmp	r3, #4
 8007a28:	bf02      	ittt	eq
 8007a2a:	68e5      	ldreq	r5, [r4, #12]
 8007a2c:	6833      	ldreq	r3, [r6, #0]
 8007a2e:	1aed      	subeq	r5, r5, r3
 8007a30:	68a3      	ldr	r3, [r4, #8]
 8007a32:	bf0c      	ite	eq
 8007a34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a38:	2500      	movne	r5, #0
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	bfc4      	itt	gt
 8007a3e:	1a9b      	subgt	r3, r3, r2
 8007a40:	18ed      	addgt	r5, r5, r3
 8007a42:	2600      	movs	r6, #0
 8007a44:	341a      	adds	r4, #26
 8007a46:	42b5      	cmp	r5, r6
 8007a48:	d11a      	bne.n	8007a80 <_printf_common+0xc8>
 8007a4a:	2000      	movs	r0, #0
 8007a4c:	e008      	b.n	8007a60 <_printf_common+0xa8>
 8007a4e:	2301      	movs	r3, #1
 8007a50:	4652      	mov	r2, sl
 8007a52:	4641      	mov	r1, r8
 8007a54:	4638      	mov	r0, r7
 8007a56:	47c8      	blx	r9
 8007a58:	3001      	adds	r0, #1
 8007a5a:	d103      	bne.n	8007a64 <_printf_common+0xac>
 8007a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a64:	3501      	adds	r5, #1
 8007a66:	e7c6      	b.n	80079f6 <_printf_common+0x3e>
 8007a68:	18e1      	adds	r1, r4, r3
 8007a6a:	1c5a      	adds	r2, r3, #1
 8007a6c:	2030      	movs	r0, #48	@ 0x30
 8007a6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007a72:	4422      	add	r2, r4
 8007a74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007a78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007a7c:	3302      	adds	r3, #2
 8007a7e:	e7c7      	b.n	8007a10 <_printf_common+0x58>
 8007a80:	2301      	movs	r3, #1
 8007a82:	4622      	mov	r2, r4
 8007a84:	4641      	mov	r1, r8
 8007a86:	4638      	mov	r0, r7
 8007a88:	47c8      	blx	r9
 8007a8a:	3001      	adds	r0, #1
 8007a8c:	d0e6      	beq.n	8007a5c <_printf_common+0xa4>
 8007a8e:	3601      	adds	r6, #1
 8007a90:	e7d9      	b.n	8007a46 <_printf_common+0x8e>
	...

08007a94 <_printf_i>:
 8007a94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a98:	7e0f      	ldrb	r7, [r1, #24]
 8007a9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007a9c:	2f78      	cmp	r7, #120	@ 0x78
 8007a9e:	4691      	mov	r9, r2
 8007aa0:	4680      	mov	r8, r0
 8007aa2:	460c      	mov	r4, r1
 8007aa4:	469a      	mov	sl, r3
 8007aa6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007aaa:	d807      	bhi.n	8007abc <_printf_i+0x28>
 8007aac:	2f62      	cmp	r7, #98	@ 0x62
 8007aae:	d80a      	bhi.n	8007ac6 <_printf_i+0x32>
 8007ab0:	2f00      	cmp	r7, #0
 8007ab2:	f000 80d2 	beq.w	8007c5a <_printf_i+0x1c6>
 8007ab6:	2f58      	cmp	r7, #88	@ 0x58
 8007ab8:	f000 80b9 	beq.w	8007c2e <_printf_i+0x19a>
 8007abc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ac0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007ac4:	e03a      	b.n	8007b3c <_printf_i+0xa8>
 8007ac6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007aca:	2b15      	cmp	r3, #21
 8007acc:	d8f6      	bhi.n	8007abc <_printf_i+0x28>
 8007ace:	a101      	add	r1, pc, #4	@ (adr r1, 8007ad4 <_printf_i+0x40>)
 8007ad0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ad4:	08007b2d 	.word	0x08007b2d
 8007ad8:	08007b41 	.word	0x08007b41
 8007adc:	08007abd 	.word	0x08007abd
 8007ae0:	08007abd 	.word	0x08007abd
 8007ae4:	08007abd 	.word	0x08007abd
 8007ae8:	08007abd 	.word	0x08007abd
 8007aec:	08007b41 	.word	0x08007b41
 8007af0:	08007abd 	.word	0x08007abd
 8007af4:	08007abd 	.word	0x08007abd
 8007af8:	08007abd 	.word	0x08007abd
 8007afc:	08007abd 	.word	0x08007abd
 8007b00:	08007c41 	.word	0x08007c41
 8007b04:	08007b6b 	.word	0x08007b6b
 8007b08:	08007bfb 	.word	0x08007bfb
 8007b0c:	08007abd 	.word	0x08007abd
 8007b10:	08007abd 	.word	0x08007abd
 8007b14:	08007c63 	.word	0x08007c63
 8007b18:	08007abd 	.word	0x08007abd
 8007b1c:	08007b6b 	.word	0x08007b6b
 8007b20:	08007abd 	.word	0x08007abd
 8007b24:	08007abd 	.word	0x08007abd
 8007b28:	08007c03 	.word	0x08007c03
 8007b2c:	6833      	ldr	r3, [r6, #0]
 8007b2e:	1d1a      	adds	r2, r3, #4
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	6032      	str	r2, [r6, #0]
 8007b34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e09d      	b.n	8007c7c <_printf_i+0x1e8>
 8007b40:	6833      	ldr	r3, [r6, #0]
 8007b42:	6820      	ldr	r0, [r4, #0]
 8007b44:	1d19      	adds	r1, r3, #4
 8007b46:	6031      	str	r1, [r6, #0]
 8007b48:	0606      	lsls	r6, r0, #24
 8007b4a:	d501      	bpl.n	8007b50 <_printf_i+0xbc>
 8007b4c:	681d      	ldr	r5, [r3, #0]
 8007b4e:	e003      	b.n	8007b58 <_printf_i+0xc4>
 8007b50:	0645      	lsls	r5, r0, #25
 8007b52:	d5fb      	bpl.n	8007b4c <_printf_i+0xb8>
 8007b54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007b58:	2d00      	cmp	r5, #0
 8007b5a:	da03      	bge.n	8007b64 <_printf_i+0xd0>
 8007b5c:	232d      	movs	r3, #45	@ 0x2d
 8007b5e:	426d      	negs	r5, r5
 8007b60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b64:	4859      	ldr	r0, [pc, #356]	@ (8007ccc <_printf_i+0x238>)
 8007b66:	230a      	movs	r3, #10
 8007b68:	e011      	b.n	8007b8e <_printf_i+0xfa>
 8007b6a:	6821      	ldr	r1, [r4, #0]
 8007b6c:	6833      	ldr	r3, [r6, #0]
 8007b6e:	0608      	lsls	r0, r1, #24
 8007b70:	f853 5b04 	ldr.w	r5, [r3], #4
 8007b74:	d402      	bmi.n	8007b7c <_printf_i+0xe8>
 8007b76:	0649      	lsls	r1, r1, #25
 8007b78:	bf48      	it	mi
 8007b7a:	b2ad      	uxthmi	r5, r5
 8007b7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007b7e:	4853      	ldr	r0, [pc, #332]	@ (8007ccc <_printf_i+0x238>)
 8007b80:	6033      	str	r3, [r6, #0]
 8007b82:	bf14      	ite	ne
 8007b84:	230a      	movne	r3, #10
 8007b86:	2308      	moveq	r3, #8
 8007b88:	2100      	movs	r1, #0
 8007b8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007b8e:	6866      	ldr	r6, [r4, #4]
 8007b90:	60a6      	str	r6, [r4, #8]
 8007b92:	2e00      	cmp	r6, #0
 8007b94:	bfa2      	ittt	ge
 8007b96:	6821      	ldrge	r1, [r4, #0]
 8007b98:	f021 0104 	bicge.w	r1, r1, #4
 8007b9c:	6021      	strge	r1, [r4, #0]
 8007b9e:	b90d      	cbnz	r5, 8007ba4 <_printf_i+0x110>
 8007ba0:	2e00      	cmp	r6, #0
 8007ba2:	d04b      	beq.n	8007c3c <_printf_i+0x1a8>
 8007ba4:	4616      	mov	r6, r2
 8007ba6:	fbb5 f1f3 	udiv	r1, r5, r3
 8007baa:	fb03 5711 	mls	r7, r3, r1, r5
 8007bae:	5dc7      	ldrb	r7, [r0, r7]
 8007bb0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007bb4:	462f      	mov	r7, r5
 8007bb6:	42bb      	cmp	r3, r7
 8007bb8:	460d      	mov	r5, r1
 8007bba:	d9f4      	bls.n	8007ba6 <_printf_i+0x112>
 8007bbc:	2b08      	cmp	r3, #8
 8007bbe:	d10b      	bne.n	8007bd8 <_printf_i+0x144>
 8007bc0:	6823      	ldr	r3, [r4, #0]
 8007bc2:	07df      	lsls	r7, r3, #31
 8007bc4:	d508      	bpl.n	8007bd8 <_printf_i+0x144>
 8007bc6:	6923      	ldr	r3, [r4, #16]
 8007bc8:	6861      	ldr	r1, [r4, #4]
 8007bca:	4299      	cmp	r1, r3
 8007bcc:	bfde      	ittt	le
 8007bce:	2330      	movle	r3, #48	@ 0x30
 8007bd0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007bd4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007bd8:	1b92      	subs	r2, r2, r6
 8007bda:	6122      	str	r2, [r4, #16]
 8007bdc:	f8cd a000 	str.w	sl, [sp]
 8007be0:	464b      	mov	r3, r9
 8007be2:	aa03      	add	r2, sp, #12
 8007be4:	4621      	mov	r1, r4
 8007be6:	4640      	mov	r0, r8
 8007be8:	f7ff fee6 	bl	80079b8 <_printf_common>
 8007bec:	3001      	adds	r0, #1
 8007bee:	d14a      	bne.n	8007c86 <_printf_i+0x1f2>
 8007bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf4:	b004      	add	sp, #16
 8007bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bfa:	6823      	ldr	r3, [r4, #0]
 8007bfc:	f043 0320 	orr.w	r3, r3, #32
 8007c00:	6023      	str	r3, [r4, #0]
 8007c02:	4833      	ldr	r0, [pc, #204]	@ (8007cd0 <_printf_i+0x23c>)
 8007c04:	2778      	movs	r7, #120	@ 0x78
 8007c06:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007c0a:	6823      	ldr	r3, [r4, #0]
 8007c0c:	6831      	ldr	r1, [r6, #0]
 8007c0e:	061f      	lsls	r7, r3, #24
 8007c10:	f851 5b04 	ldr.w	r5, [r1], #4
 8007c14:	d402      	bmi.n	8007c1c <_printf_i+0x188>
 8007c16:	065f      	lsls	r7, r3, #25
 8007c18:	bf48      	it	mi
 8007c1a:	b2ad      	uxthmi	r5, r5
 8007c1c:	6031      	str	r1, [r6, #0]
 8007c1e:	07d9      	lsls	r1, r3, #31
 8007c20:	bf44      	itt	mi
 8007c22:	f043 0320 	orrmi.w	r3, r3, #32
 8007c26:	6023      	strmi	r3, [r4, #0]
 8007c28:	b11d      	cbz	r5, 8007c32 <_printf_i+0x19e>
 8007c2a:	2310      	movs	r3, #16
 8007c2c:	e7ac      	b.n	8007b88 <_printf_i+0xf4>
 8007c2e:	4827      	ldr	r0, [pc, #156]	@ (8007ccc <_printf_i+0x238>)
 8007c30:	e7e9      	b.n	8007c06 <_printf_i+0x172>
 8007c32:	6823      	ldr	r3, [r4, #0]
 8007c34:	f023 0320 	bic.w	r3, r3, #32
 8007c38:	6023      	str	r3, [r4, #0]
 8007c3a:	e7f6      	b.n	8007c2a <_printf_i+0x196>
 8007c3c:	4616      	mov	r6, r2
 8007c3e:	e7bd      	b.n	8007bbc <_printf_i+0x128>
 8007c40:	6833      	ldr	r3, [r6, #0]
 8007c42:	6825      	ldr	r5, [r4, #0]
 8007c44:	6961      	ldr	r1, [r4, #20]
 8007c46:	1d18      	adds	r0, r3, #4
 8007c48:	6030      	str	r0, [r6, #0]
 8007c4a:	062e      	lsls	r6, r5, #24
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	d501      	bpl.n	8007c54 <_printf_i+0x1c0>
 8007c50:	6019      	str	r1, [r3, #0]
 8007c52:	e002      	b.n	8007c5a <_printf_i+0x1c6>
 8007c54:	0668      	lsls	r0, r5, #25
 8007c56:	d5fb      	bpl.n	8007c50 <_printf_i+0x1bc>
 8007c58:	8019      	strh	r1, [r3, #0]
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	6123      	str	r3, [r4, #16]
 8007c5e:	4616      	mov	r6, r2
 8007c60:	e7bc      	b.n	8007bdc <_printf_i+0x148>
 8007c62:	6833      	ldr	r3, [r6, #0]
 8007c64:	1d1a      	adds	r2, r3, #4
 8007c66:	6032      	str	r2, [r6, #0]
 8007c68:	681e      	ldr	r6, [r3, #0]
 8007c6a:	6862      	ldr	r2, [r4, #4]
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	4630      	mov	r0, r6
 8007c70:	f7f8 faae 	bl	80001d0 <memchr>
 8007c74:	b108      	cbz	r0, 8007c7a <_printf_i+0x1e6>
 8007c76:	1b80      	subs	r0, r0, r6
 8007c78:	6060      	str	r0, [r4, #4]
 8007c7a:	6863      	ldr	r3, [r4, #4]
 8007c7c:	6123      	str	r3, [r4, #16]
 8007c7e:	2300      	movs	r3, #0
 8007c80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c84:	e7aa      	b.n	8007bdc <_printf_i+0x148>
 8007c86:	6923      	ldr	r3, [r4, #16]
 8007c88:	4632      	mov	r2, r6
 8007c8a:	4649      	mov	r1, r9
 8007c8c:	4640      	mov	r0, r8
 8007c8e:	47d0      	blx	sl
 8007c90:	3001      	adds	r0, #1
 8007c92:	d0ad      	beq.n	8007bf0 <_printf_i+0x15c>
 8007c94:	6823      	ldr	r3, [r4, #0]
 8007c96:	079b      	lsls	r3, r3, #30
 8007c98:	d413      	bmi.n	8007cc2 <_printf_i+0x22e>
 8007c9a:	68e0      	ldr	r0, [r4, #12]
 8007c9c:	9b03      	ldr	r3, [sp, #12]
 8007c9e:	4298      	cmp	r0, r3
 8007ca0:	bfb8      	it	lt
 8007ca2:	4618      	movlt	r0, r3
 8007ca4:	e7a6      	b.n	8007bf4 <_printf_i+0x160>
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	4632      	mov	r2, r6
 8007caa:	4649      	mov	r1, r9
 8007cac:	4640      	mov	r0, r8
 8007cae:	47d0      	blx	sl
 8007cb0:	3001      	adds	r0, #1
 8007cb2:	d09d      	beq.n	8007bf0 <_printf_i+0x15c>
 8007cb4:	3501      	adds	r5, #1
 8007cb6:	68e3      	ldr	r3, [r4, #12]
 8007cb8:	9903      	ldr	r1, [sp, #12]
 8007cba:	1a5b      	subs	r3, r3, r1
 8007cbc:	42ab      	cmp	r3, r5
 8007cbe:	dcf2      	bgt.n	8007ca6 <_printf_i+0x212>
 8007cc0:	e7eb      	b.n	8007c9a <_printf_i+0x206>
 8007cc2:	2500      	movs	r5, #0
 8007cc4:	f104 0619 	add.w	r6, r4, #25
 8007cc8:	e7f5      	b.n	8007cb6 <_printf_i+0x222>
 8007cca:	bf00      	nop
 8007ccc:	0800bde0 	.word	0x0800bde0
 8007cd0:	0800bdf1 	.word	0x0800bdf1

08007cd4 <_scanf_float>:
 8007cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cd8:	b087      	sub	sp, #28
 8007cda:	4617      	mov	r7, r2
 8007cdc:	9303      	str	r3, [sp, #12]
 8007cde:	688b      	ldr	r3, [r1, #8]
 8007ce0:	1e5a      	subs	r2, r3, #1
 8007ce2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007ce6:	bf81      	itttt	hi
 8007ce8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007cec:	eb03 0b05 	addhi.w	fp, r3, r5
 8007cf0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007cf4:	608b      	strhi	r3, [r1, #8]
 8007cf6:	680b      	ldr	r3, [r1, #0]
 8007cf8:	460a      	mov	r2, r1
 8007cfa:	f04f 0500 	mov.w	r5, #0
 8007cfe:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007d02:	f842 3b1c 	str.w	r3, [r2], #28
 8007d06:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007d0a:	4680      	mov	r8, r0
 8007d0c:	460c      	mov	r4, r1
 8007d0e:	bf98      	it	ls
 8007d10:	f04f 0b00 	movls.w	fp, #0
 8007d14:	9201      	str	r2, [sp, #4]
 8007d16:	4616      	mov	r6, r2
 8007d18:	46aa      	mov	sl, r5
 8007d1a:	46a9      	mov	r9, r5
 8007d1c:	9502      	str	r5, [sp, #8]
 8007d1e:	68a2      	ldr	r2, [r4, #8]
 8007d20:	b152      	cbz	r2, 8007d38 <_scanf_float+0x64>
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	2b4e      	cmp	r3, #78	@ 0x4e
 8007d28:	d864      	bhi.n	8007df4 <_scanf_float+0x120>
 8007d2a:	2b40      	cmp	r3, #64	@ 0x40
 8007d2c:	d83c      	bhi.n	8007da8 <_scanf_float+0xd4>
 8007d2e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007d32:	b2c8      	uxtb	r0, r1
 8007d34:	280e      	cmp	r0, #14
 8007d36:	d93a      	bls.n	8007dae <_scanf_float+0xda>
 8007d38:	f1b9 0f00 	cmp.w	r9, #0
 8007d3c:	d003      	beq.n	8007d46 <_scanf_float+0x72>
 8007d3e:	6823      	ldr	r3, [r4, #0]
 8007d40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d44:	6023      	str	r3, [r4, #0]
 8007d46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d4a:	f1ba 0f01 	cmp.w	sl, #1
 8007d4e:	f200 8117 	bhi.w	8007f80 <_scanf_float+0x2ac>
 8007d52:	9b01      	ldr	r3, [sp, #4]
 8007d54:	429e      	cmp	r6, r3
 8007d56:	f200 8108 	bhi.w	8007f6a <_scanf_float+0x296>
 8007d5a:	2001      	movs	r0, #1
 8007d5c:	b007      	add	sp, #28
 8007d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d62:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007d66:	2a0d      	cmp	r2, #13
 8007d68:	d8e6      	bhi.n	8007d38 <_scanf_float+0x64>
 8007d6a:	a101      	add	r1, pc, #4	@ (adr r1, 8007d70 <_scanf_float+0x9c>)
 8007d6c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007d70:	08007eb7 	.word	0x08007eb7
 8007d74:	08007d39 	.word	0x08007d39
 8007d78:	08007d39 	.word	0x08007d39
 8007d7c:	08007d39 	.word	0x08007d39
 8007d80:	08007f17 	.word	0x08007f17
 8007d84:	08007eef 	.word	0x08007eef
 8007d88:	08007d39 	.word	0x08007d39
 8007d8c:	08007d39 	.word	0x08007d39
 8007d90:	08007ec5 	.word	0x08007ec5
 8007d94:	08007d39 	.word	0x08007d39
 8007d98:	08007d39 	.word	0x08007d39
 8007d9c:	08007d39 	.word	0x08007d39
 8007da0:	08007d39 	.word	0x08007d39
 8007da4:	08007e7d 	.word	0x08007e7d
 8007da8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007dac:	e7db      	b.n	8007d66 <_scanf_float+0x92>
 8007dae:	290e      	cmp	r1, #14
 8007db0:	d8c2      	bhi.n	8007d38 <_scanf_float+0x64>
 8007db2:	a001      	add	r0, pc, #4	@ (adr r0, 8007db8 <_scanf_float+0xe4>)
 8007db4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007db8:	08007e6d 	.word	0x08007e6d
 8007dbc:	08007d39 	.word	0x08007d39
 8007dc0:	08007e6d 	.word	0x08007e6d
 8007dc4:	08007f03 	.word	0x08007f03
 8007dc8:	08007d39 	.word	0x08007d39
 8007dcc:	08007e15 	.word	0x08007e15
 8007dd0:	08007e53 	.word	0x08007e53
 8007dd4:	08007e53 	.word	0x08007e53
 8007dd8:	08007e53 	.word	0x08007e53
 8007ddc:	08007e53 	.word	0x08007e53
 8007de0:	08007e53 	.word	0x08007e53
 8007de4:	08007e53 	.word	0x08007e53
 8007de8:	08007e53 	.word	0x08007e53
 8007dec:	08007e53 	.word	0x08007e53
 8007df0:	08007e53 	.word	0x08007e53
 8007df4:	2b6e      	cmp	r3, #110	@ 0x6e
 8007df6:	d809      	bhi.n	8007e0c <_scanf_float+0x138>
 8007df8:	2b60      	cmp	r3, #96	@ 0x60
 8007dfa:	d8b2      	bhi.n	8007d62 <_scanf_float+0x8e>
 8007dfc:	2b54      	cmp	r3, #84	@ 0x54
 8007dfe:	d07b      	beq.n	8007ef8 <_scanf_float+0x224>
 8007e00:	2b59      	cmp	r3, #89	@ 0x59
 8007e02:	d199      	bne.n	8007d38 <_scanf_float+0x64>
 8007e04:	2d07      	cmp	r5, #7
 8007e06:	d197      	bne.n	8007d38 <_scanf_float+0x64>
 8007e08:	2508      	movs	r5, #8
 8007e0a:	e02c      	b.n	8007e66 <_scanf_float+0x192>
 8007e0c:	2b74      	cmp	r3, #116	@ 0x74
 8007e0e:	d073      	beq.n	8007ef8 <_scanf_float+0x224>
 8007e10:	2b79      	cmp	r3, #121	@ 0x79
 8007e12:	e7f6      	b.n	8007e02 <_scanf_float+0x12e>
 8007e14:	6821      	ldr	r1, [r4, #0]
 8007e16:	05c8      	lsls	r0, r1, #23
 8007e18:	d51b      	bpl.n	8007e52 <_scanf_float+0x17e>
 8007e1a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007e1e:	6021      	str	r1, [r4, #0]
 8007e20:	f109 0901 	add.w	r9, r9, #1
 8007e24:	f1bb 0f00 	cmp.w	fp, #0
 8007e28:	d003      	beq.n	8007e32 <_scanf_float+0x15e>
 8007e2a:	3201      	adds	r2, #1
 8007e2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007e30:	60a2      	str	r2, [r4, #8]
 8007e32:	68a3      	ldr	r3, [r4, #8]
 8007e34:	3b01      	subs	r3, #1
 8007e36:	60a3      	str	r3, [r4, #8]
 8007e38:	6923      	ldr	r3, [r4, #16]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	6123      	str	r3, [r4, #16]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	3b01      	subs	r3, #1
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	607b      	str	r3, [r7, #4]
 8007e46:	f340 8087 	ble.w	8007f58 <_scanf_float+0x284>
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	603b      	str	r3, [r7, #0]
 8007e50:	e765      	b.n	8007d1e <_scanf_float+0x4a>
 8007e52:	eb1a 0105 	adds.w	r1, sl, r5
 8007e56:	f47f af6f 	bne.w	8007d38 <_scanf_float+0x64>
 8007e5a:	6822      	ldr	r2, [r4, #0]
 8007e5c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007e60:	6022      	str	r2, [r4, #0]
 8007e62:	460d      	mov	r5, r1
 8007e64:	468a      	mov	sl, r1
 8007e66:	f806 3b01 	strb.w	r3, [r6], #1
 8007e6a:	e7e2      	b.n	8007e32 <_scanf_float+0x15e>
 8007e6c:	6822      	ldr	r2, [r4, #0]
 8007e6e:	0610      	lsls	r0, r2, #24
 8007e70:	f57f af62 	bpl.w	8007d38 <_scanf_float+0x64>
 8007e74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007e78:	6022      	str	r2, [r4, #0]
 8007e7a:	e7f4      	b.n	8007e66 <_scanf_float+0x192>
 8007e7c:	f1ba 0f00 	cmp.w	sl, #0
 8007e80:	d10e      	bne.n	8007ea0 <_scanf_float+0x1cc>
 8007e82:	f1b9 0f00 	cmp.w	r9, #0
 8007e86:	d10e      	bne.n	8007ea6 <_scanf_float+0x1d2>
 8007e88:	6822      	ldr	r2, [r4, #0]
 8007e8a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007e8e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007e92:	d108      	bne.n	8007ea6 <_scanf_float+0x1d2>
 8007e94:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007e98:	6022      	str	r2, [r4, #0]
 8007e9a:	f04f 0a01 	mov.w	sl, #1
 8007e9e:	e7e2      	b.n	8007e66 <_scanf_float+0x192>
 8007ea0:	f1ba 0f02 	cmp.w	sl, #2
 8007ea4:	d055      	beq.n	8007f52 <_scanf_float+0x27e>
 8007ea6:	2d01      	cmp	r5, #1
 8007ea8:	d002      	beq.n	8007eb0 <_scanf_float+0x1dc>
 8007eaa:	2d04      	cmp	r5, #4
 8007eac:	f47f af44 	bne.w	8007d38 <_scanf_float+0x64>
 8007eb0:	3501      	adds	r5, #1
 8007eb2:	b2ed      	uxtb	r5, r5
 8007eb4:	e7d7      	b.n	8007e66 <_scanf_float+0x192>
 8007eb6:	f1ba 0f01 	cmp.w	sl, #1
 8007eba:	f47f af3d 	bne.w	8007d38 <_scanf_float+0x64>
 8007ebe:	f04f 0a02 	mov.w	sl, #2
 8007ec2:	e7d0      	b.n	8007e66 <_scanf_float+0x192>
 8007ec4:	b97d      	cbnz	r5, 8007ee6 <_scanf_float+0x212>
 8007ec6:	f1b9 0f00 	cmp.w	r9, #0
 8007eca:	f47f af38 	bne.w	8007d3e <_scanf_float+0x6a>
 8007ece:	6822      	ldr	r2, [r4, #0]
 8007ed0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007ed4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007ed8:	f040 8108 	bne.w	80080ec <_scanf_float+0x418>
 8007edc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007ee0:	6022      	str	r2, [r4, #0]
 8007ee2:	2501      	movs	r5, #1
 8007ee4:	e7bf      	b.n	8007e66 <_scanf_float+0x192>
 8007ee6:	2d03      	cmp	r5, #3
 8007ee8:	d0e2      	beq.n	8007eb0 <_scanf_float+0x1dc>
 8007eea:	2d05      	cmp	r5, #5
 8007eec:	e7de      	b.n	8007eac <_scanf_float+0x1d8>
 8007eee:	2d02      	cmp	r5, #2
 8007ef0:	f47f af22 	bne.w	8007d38 <_scanf_float+0x64>
 8007ef4:	2503      	movs	r5, #3
 8007ef6:	e7b6      	b.n	8007e66 <_scanf_float+0x192>
 8007ef8:	2d06      	cmp	r5, #6
 8007efa:	f47f af1d 	bne.w	8007d38 <_scanf_float+0x64>
 8007efe:	2507      	movs	r5, #7
 8007f00:	e7b1      	b.n	8007e66 <_scanf_float+0x192>
 8007f02:	6822      	ldr	r2, [r4, #0]
 8007f04:	0591      	lsls	r1, r2, #22
 8007f06:	f57f af17 	bpl.w	8007d38 <_scanf_float+0x64>
 8007f0a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007f0e:	6022      	str	r2, [r4, #0]
 8007f10:	f8cd 9008 	str.w	r9, [sp, #8]
 8007f14:	e7a7      	b.n	8007e66 <_scanf_float+0x192>
 8007f16:	6822      	ldr	r2, [r4, #0]
 8007f18:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007f1c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007f20:	d006      	beq.n	8007f30 <_scanf_float+0x25c>
 8007f22:	0550      	lsls	r0, r2, #21
 8007f24:	f57f af08 	bpl.w	8007d38 <_scanf_float+0x64>
 8007f28:	f1b9 0f00 	cmp.w	r9, #0
 8007f2c:	f000 80de 	beq.w	80080ec <_scanf_float+0x418>
 8007f30:	0591      	lsls	r1, r2, #22
 8007f32:	bf58      	it	pl
 8007f34:	9902      	ldrpl	r1, [sp, #8]
 8007f36:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007f3a:	bf58      	it	pl
 8007f3c:	eba9 0101 	subpl.w	r1, r9, r1
 8007f40:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007f44:	bf58      	it	pl
 8007f46:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007f4a:	6022      	str	r2, [r4, #0]
 8007f4c:	f04f 0900 	mov.w	r9, #0
 8007f50:	e789      	b.n	8007e66 <_scanf_float+0x192>
 8007f52:	f04f 0a03 	mov.w	sl, #3
 8007f56:	e786      	b.n	8007e66 <_scanf_float+0x192>
 8007f58:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007f5c:	4639      	mov	r1, r7
 8007f5e:	4640      	mov	r0, r8
 8007f60:	4798      	blx	r3
 8007f62:	2800      	cmp	r0, #0
 8007f64:	f43f aedb 	beq.w	8007d1e <_scanf_float+0x4a>
 8007f68:	e6e6      	b.n	8007d38 <_scanf_float+0x64>
 8007f6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007f6e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007f72:	463a      	mov	r2, r7
 8007f74:	4640      	mov	r0, r8
 8007f76:	4798      	blx	r3
 8007f78:	6923      	ldr	r3, [r4, #16]
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	6123      	str	r3, [r4, #16]
 8007f7e:	e6e8      	b.n	8007d52 <_scanf_float+0x7e>
 8007f80:	1e6b      	subs	r3, r5, #1
 8007f82:	2b06      	cmp	r3, #6
 8007f84:	d824      	bhi.n	8007fd0 <_scanf_float+0x2fc>
 8007f86:	2d02      	cmp	r5, #2
 8007f88:	d836      	bhi.n	8007ff8 <_scanf_float+0x324>
 8007f8a:	9b01      	ldr	r3, [sp, #4]
 8007f8c:	429e      	cmp	r6, r3
 8007f8e:	f67f aee4 	bls.w	8007d5a <_scanf_float+0x86>
 8007f92:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007f96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007f9a:	463a      	mov	r2, r7
 8007f9c:	4640      	mov	r0, r8
 8007f9e:	4798      	blx	r3
 8007fa0:	6923      	ldr	r3, [r4, #16]
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	6123      	str	r3, [r4, #16]
 8007fa6:	e7f0      	b.n	8007f8a <_scanf_float+0x2b6>
 8007fa8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007fac:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007fb0:	463a      	mov	r2, r7
 8007fb2:	4640      	mov	r0, r8
 8007fb4:	4798      	blx	r3
 8007fb6:	6923      	ldr	r3, [r4, #16]
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	6123      	str	r3, [r4, #16]
 8007fbc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007fc0:	fa5f fa8a 	uxtb.w	sl, sl
 8007fc4:	f1ba 0f02 	cmp.w	sl, #2
 8007fc8:	d1ee      	bne.n	8007fa8 <_scanf_float+0x2d4>
 8007fca:	3d03      	subs	r5, #3
 8007fcc:	b2ed      	uxtb	r5, r5
 8007fce:	1b76      	subs	r6, r6, r5
 8007fd0:	6823      	ldr	r3, [r4, #0]
 8007fd2:	05da      	lsls	r2, r3, #23
 8007fd4:	d530      	bpl.n	8008038 <_scanf_float+0x364>
 8007fd6:	055b      	lsls	r3, r3, #21
 8007fd8:	d511      	bpl.n	8007ffe <_scanf_float+0x32a>
 8007fda:	9b01      	ldr	r3, [sp, #4]
 8007fdc:	429e      	cmp	r6, r3
 8007fde:	f67f aebc 	bls.w	8007d5a <_scanf_float+0x86>
 8007fe2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007fe6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007fea:	463a      	mov	r2, r7
 8007fec:	4640      	mov	r0, r8
 8007fee:	4798      	blx	r3
 8007ff0:	6923      	ldr	r3, [r4, #16]
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	6123      	str	r3, [r4, #16]
 8007ff6:	e7f0      	b.n	8007fda <_scanf_float+0x306>
 8007ff8:	46aa      	mov	sl, r5
 8007ffa:	46b3      	mov	fp, r6
 8007ffc:	e7de      	b.n	8007fbc <_scanf_float+0x2e8>
 8007ffe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008002:	6923      	ldr	r3, [r4, #16]
 8008004:	2965      	cmp	r1, #101	@ 0x65
 8008006:	f103 33ff 	add.w	r3, r3, #4294967295
 800800a:	f106 35ff 	add.w	r5, r6, #4294967295
 800800e:	6123      	str	r3, [r4, #16]
 8008010:	d00c      	beq.n	800802c <_scanf_float+0x358>
 8008012:	2945      	cmp	r1, #69	@ 0x45
 8008014:	d00a      	beq.n	800802c <_scanf_float+0x358>
 8008016:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800801a:	463a      	mov	r2, r7
 800801c:	4640      	mov	r0, r8
 800801e:	4798      	blx	r3
 8008020:	6923      	ldr	r3, [r4, #16]
 8008022:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008026:	3b01      	subs	r3, #1
 8008028:	1eb5      	subs	r5, r6, #2
 800802a:	6123      	str	r3, [r4, #16]
 800802c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008030:	463a      	mov	r2, r7
 8008032:	4640      	mov	r0, r8
 8008034:	4798      	blx	r3
 8008036:	462e      	mov	r6, r5
 8008038:	6822      	ldr	r2, [r4, #0]
 800803a:	f012 0210 	ands.w	r2, r2, #16
 800803e:	d001      	beq.n	8008044 <_scanf_float+0x370>
 8008040:	2000      	movs	r0, #0
 8008042:	e68b      	b.n	8007d5c <_scanf_float+0x88>
 8008044:	7032      	strb	r2, [r6, #0]
 8008046:	6823      	ldr	r3, [r4, #0]
 8008048:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800804c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008050:	d11c      	bne.n	800808c <_scanf_float+0x3b8>
 8008052:	9b02      	ldr	r3, [sp, #8]
 8008054:	454b      	cmp	r3, r9
 8008056:	eba3 0209 	sub.w	r2, r3, r9
 800805a:	d123      	bne.n	80080a4 <_scanf_float+0x3d0>
 800805c:	9901      	ldr	r1, [sp, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	4640      	mov	r0, r8
 8008062:	f002 fd61 	bl	800ab28 <_strtod_r>
 8008066:	9b03      	ldr	r3, [sp, #12]
 8008068:	6821      	ldr	r1, [r4, #0]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f011 0f02 	tst.w	r1, #2
 8008070:	ec57 6b10 	vmov	r6, r7, d0
 8008074:	f103 0204 	add.w	r2, r3, #4
 8008078:	d01f      	beq.n	80080ba <_scanf_float+0x3e6>
 800807a:	9903      	ldr	r1, [sp, #12]
 800807c:	600a      	str	r2, [r1, #0]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	e9c3 6700 	strd	r6, r7, [r3]
 8008084:	68e3      	ldr	r3, [r4, #12]
 8008086:	3301      	adds	r3, #1
 8008088:	60e3      	str	r3, [r4, #12]
 800808a:	e7d9      	b.n	8008040 <_scanf_float+0x36c>
 800808c:	9b04      	ldr	r3, [sp, #16]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d0e4      	beq.n	800805c <_scanf_float+0x388>
 8008092:	9905      	ldr	r1, [sp, #20]
 8008094:	230a      	movs	r3, #10
 8008096:	3101      	adds	r1, #1
 8008098:	4640      	mov	r0, r8
 800809a:	f002 fdc5 	bl	800ac28 <_strtol_r>
 800809e:	9b04      	ldr	r3, [sp, #16]
 80080a0:	9e05      	ldr	r6, [sp, #20]
 80080a2:	1ac2      	subs	r2, r0, r3
 80080a4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80080a8:	429e      	cmp	r6, r3
 80080aa:	bf28      	it	cs
 80080ac:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80080b0:	4910      	ldr	r1, [pc, #64]	@ (80080f4 <_scanf_float+0x420>)
 80080b2:	4630      	mov	r0, r6
 80080b4:	f000 f954 	bl	8008360 <siprintf>
 80080b8:	e7d0      	b.n	800805c <_scanf_float+0x388>
 80080ba:	f011 0f04 	tst.w	r1, #4
 80080be:	9903      	ldr	r1, [sp, #12]
 80080c0:	600a      	str	r2, [r1, #0]
 80080c2:	d1dc      	bne.n	800807e <_scanf_float+0x3aa>
 80080c4:	681d      	ldr	r5, [r3, #0]
 80080c6:	4632      	mov	r2, r6
 80080c8:	463b      	mov	r3, r7
 80080ca:	4630      	mov	r0, r6
 80080cc:	4639      	mov	r1, r7
 80080ce:	f7f8 fd2d 	bl	8000b2c <__aeabi_dcmpun>
 80080d2:	b128      	cbz	r0, 80080e0 <_scanf_float+0x40c>
 80080d4:	4808      	ldr	r0, [pc, #32]	@ (80080f8 <_scanf_float+0x424>)
 80080d6:	f000 fb1f 	bl	8008718 <nanf>
 80080da:	ed85 0a00 	vstr	s0, [r5]
 80080de:	e7d1      	b.n	8008084 <_scanf_float+0x3b0>
 80080e0:	4630      	mov	r0, r6
 80080e2:	4639      	mov	r1, r7
 80080e4:	f7f8 fd80 	bl	8000be8 <__aeabi_d2f>
 80080e8:	6028      	str	r0, [r5, #0]
 80080ea:	e7cb      	b.n	8008084 <_scanf_float+0x3b0>
 80080ec:	f04f 0900 	mov.w	r9, #0
 80080f0:	e629      	b.n	8007d46 <_scanf_float+0x72>
 80080f2:	bf00      	nop
 80080f4:	0800be02 	.word	0x0800be02
 80080f8:	0800c19d 	.word	0x0800c19d

080080fc <std>:
 80080fc:	2300      	movs	r3, #0
 80080fe:	b510      	push	{r4, lr}
 8008100:	4604      	mov	r4, r0
 8008102:	e9c0 3300 	strd	r3, r3, [r0]
 8008106:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800810a:	6083      	str	r3, [r0, #8]
 800810c:	8181      	strh	r1, [r0, #12]
 800810e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008110:	81c2      	strh	r2, [r0, #14]
 8008112:	6183      	str	r3, [r0, #24]
 8008114:	4619      	mov	r1, r3
 8008116:	2208      	movs	r2, #8
 8008118:	305c      	adds	r0, #92	@ 0x5c
 800811a:	f000 fa19 	bl	8008550 <memset>
 800811e:	4b0d      	ldr	r3, [pc, #52]	@ (8008154 <std+0x58>)
 8008120:	6263      	str	r3, [r4, #36]	@ 0x24
 8008122:	4b0d      	ldr	r3, [pc, #52]	@ (8008158 <std+0x5c>)
 8008124:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008126:	4b0d      	ldr	r3, [pc, #52]	@ (800815c <std+0x60>)
 8008128:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800812a:	4b0d      	ldr	r3, [pc, #52]	@ (8008160 <std+0x64>)
 800812c:	6323      	str	r3, [r4, #48]	@ 0x30
 800812e:	4b0d      	ldr	r3, [pc, #52]	@ (8008164 <std+0x68>)
 8008130:	6224      	str	r4, [r4, #32]
 8008132:	429c      	cmp	r4, r3
 8008134:	d006      	beq.n	8008144 <std+0x48>
 8008136:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800813a:	4294      	cmp	r4, r2
 800813c:	d002      	beq.n	8008144 <std+0x48>
 800813e:	33d0      	adds	r3, #208	@ 0xd0
 8008140:	429c      	cmp	r4, r3
 8008142:	d105      	bne.n	8008150 <std+0x54>
 8008144:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800814c:	f000 bad2 	b.w	80086f4 <__retarget_lock_init_recursive>
 8008150:	bd10      	pop	{r4, pc}
 8008152:	bf00      	nop
 8008154:	080083a1 	.word	0x080083a1
 8008158:	080083c3 	.word	0x080083c3
 800815c:	080083fb 	.word	0x080083fb
 8008160:	0800841f 	.word	0x0800841f
 8008164:	200047ac 	.word	0x200047ac

08008168 <stdio_exit_handler>:
 8008168:	4a02      	ldr	r2, [pc, #8]	@ (8008174 <stdio_exit_handler+0xc>)
 800816a:	4903      	ldr	r1, [pc, #12]	@ (8008178 <stdio_exit_handler+0x10>)
 800816c:	4803      	ldr	r0, [pc, #12]	@ (800817c <stdio_exit_handler+0x14>)
 800816e:	f000 b869 	b.w	8008244 <_fwalk_sglue>
 8008172:	bf00      	nop
 8008174:	20000010 	.word	0x20000010
 8008178:	0800b269 	.word	0x0800b269
 800817c:	20000020 	.word	0x20000020

08008180 <cleanup_stdio>:
 8008180:	6841      	ldr	r1, [r0, #4]
 8008182:	4b0c      	ldr	r3, [pc, #48]	@ (80081b4 <cleanup_stdio+0x34>)
 8008184:	4299      	cmp	r1, r3
 8008186:	b510      	push	{r4, lr}
 8008188:	4604      	mov	r4, r0
 800818a:	d001      	beq.n	8008190 <cleanup_stdio+0x10>
 800818c:	f003 f86c 	bl	800b268 <_fflush_r>
 8008190:	68a1      	ldr	r1, [r4, #8]
 8008192:	4b09      	ldr	r3, [pc, #36]	@ (80081b8 <cleanup_stdio+0x38>)
 8008194:	4299      	cmp	r1, r3
 8008196:	d002      	beq.n	800819e <cleanup_stdio+0x1e>
 8008198:	4620      	mov	r0, r4
 800819a:	f003 f865 	bl	800b268 <_fflush_r>
 800819e:	68e1      	ldr	r1, [r4, #12]
 80081a0:	4b06      	ldr	r3, [pc, #24]	@ (80081bc <cleanup_stdio+0x3c>)
 80081a2:	4299      	cmp	r1, r3
 80081a4:	d004      	beq.n	80081b0 <cleanup_stdio+0x30>
 80081a6:	4620      	mov	r0, r4
 80081a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081ac:	f003 b85c 	b.w	800b268 <_fflush_r>
 80081b0:	bd10      	pop	{r4, pc}
 80081b2:	bf00      	nop
 80081b4:	200047ac 	.word	0x200047ac
 80081b8:	20004814 	.word	0x20004814
 80081bc:	2000487c 	.word	0x2000487c

080081c0 <global_stdio_init.part.0>:
 80081c0:	b510      	push	{r4, lr}
 80081c2:	4b0b      	ldr	r3, [pc, #44]	@ (80081f0 <global_stdio_init.part.0+0x30>)
 80081c4:	4c0b      	ldr	r4, [pc, #44]	@ (80081f4 <global_stdio_init.part.0+0x34>)
 80081c6:	4a0c      	ldr	r2, [pc, #48]	@ (80081f8 <global_stdio_init.part.0+0x38>)
 80081c8:	601a      	str	r2, [r3, #0]
 80081ca:	4620      	mov	r0, r4
 80081cc:	2200      	movs	r2, #0
 80081ce:	2104      	movs	r1, #4
 80081d0:	f7ff ff94 	bl	80080fc <std>
 80081d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80081d8:	2201      	movs	r2, #1
 80081da:	2109      	movs	r1, #9
 80081dc:	f7ff ff8e 	bl	80080fc <std>
 80081e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80081e4:	2202      	movs	r2, #2
 80081e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081ea:	2112      	movs	r1, #18
 80081ec:	f7ff bf86 	b.w	80080fc <std>
 80081f0:	200048e4 	.word	0x200048e4
 80081f4:	200047ac 	.word	0x200047ac
 80081f8:	08008169 	.word	0x08008169

080081fc <__sfp_lock_acquire>:
 80081fc:	4801      	ldr	r0, [pc, #4]	@ (8008204 <__sfp_lock_acquire+0x8>)
 80081fe:	f000 ba7a 	b.w	80086f6 <__retarget_lock_acquire_recursive>
 8008202:	bf00      	nop
 8008204:	200048ed 	.word	0x200048ed

08008208 <__sfp_lock_release>:
 8008208:	4801      	ldr	r0, [pc, #4]	@ (8008210 <__sfp_lock_release+0x8>)
 800820a:	f000 ba75 	b.w	80086f8 <__retarget_lock_release_recursive>
 800820e:	bf00      	nop
 8008210:	200048ed 	.word	0x200048ed

08008214 <__sinit>:
 8008214:	b510      	push	{r4, lr}
 8008216:	4604      	mov	r4, r0
 8008218:	f7ff fff0 	bl	80081fc <__sfp_lock_acquire>
 800821c:	6a23      	ldr	r3, [r4, #32]
 800821e:	b11b      	cbz	r3, 8008228 <__sinit+0x14>
 8008220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008224:	f7ff bff0 	b.w	8008208 <__sfp_lock_release>
 8008228:	4b04      	ldr	r3, [pc, #16]	@ (800823c <__sinit+0x28>)
 800822a:	6223      	str	r3, [r4, #32]
 800822c:	4b04      	ldr	r3, [pc, #16]	@ (8008240 <__sinit+0x2c>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d1f5      	bne.n	8008220 <__sinit+0xc>
 8008234:	f7ff ffc4 	bl	80081c0 <global_stdio_init.part.0>
 8008238:	e7f2      	b.n	8008220 <__sinit+0xc>
 800823a:	bf00      	nop
 800823c:	08008181 	.word	0x08008181
 8008240:	200048e4 	.word	0x200048e4

08008244 <_fwalk_sglue>:
 8008244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008248:	4607      	mov	r7, r0
 800824a:	4688      	mov	r8, r1
 800824c:	4614      	mov	r4, r2
 800824e:	2600      	movs	r6, #0
 8008250:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008254:	f1b9 0901 	subs.w	r9, r9, #1
 8008258:	d505      	bpl.n	8008266 <_fwalk_sglue+0x22>
 800825a:	6824      	ldr	r4, [r4, #0]
 800825c:	2c00      	cmp	r4, #0
 800825e:	d1f7      	bne.n	8008250 <_fwalk_sglue+0xc>
 8008260:	4630      	mov	r0, r6
 8008262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008266:	89ab      	ldrh	r3, [r5, #12]
 8008268:	2b01      	cmp	r3, #1
 800826a:	d907      	bls.n	800827c <_fwalk_sglue+0x38>
 800826c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008270:	3301      	adds	r3, #1
 8008272:	d003      	beq.n	800827c <_fwalk_sglue+0x38>
 8008274:	4629      	mov	r1, r5
 8008276:	4638      	mov	r0, r7
 8008278:	47c0      	blx	r8
 800827a:	4306      	orrs	r6, r0
 800827c:	3568      	adds	r5, #104	@ 0x68
 800827e:	e7e9      	b.n	8008254 <_fwalk_sglue+0x10>

08008280 <iprintf>:
 8008280:	b40f      	push	{r0, r1, r2, r3}
 8008282:	b507      	push	{r0, r1, r2, lr}
 8008284:	4906      	ldr	r1, [pc, #24]	@ (80082a0 <iprintf+0x20>)
 8008286:	ab04      	add	r3, sp, #16
 8008288:	6808      	ldr	r0, [r1, #0]
 800828a:	f853 2b04 	ldr.w	r2, [r3], #4
 800828e:	6881      	ldr	r1, [r0, #8]
 8008290:	9301      	str	r3, [sp, #4]
 8008292:	f002 fe4d 	bl	800af30 <_vfiprintf_r>
 8008296:	b003      	add	sp, #12
 8008298:	f85d eb04 	ldr.w	lr, [sp], #4
 800829c:	b004      	add	sp, #16
 800829e:	4770      	bx	lr
 80082a0:	2000001c 	.word	0x2000001c

080082a4 <_puts_r>:
 80082a4:	6a03      	ldr	r3, [r0, #32]
 80082a6:	b570      	push	{r4, r5, r6, lr}
 80082a8:	6884      	ldr	r4, [r0, #8]
 80082aa:	4605      	mov	r5, r0
 80082ac:	460e      	mov	r6, r1
 80082ae:	b90b      	cbnz	r3, 80082b4 <_puts_r+0x10>
 80082b0:	f7ff ffb0 	bl	8008214 <__sinit>
 80082b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80082b6:	07db      	lsls	r3, r3, #31
 80082b8:	d405      	bmi.n	80082c6 <_puts_r+0x22>
 80082ba:	89a3      	ldrh	r3, [r4, #12]
 80082bc:	0598      	lsls	r0, r3, #22
 80082be:	d402      	bmi.n	80082c6 <_puts_r+0x22>
 80082c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082c2:	f000 fa18 	bl	80086f6 <__retarget_lock_acquire_recursive>
 80082c6:	89a3      	ldrh	r3, [r4, #12]
 80082c8:	0719      	lsls	r1, r3, #28
 80082ca:	d502      	bpl.n	80082d2 <_puts_r+0x2e>
 80082cc:	6923      	ldr	r3, [r4, #16]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d135      	bne.n	800833e <_puts_r+0x9a>
 80082d2:	4621      	mov	r1, r4
 80082d4:	4628      	mov	r0, r5
 80082d6:	f000 f8e5 	bl	80084a4 <__swsetup_r>
 80082da:	b380      	cbz	r0, 800833e <_puts_r+0x9a>
 80082dc:	f04f 35ff 	mov.w	r5, #4294967295
 80082e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80082e2:	07da      	lsls	r2, r3, #31
 80082e4:	d405      	bmi.n	80082f2 <_puts_r+0x4e>
 80082e6:	89a3      	ldrh	r3, [r4, #12]
 80082e8:	059b      	lsls	r3, r3, #22
 80082ea:	d402      	bmi.n	80082f2 <_puts_r+0x4e>
 80082ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082ee:	f000 fa03 	bl	80086f8 <__retarget_lock_release_recursive>
 80082f2:	4628      	mov	r0, r5
 80082f4:	bd70      	pop	{r4, r5, r6, pc}
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	da04      	bge.n	8008304 <_puts_r+0x60>
 80082fa:	69a2      	ldr	r2, [r4, #24]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	dc17      	bgt.n	8008330 <_puts_r+0x8c>
 8008300:	290a      	cmp	r1, #10
 8008302:	d015      	beq.n	8008330 <_puts_r+0x8c>
 8008304:	6823      	ldr	r3, [r4, #0]
 8008306:	1c5a      	adds	r2, r3, #1
 8008308:	6022      	str	r2, [r4, #0]
 800830a:	7019      	strb	r1, [r3, #0]
 800830c:	68a3      	ldr	r3, [r4, #8]
 800830e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008312:	3b01      	subs	r3, #1
 8008314:	60a3      	str	r3, [r4, #8]
 8008316:	2900      	cmp	r1, #0
 8008318:	d1ed      	bne.n	80082f6 <_puts_r+0x52>
 800831a:	2b00      	cmp	r3, #0
 800831c:	da11      	bge.n	8008342 <_puts_r+0x9e>
 800831e:	4622      	mov	r2, r4
 8008320:	210a      	movs	r1, #10
 8008322:	4628      	mov	r0, r5
 8008324:	f000 f87f 	bl	8008426 <__swbuf_r>
 8008328:	3001      	adds	r0, #1
 800832a:	d0d7      	beq.n	80082dc <_puts_r+0x38>
 800832c:	250a      	movs	r5, #10
 800832e:	e7d7      	b.n	80082e0 <_puts_r+0x3c>
 8008330:	4622      	mov	r2, r4
 8008332:	4628      	mov	r0, r5
 8008334:	f000 f877 	bl	8008426 <__swbuf_r>
 8008338:	3001      	adds	r0, #1
 800833a:	d1e7      	bne.n	800830c <_puts_r+0x68>
 800833c:	e7ce      	b.n	80082dc <_puts_r+0x38>
 800833e:	3e01      	subs	r6, #1
 8008340:	e7e4      	b.n	800830c <_puts_r+0x68>
 8008342:	6823      	ldr	r3, [r4, #0]
 8008344:	1c5a      	adds	r2, r3, #1
 8008346:	6022      	str	r2, [r4, #0]
 8008348:	220a      	movs	r2, #10
 800834a:	701a      	strb	r2, [r3, #0]
 800834c:	e7ee      	b.n	800832c <_puts_r+0x88>
	...

08008350 <puts>:
 8008350:	4b02      	ldr	r3, [pc, #8]	@ (800835c <puts+0xc>)
 8008352:	4601      	mov	r1, r0
 8008354:	6818      	ldr	r0, [r3, #0]
 8008356:	f7ff bfa5 	b.w	80082a4 <_puts_r>
 800835a:	bf00      	nop
 800835c:	2000001c 	.word	0x2000001c

08008360 <siprintf>:
 8008360:	b40e      	push	{r1, r2, r3}
 8008362:	b500      	push	{lr}
 8008364:	b09c      	sub	sp, #112	@ 0x70
 8008366:	ab1d      	add	r3, sp, #116	@ 0x74
 8008368:	9002      	str	r0, [sp, #8]
 800836a:	9006      	str	r0, [sp, #24]
 800836c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008370:	4809      	ldr	r0, [pc, #36]	@ (8008398 <siprintf+0x38>)
 8008372:	9107      	str	r1, [sp, #28]
 8008374:	9104      	str	r1, [sp, #16]
 8008376:	4909      	ldr	r1, [pc, #36]	@ (800839c <siprintf+0x3c>)
 8008378:	f853 2b04 	ldr.w	r2, [r3], #4
 800837c:	9105      	str	r1, [sp, #20]
 800837e:	6800      	ldr	r0, [r0, #0]
 8008380:	9301      	str	r3, [sp, #4]
 8008382:	a902      	add	r1, sp, #8
 8008384:	f002 fcae 	bl	800ace4 <_svfiprintf_r>
 8008388:	9b02      	ldr	r3, [sp, #8]
 800838a:	2200      	movs	r2, #0
 800838c:	701a      	strb	r2, [r3, #0]
 800838e:	b01c      	add	sp, #112	@ 0x70
 8008390:	f85d eb04 	ldr.w	lr, [sp], #4
 8008394:	b003      	add	sp, #12
 8008396:	4770      	bx	lr
 8008398:	2000001c 	.word	0x2000001c
 800839c:	ffff0208 	.word	0xffff0208

080083a0 <__sread>:
 80083a0:	b510      	push	{r4, lr}
 80083a2:	460c      	mov	r4, r1
 80083a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083a8:	f000 f956 	bl	8008658 <_read_r>
 80083ac:	2800      	cmp	r0, #0
 80083ae:	bfab      	itete	ge
 80083b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80083b2:	89a3      	ldrhlt	r3, [r4, #12]
 80083b4:	181b      	addge	r3, r3, r0
 80083b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80083ba:	bfac      	ite	ge
 80083bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80083be:	81a3      	strhlt	r3, [r4, #12]
 80083c0:	bd10      	pop	{r4, pc}

080083c2 <__swrite>:
 80083c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083c6:	461f      	mov	r7, r3
 80083c8:	898b      	ldrh	r3, [r1, #12]
 80083ca:	05db      	lsls	r3, r3, #23
 80083cc:	4605      	mov	r5, r0
 80083ce:	460c      	mov	r4, r1
 80083d0:	4616      	mov	r6, r2
 80083d2:	d505      	bpl.n	80083e0 <__swrite+0x1e>
 80083d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083d8:	2302      	movs	r3, #2
 80083da:	2200      	movs	r2, #0
 80083dc:	f000 f92a 	bl	8008634 <_lseek_r>
 80083e0:	89a3      	ldrh	r3, [r4, #12]
 80083e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80083ea:	81a3      	strh	r3, [r4, #12]
 80083ec:	4632      	mov	r2, r6
 80083ee:	463b      	mov	r3, r7
 80083f0:	4628      	mov	r0, r5
 80083f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083f6:	f000 b941 	b.w	800867c <_write_r>

080083fa <__sseek>:
 80083fa:	b510      	push	{r4, lr}
 80083fc:	460c      	mov	r4, r1
 80083fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008402:	f000 f917 	bl	8008634 <_lseek_r>
 8008406:	1c43      	adds	r3, r0, #1
 8008408:	89a3      	ldrh	r3, [r4, #12]
 800840a:	bf15      	itete	ne
 800840c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800840e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008412:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008416:	81a3      	strheq	r3, [r4, #12]
 8008418:	bf18      	it	ne
 800841a:	81a3      	strhne	r3, [r4, #12]
 800841c:	bd10      	pop	{r4, pc}

0800841e <__sclose>:
 800841e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008422:	f000 b8a1 	b.w	8008568 <_close_r>

08008426 <__swbuf_r>:
 8008426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008428:	460e      	mov	r6, r1
 800842a:	4614      	mov	r4, r2
 800842c:	4605      	mov	r5, r0
 800842e:	b118      	cbz	r0, 8008438 <__swbuf_r+0x12>
 8008430:	6a03      	ldr	r3, [r0, #32]
 8008432:	b90b      	cbnz	r3, 8008438 <__swbuf_r+0x12>
 8008434:	f7ff feee 	bl	8008214 <__sinit>
 8008438:	69a3      	ldr	r3, [r4, #24]
 800843a:	60a3      	str	r3, [r4, #8]
 800843c:	89a3      	ldrh	r3, [r4, #12]
 800843e:	071a      	lsls	r2, r3, #28
 8008440:	d501      	bpl.n	8008446 <__swbuf_r+0x20>
 8008442:	6923      	ldr	r3, [r4, #16]
 8008444:	b943      	cbnz	r3, 8008458 <__swbuf_r+0x32>
 8008446:	4621      	mov	r1, r4
 8008448:	4628      	mov	r0, r5
 800844a:	f000 f82b 	bl	80084a4 <__swsetup_r>
 800844e:	b118      	cbz	r0, 8008458 <__swbuf_r+0x32>
 8008450:	f04f 37ff 	mov.w	r7, #4294967295
 8008454:	4638      	mov	r0, r7
 8008456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008458:	6823      	ldr	r3, [r4, #0]
 800845a:	6922      	ldr	r2, [r4, #16]
 800845c:	1a98      	subs	r0, r3, r2
 800845e:	6963      	ldr	r3, [r4, #20]
 8008460:	b2f6      	uxtb	r6, r6
 8008462:	4283      	cmp	r3, r0
 8008464:	4637      	mov	r7, r6
 8008466:	dc05      	bgt.n	8008474 <__swbuf_r+0x4e>
 8008468:	4621      	mov	r1, r4
 800846a:	4628      	mov	r0, r5
 800846c:	f002 fefc 	bl	800b268 <_fflush_r>
 8008470:	2800      	cmp	r0, #0
 8008472:	d1ed      	bne.n	8008450 <__swbuf_r+0x2a>
 8008474:	68a3      	ldr	r3, [r4, #8]
 8008476:	3b01      	subs	r3, #1
 8008478:	60a3      	str	r3, [r4, #8]
 800847a:	6823      	ldr	r3, [r4, #0]
 800847c:	1c5a      	adds	r2, r3, #1
 800847e:	6022      	str	r2, [r4, #0]
 8008480:	701e      	strb	r6, [r3, #0]
 8008482:	6962      	ldr	r2, [r4, #20]
 8008484:	1c43      	adds	r3, r0, #1
 8008486:	429a      	cmp	r2, r3
 8008488:	d004      	beq.n	8008494 <__swbuf_r+0x6e>
 800848a:	89a3      	ldrh	r3, [r4, #12]
 800848c:	07db      	lsls	r3, r3, #31
 800848e:	d5e1      	bpl.n	8008454 <__swbuf_r+0x2e>
 8008490:	2e0a      	cmp	r6, #10
 8008492:	d1df      	bne.n	8008454 <__swbuf_r+0x2e>
 8008494:	4621      	mov	r1, r4
 8008496:	4628      	mov	r0, r5
 8008498:	f002 fee6 	bl	800b268 <_fflush_r>
 800849c:	2800      	cmp	r0, #0
 800849e:	d0d9      	beq.n	8008454 <__swbuf_r+0x2e>
 80084a0:	e7d6      	b.n	8008450 <__swbuf_r+0x2a>
	...

080084a4 <__swsetup_r>:
 80084a4:	b538      	push	{r3, r4, r5, lr}
 80084a6:	4b29      	ldr	r3, [pc, #164]	@ (800854c <__swsetup_r+0xa8>)
 80084a8:	4605      	mov	r5, r0
 80084aa:	6818      	ldr	r0, [r3, #0]
 80084ac:	460c      	mov	r4, r1
 80084ae:	b118      	cbz	r0, 80084b8 <__swsetup_r+0x14>
 80084b0:	6a03      	ldr	r3, [r0, #32]
 80084b2:	b90b      	cbnz	r3, 80084b8 <__swsetup_r+0x14>
 80084b4:	f7ff feae 	bl	8008214 <__sinit>
 80084b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084bc:	0719      	lsls	r1, r3, #28
 80084be:	d422      	bmi.n	8008506 <__swsetup_r+0x62>
 80084c0:	06da      	lsls	r2, r3, #27
 80084c2:	d407      	bmi.n	80084d4 <__swsetup_r+0x30>
 80084c4:	2209      	movs	r2, #9
 80084c6:	602a      	str	r2, [r5, #0]
 80084c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084cc:	81a3      	strh	r3, [r4, #12]
 80084ce:	f04f 30ff 	mov.w	r0, #4294967295
 80084d2:	e033      	b.n	800853c <__swsetup_r+0x98>
 80084d4:	0758      	lsls	r0, r3, #29
 80084d6:	d512      	bpl.n	80084fe <__swsetup_r+0x5a>
 80084d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084da:	b141      	cbz	r1, 80084ee <__swsetup_r+0x4a>
 80084dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80084e0:	4299      	cmp	r1, r3
 80084e2:	d002      	beq.n	80084ea <__swsetup_r+0x46>
 80084e4:	4628      	mov	r0, r5
 80084e6:	f000 ff6b 	bl	80093c0 <_free_r>
 80084ea:	2300      	movs	r3, #0
 80084ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80084ee:	89a3      	ldrh	r3, [r4, #12]
 80084f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80084f4:	81a3      	strh	r3, [r4, #12]
 80084f6:	2300      	movs	r3, #0
 80084f8:	6063      	str	r3, [r4, #4]
 80084fa:	6923      	ldr	r3, [r4, #16]
 80084fc:	6023      	str	r3, [r4, #0]
 80084fe:	89a3      	ldrh	r3, [r4, #12]
 8008500:	f043 0308 	orr.w	r3, r3, #8
 8008504:	81a3      	strh	r3, [r4, #12]
 8008506:	6923      	ldr	r3, [r4, #16]
 8008508:	b94b      	cbnz	r3, 800851e <__swsetup_r+0x7a>
 800850a:	89a3      	ldrh	r3, [r4, #12]
 800850c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008510:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008514:	d003      	beq.n	800851e <__swsetup_r+0x7a>
 8008516:	4621      	mov	r1, r4
 8008518:	4628      	mov	r0, r5
 800851a:	f002 fef3 	bl	800b304 <__smakebuf_r>
 800851e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008522:	f013 0201 	ands.w	r2, r3, #1
 8008526:	d00a      	beq.n	800853e <__swsetup_r+0x9a>
 8008528:	2200      	movs	r2, #0
 800852a:	60a2      	str	r2, [r4, #8]
 800852c:	6962      	ldr	r2, [r4, #20]
 800852e:	4252      	negs	r2, r2
 8008530:	61a2      	str	r2, [r4, #24]
 8008532:	6922      	ldr	r2, [r4, #16]
 8008534:	b942      	cbnz	r2, 8008548 <__swsetup_r+0xa4>
 8008536:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800853a:	d1c5      	bne.n	80084c8 <__swsetup_r+0x24>
 800853c:	bd38      	pop	{r3, r4, r5, pc}
 800853e:	0799      	lsls	r1, r3, #30
 8008540:	bf58      	it	pl
 8008542:	6962      	ldrpl	r2, [r4, #20]
 8008544:	60a2      	str	r2, [r4, #8]
 8008546:	e7f4      	b.n	8008532 <__swsetup_r+0x8e>
 8008548:	2000      	movs	r0, #0
 800854a:	e7f7      	b.n	800853c <__swsetup_r+0x98>
 800854c:	2000001c 	.word	0x2000001c

08008550 <memset>:
 8008550:	4402      	add	r2, r0
 8008552:	4603      	mov	r3, r0
 8008554:	4293      	cmp	r3, r2
 8008556:	d100      	bne.n	800855a <memset+0xa>
 8008558:	4770      	bx	lr
 800855a:	f803 1b01 	strb.w	r1, [r3], #1
 800855e:	e7f9      	b.n	8008554 <memset+0x4>

08008560 <_localeconv_r>:
 8008560:	4800      	ldr	r0, [pc, #0]	@ (8008564 <_localeconv_r+0x4>)
 8008562:	4770      	bx	lr
 8008564:	2000015c 	.word	0x2000015c

08008568 <_close_r>:
 8008568:	b538      	push	{r3, r4, r5, lr}
 800856a:	4d06      	ldr	r5, [pc, #24]	@ (8008584 <_close_r+0x1c>)
 800856c:	2300      	movs	r3, #0
 800856e:	4604      	mov	r4, r0
 8008570:	4608      	mov	r0, r1
 8008572:	602b      	str	r3, [r5, #0]
 8008574:	f7f9 fa9e 	bl	8001ab4 <_close>
 8008578:	1c43      	adds	r3, r0, #1
 800857a:	d102      	bne.n	8008582 <_close_r+0x1a>
 800857c:	682b      	ldr	r3, [r5, #0]
 800857e:	b103      	cbz	r3, 8008582 <_close_r+0x1a>
 8008580:	6023      	str	r3, [r4, #0]
 8008582:	bd38      	pop	{r3, r4, r5, pc}
 8008584:	200048e8 	.word	0x200048e8

08008588 <_reclaim_reent>:
 8008588:	4b29      	ldr	r3, [pc, #164]	@ (8008630 <_reclaim_reent+0xa8>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4283      	cmp	r3, r0
 800858e:	b570      	push	{r4, r5, r6, lr}
 8008590:	4604      	mov	r4, r0
 8008592:	d04b      	beq.n	800862c <_reclaim_reent+0xa4>
 8008594:	69c3      	ldr	r3, [r0, #28]
 8008596:	b1ab      	cbz	r3, 80085c4 <_reclaim_reent+0x3c>
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	b16b      	cbz	r3, 80085b8 <_reclaim_reent+0x30>
 800859c:	2500      	movs	r5, #0
 800859e:	69e3      	ldr	r3, [r4, #28]
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	5959      	ldr	r1, [r3, r5]
 80085a4:	2900      	cmp	r1, #0
 80085a6:	d13b      	bne.n	8008620 <_reclaim_reent+0x98>
 80085a8:	3504      	adds	r5, #4
 80085aa:	2d80      	cmp	r5, #128	@ 0x80
 80085ac:	d1f7      	bne.n	800859e <_reclaim_reent+0x16>
 80085ae:	69e3      	ldr	r3, [r4, #28]
 80085b0:	4620      	mov	r0, r4
 80085b2:	68d9      	ldr	r1, [r3, #12]
 80085b4:	f000 ff04 	bl	80093c0 <_free_r>
 80085b8:	69e3      	ldr	r3, [r4, #28]
 80085ba:	6819      	ldr	r1, [r3, #0]
 80085bc:	b111      	cbz	r1, 80085c4 <_reclaim_reent+0x3c>
 80085be:	4620      	mov	r0, r4
 80085c0:	f000 fefe 	bl	80093c0 <_free_r>
 80085c4:	6961      	ldr	r1, [r4, #20]
 80085c6:	b111      	cbz	r1, 80085ce <_reclaim_reent+0x46>
 80085c8:	4620      	mov	r0, r4
 80085ca:	f000 fef9 	bl	80093c0 <_free_r>
 80085ce:	69e1      	ldr	r1, [r4, #28]
 80085d0:	b111      	cbz	r1, 80085d8 <_reclaim_reent+0x50>
 80085d2:	4620      	mov	r0, r4
 80085d4:	f000 fef4 	bl	80093c0 <_free_r>
 80085d8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80085da:	b111      	cbz	r1, 80085e2 <_reclaim_reent+0x5a>
 80085dc:	4620      	mov	r0, r4
 80085de:	f000 feef 	bl	80093c0 <_free_r>
 80085e2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085e4:	b111      	cbz	r1, 80085ec <_reclaim_reent+0x64>
 80085e6:	4620      	mov	r0, r4
 80085e8:	f000 feea 	bl	80093c0 <_free_r>
 80085ec:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80085ee:	b111      	cbz	r1, 80085f6 <_reclaim_reent+0x6e>
 80085f0:	4620      	mov	r0, r4
 80085f2:	f000 fee5 	bl	80093c0 <_free_r>
 80085f6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80085f8:	b111      	cbz	r1, 8008600 <_reclaim_reent+0x78>
 80085fa:	4620      	mov	r0, r4
 80085fc:	f000 fee0 	bl	80093c0 <_free_r>
 8008600:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008602:	b111      	cbz	r1, 800860a <_reclaim_reent+0x82>
 8008604:	4620      	mov	r0, r4
 8008606:	f000 fedb 	bl	80093c0 <_free_r>
 800860a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800860c:	b111      	cbz	r1, 8008614 <_reclaim_reent+0x8c>
 800860e:	4620      	mov	r0, r4
 8008610:	f000 fed6 	bl	80093c0 <_free_r>
 8008614:	6a23      	ldr	r3, [r4, #32]
 8008616:	b14b      	cbz	r3, 800862c <_reclaim_reent+0xa4>
 8008618:	4620      	mov	r0, r4
 800861a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800861e:	4718      	bx	r3
 8008620:	680e      	ldr	r6, [r1, #0]
 8008622:	4620      	mov	r0, r4
 8008624:	f000 fecc 	bl	80093c0 <_free_r>
 8008628:	4631      	mov	r1, r6
 800862a:	e7bb      	b.n	80085a4 <_reclaim_reent+0x1c>
 800862c:	bd70      	pop	{r4, r5, r6, pc}
 800862e:	bf00      	nop
 8008630:	2000001c 	.word	0x2000001c

08008634 <_lseek_r>:
 8008634:	b538      	push	{r3, r4, r5, lr}
 8008636:	4d07      	ldr	r5, [pc, #28]	@ (8008654 <_lseek_r+0x20>)
 8008638:	4604      	mov	r4, r0
 800863a:	4608      	mov	r0, r1
 800863c:	4611      	mov	r1, r2
 800863e:	2200      	movs	r2, #0
 8008640:	602a      	str	r2, [r5, #0]
 8008642:	461a      	mov	r2, r3
 8008644:	f7f9 fa5d 	bl	8001b02 <_lseek>
 8008648:	1c43      	adds	r3, r0, #1
 800864a:	d102      	bne.n	8008652 <_lseek_r+0x1e>
 800864c:	682b      	ldr	r3, [r5, #0]
 800864e:	b103      	cbz	r3, 8008652 <_lseek_r+0x1e>
 8008650:	6023      	str	r3, [r4, #0]
 8008652:	bd38      	pop	{r3, r4, r5, pc}
 8008654:	200048e8 	.word	0x200048e8

08008658 <_read_r>:
 8008658:	b538      	push	{r3, r4, r5, lr}
 800865a:	4d07      	ldr	r5, [pc, #28]	@ (8008678 <_read_r+0x20>)
 800865c:	4604      	mov	r4, r0
 800865e:	4608      	mov	r0, r1
 8008660:	4611      	mov	r1, r2
 8008662:	2200      	movs	r2, #0
 8008664:	602a      	str	r2, [r5, #0]
 8008666:	461a      	mov	r2, r3
 8008668:	f7f9 f9eb 	bl	8001a42 <_read>
 800866c:	1c43      	adds	r3, r0, #1
 800866e:	d102      	bne.n	8008676 <_read_r+0x1e>
 8008670:	682b      	ldr	r3, [r5, #0]
 8008672:	b103      	cbz	r3, 8008676 <_read_r+0x1e>
 8008674:	6023      	str	r3, [r4, #0]
 8008676:	bd38      	pop	{r3, r4, r5, pc}
 8008678:	200048e8 	.word	0x200048e8

0800867c <_write_r>:
 800867c:	b538      	push	{r3, r4, r5, lr}
 800867e:	4d07      	ldr	r5, [pc, #28]	@ (800869c <_write_r+0x20>)
 8008680:	4604      	mov	r4, r0
 8008682:	4608      	mov	r0, r1
 8008684:	4611      	mov	r1, r2
 8008686:	2200      	movs	r2, #0
 8008688:	602a      	str	r2, [r5, #0]
 800868a:	461a      	mov	r2, r3
 800868c:	f7f9 f9f6 	bl	8001a7c <_write>
 8008690:	1c43      	adds	r3, r0, #1
 8008692:	d102      	bne.n	800869a <_write_r+0x1e>
 8008694:	682b      	ldr	r3, [r5, #0]
 8008696:	b103      	cbz	r3, 800869a <_write_r+0x1e>
 8008698:	6023      	str	r3, [r4, #0]
 800869a:	bd38      	pop	{r3, r4, r5, pc}
 800869c:	200048e8 	.word	0x200048e8

080086a0 <__errno>:
 80086a0:	4b01      	ldr	r3, [pc, #4]	@ (80086a8 <__errno+0x8>)
 80086a2:	6818      	ldr	r0, [r3, #0]
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop
 80086a8:	2000001c 	.word	0x2000001c

080086ac <__libc_init_array>:
 80086ac:	b570      	push	{r4, r5, r6, lr}
 80086ae:	4d0d      	ldr	r5, [pc, #52]	@ (80086e4 <__libc_init_array+0x38>)
 80086b0:	4c0d      	ldr	r4, [pc, #52]	@ (80086e8 <__libc_init_array+0x3c>)
 80086b2:	1b64      	subs	r4, r4, r5
 80086b4:	10a4      	asrs	r4, r4, #2
 80086b6:	2600      	movs	r6, #0
 80086b8:	42a6      	cmp	r6, r4
 80086ba:	d109      	bne.n	80086d0 <__libc_init_array+0x24>
 80086bc:	4d0b      	ldr	r5, [pc, #44]	@ (80086ec <__libc_init_array+0x40>)
 80086be:	4c0c      	ldr	r4, [pc, #48]	@ (80086f0 <__libc_init_array+0x44>)
 80086c0:	f003 fae0 	bl	800bc84 <_init>
 80086c4:	1b64      	subs	r4, r4, r5
 80086c6:	10a4      	asrs	r4, r4, #2
 80086c8:	2600      	movs	r6, #0
 80086ca:	42a6      	cmp	r6, r4
 80086cc:	d105      	bne.n	80086da <__libc_init_array+0x2e>
 80086ce:	bd70      	pop	{r4, r5, r6, pc}
 80086d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80086d4:	4798      	blx	r3
 80086d6:	3601      	adds	r6, #1
 80086d8:	e7ee      	b.n	80086b8 <__libc_init_array+0xc>
 80086da:	f855 3b04 	ldr.w	r3, [r5], #4
 80086de:	4798      	blx	r3
 80086e0:	3601      	adds	r6, #1
 80086e2:	e7f2      	b.n	80086ca <__libc_init_array+0x1e>
 80086e4:	0800c208 	.word	0x0800c208
 80086e8:	0800c208 	.word	0x0800c208
 80086ec:	0800c208 	.word	0x0800c208
 80086f0:	0800c20c 	.word	0x0800c20c

080086f4 <__retarget_lock_init_recursive>:
 80086f4:	4770      	bx	lr

080086f6 <__retarget_lock_acquire_recursive>:
 80086f6:	4770      	bx	lr

080086f8 <__retarget_lock_release_recursive>:
 80086f8:	4770      	bx	lr

080086fa <memcpy>:
 80086fa:	440a      	add	r2, r1
 80086fc:	4291      	cmp	r1, r2
 80086fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8008702:	d100      	bne.n	8008706 <memcpy+0xc>
 8008704:	4770      	bx	lr
 8008706:	b510      	push	{r4, lr}
 8008708:	f811 4b01 	ldrb.w	r4, [r1], #1
 800870c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008710:	4291      	cmp	r1, r2
 8008712:	d1f9      	bne.n	8008708 <memcpy+0xe>
 8008714:	bd10      	pop	{r4, pc}
	...

08008718 <nanf>:
 8008718:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008720 <nanf+0x8>
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	7fc00000 	.word	0x7fc00000

08008724 <quorem>:
 8008724:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008728:	6903      	ldr	r3, [r0, #16]
 800872a:	690c      	ldr	r4, [r1, #16]
 800872c:	42a3      	cmp	r3, r4
 800872e:	4607      	mov	r7, r0
 8008730:	db7e      	blt.n	8008830 <quorem+0x10c>
 8008732:	3c01      	subs	r4, #1
 8008734:	f101 0814 	add.w	r8, r1, #20
 8008738:	00a3      	lsls	r3, r4, #2
 800873a:	f100 0514 	add.w	r5, r0, #20
 800873e:	9300      	str	r3, [sp, #0]
 8008740:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008744:	9301      	str	r3, [sp, #4]
 8008746:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800874a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800874e:	3301      	adds	r3, #1
 8008750:	429a      	cmp	r2, r3
 8008752:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008756:	fbb2 f6f3 	udiv	r6, r2, r3
 800875a:	d32e      	bcc.n	80087ba <quorem+0x96>
 800875c:	f04f 0a00 	mov.w	sl, #0
 8008760:	46c4      	mov	ip, r8
 8008762:	46ae      	mov	lr, r5
 8008764:	46d3      	mov	fp, sl
 8008766:	f85c 3b04 	ldr.w	r3, [ip], #4
 800876a:	b298      	uxth	r0, r3
 800876c:	fb06 a000 	mla	r0, r6, r0, sl
 8008770:	0c02      	lsrs	r2, r0, #16
 8008772:	0c1b      	lsrs	r3, r3, #16
 8008774:	fb06 2303 	mla	r3, r6, r3, r2
 8008778:	f8de 2000 	ldr.w	r2, [lr]
 800877c:	b280      	uxth	r0, r0
 800877e:	b292      	uxth	r2, r2
 8008780:	1a12      	subs	r2, r2, r0
 8008782:	445a      	add	r2, fp
 8008784:	f8de 0000 	ldr.w	r0, [lr]
 8008788:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800878c:	b29b      	uxth	r3, r3
 800878e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008792:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008796:	b292      	uxth	r2, r2
 8008798:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800879c:	45e1      	cmp	r9, ip
 800879e:	f84e 2b04 	str.w	r2, [lr], #4
 80087a2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80087a6:	d2de      	bcs.n	8008766 <quorem+0x42>
 80087a8:	9b00      	ldr	r3, [sp, #0]
 80087aa:	58eb      	ldr	r3, [r5, r3]
 80087ac:	b92b      	cbnz	r3, 80087ba <quorem+0x96>
 80087ae:	9b01      	ldr	r3, [sp, #4]
 80087b0:	3b04      	subs	r3, #4
 80087b2:	429d      	cmp	r5, r3
 80087b4:	461a      	mov	r2, r3
 80087b6:	d32f      	bcc.n	8008818 <quorem+0xf4>
 80087b8:	613c      	str	r4, [r7, #16]
 80087ba:	4638      	mov	r0, r7
 80087bc:	f001 f9c4 	bl	8009b48 <__mcmp>
 80087c0:	2800      	cmp	r0, #0
 80087c2:	db25      	blt.n	8008810 <quorem+0xec>
 80087c4:	4629      	mov	r1, r5
 80087c6:	2000      	movs	r0, #0
 80087c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80087cc:	f8d1 c000 	ldr.w	ip, [r1]
 80087d0:	fa1f fe82 	uxth.w	lr, r2
 80087d4:	fa1f f38c 	uxth.w	r3, ip
 80087d8:	eba3 030e 	sub.w	r3, r3, lr
 80087dc:	4403      	add	r3, r0
 80087de:	0c12      	lsrs	r2, r2, #16
 80087e0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80087e4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087ee:	45c1      	cmp	r9, r8
 80087f0:	f841 3b04 	str.w	r3, [r1], #4
 80087f4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80087f8:	d2e6      	bcs.n	80087c8 <quorem+0xa4>
 80087fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008802:	b922      	cbnz	r2, 800880e <quorem+0xea>
 8008804:	3b04      	subs	r3, #4
 8008806:	429d      	cmp	r5, r3
 8008808:	461a      	mov	r2, r3
 800880a:	d30b      	bcc.n	8008824 <quorem+0x100>
 800880c:	613c      	str	r4, [r7, #16]
 800880e:	3601      	adds	r6, #1
 8008810:	4630      	mov	r0, r6
 8008812:	b003      	add	sp, #12
 8008814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008818:	6812      	ldr	r2, [r2, #0]
 800881a:	3b04      	subs	r3, #4
 800881c:	2a00      	cmp	r2, #0
 800881e:	d1cb      	bne.n	80087b8 <quorem+0x94>
 8008820:	3c01      	subs	r4, #1
 8008822:	e7c6      	b.n	80087b2 <quorem+0x8e>
 8008824:	6812      	ldr	r2, [r2, #0]
 8008826:	3b04      	subs	r3, #4
 8008828:	2a00      	cmp	r2, #0
 800882a:	d1ef      	bne.n	800880c <quorem+0xe8>
 800882c:	3c01      	subs	r4, #1
 800882e:	e7ea      	b.n	8008806 <quorem+0xe2>
 8008830:	2000      	movs	r0, #0
 8008832:	e7ee      	b.n	8008812 <quorem+0xee>
 8008834:	0000      	movs	r0, r0
	...

08008838 <_dtoa_r>:
 8008838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800883c:	69c7      	ldr	r7, [r0, #28]
 800883e:	b099      	sub	sp, #100	@ 0x64
 8008840:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008844:	ec55 4b10 	vmov	r4, r5, d0
 8008848:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800884a:	9109      	str	r1, [sp, #36]	@ 0x24
 800884c:	4683      	mov	fp, r0
 800884e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008850:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008852:	b97f      	cbnz	r7, 8008874 <_dtoa_r+0x3c>
 8008854:	2010      	movs	r0, #16
 8008856:	f000 fdfd 	bl	8009454 <malloc>
 800885a:	4602      	mov	r2, r0
 800885c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008860:	b920      	cbnz	r0, 800886c <_dtoa_r+0x34>
 8008862:	4ba7      	ldr	r3, [pc, #668]	@ (8008b00 <_dtoa_r+0x2c8>)
 8008864:	21ef      	movs	r1, #239	@ 0xef
 8008866:	48a7      	ldr	r0, [pc, #668]	@ (8008b04 <_dtoa_r+0x2cc>)
 8008868:	f002 fdee 	bl	800b448 <__assert_func>
 800886c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008870:	6007      	str	r7, [r0, #0]
 8008872:	60c7      	str	r7, [r0, #12]
 8008874:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008878:	6819      	ldr	r1, [r3, #0]
 800887a:	b159      	cbz	r1, 8008894 <_dtoa_r+0x5c>
 800887c:	685a      	ldr	r2, [r3, #4]
 800887e:	604a      	str	r2, [r1, #4]
 8008880:	2301      	movs	r3, #1
 8008882:	4093      	lsls	r3, r2
 8008884:	608b      	str	r3, [r1, #8]
 8008886:	4658      	mov	r0, fp
 8008888:	f000 feda 	bl	8009640 <_Bfree>
 800888c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008890:	2200      	movs	r2, #0
 8008892:	601a      	str	r2, [r3, #0]
 8008894:	1e2b      	subs	r3, r5, #0
 8008896:	bfb9      	ittee	lt
 8008898:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800889c:	9303      	strlt	r3, [sp, #12]
 800889e:	2300      	movge	r3, #0
 80088a0:	6033      	strge	r3, [r6, #0]
 80088a2:	9f03      	ldr	r7, [sp, #12]
 80088a4:	4b98      	ldr	r3, [pc, #608]	@ (8008b08 <_dtoa_r+0x2d0>)
 80088a6:	bfbc      	itt	lt
 80088a8:	2201      	movlt	r2, #1
 80088aa:	6032      	strlt	r2, [r6, #0]
 80088ac:	43bb      	bics	r3, r7
 80088ae:	d112      	bne.n	80088d6 <_dtoa_r+0x9e>
 80088b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80088b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80088b6:	6013      	str	r3, [r2, #0]
 80088b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80088bc:	4323      	orrs	r3, r4
 80088be:	f000 854d 	beq.w	800935c <_dtoa_r+0xb24>
 80088c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80088c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008b1c <_dtoa_r+0x2e4>
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	f000 854f 	beq.w	800936c <_dtoa_r+0xb34>
 80088ce:	f10a 0303 	add.w	r3, sl, #3
 80088d2:	f000 bd49 	b.w	8009368 <_dtoa_r+0xb30>
 80088d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80088da:	2200      	movs	r2, #0
 80088dc:	ec51 0b17 	vmov	r0, r1, d7
 80088e0:	2300      	movs	r3, #0
 80088e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80088e6:	f7f8 f8ef 	bl	8000ac8 <__aeabi_dcmpeq>
 80088ea:	4680      	mov	r8, r0
 80088ec:	b158      	cbz	r0, 8008906 <_dtoa_r+0xce>
 80088ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80088f0:	2301      	movs	r3, #1
 80088f2:	6013      	str	r3, [r2, #0]
 80088f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80088f6:	b113      	cbz	r3, 80088fe <_dtoa_r+0xc6>
 80088f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80088fa:	4b84      	ldr	r3, [pc, #528]	@ (8008b0c <_dtoa_r+0x2d4>)
 80088fc:	6013      	str	r3, [r2, #0]
 80088fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008b20 <_dtoa_r+0x2e8>
 8008902:	f000 bd33 	b.w	800936c <_dtoa_r+0xb34>
 8008906:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800890a:	aa16      	add	r2, sp, #88	@ 0x58
 800890c:	a917      	add	r1, sp, #92	@ 0x5c
 800890e:	4658      	mov	r0, fp
 8008910:	f001 fa3a 	bl	8009d88 <__d2b>
 8008914:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008918:	4681      	mov	r9, r0
 800891a:	2e00      	cmp	r6, #0
 800891c:	d077      	beq.n	8008a0e <_dtoa_r+0x1d6>
 800891e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008920:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008924:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008928:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800892c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008930:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008934:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008938:	4619      	mov	r1, r3
 800893a:	2200      	movs	r2, #0
 800893c:	4b74      	ldr	r3, [pc, #464]	@ (8008b10 <_dtoa_r+0x2d8>)
 800893e:	f7f7 fca3 	bl	8000288 <__aeabi_dsub>
 8008942:	a369      	add	r3, pc, #420	@ (adr r3, 8008ae8 <_dtoa_r+0x2b0>)
 8008944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008948:	f7f7 fe56 	bl	80005f8 <__aeabi_dmul>
 800894c:	a368      	add	r3, pc, #416	@ (adr r3, 8008af0 <_dtoa_r+0x2b8>)
 800894e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008952:	f7f7 fc9b 	bl	800028c <__adddf3>
 8008956:	4604      	mov	r4, r0
 8008958:	4630      	mov	r0, r6
 800895a:	460d      	mov	r5, r1
 800895c:	f7f7 fde2 	bl	8000524 <__aeabi_i2d>
 8008960:	a365      	add	r3, pc, #404	@ (adr r3, 8008af8 <_dtoa_r+0x2c0>)
 8008962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008966:	f7f7 fe47 	bl	80005f8 <__aeabi_dmul>
 800896a:	4602      	mov	r2, r0
 800896c:	460b      	mov	r3, r1
 800896e:	4620      	mov	r0, r4
 8008970:	4629      	mov	r1, r5
 8008972:	f7f7 fc8b 	bl	800028c <__adddf3>
 8008976:	4604      	mov	r4, r0
 8008978:	460d      	mov	r5, r1
 800897a:	f7f8 f8ed 	bl	8000b58 <__aeabi_d2iz>
 800897e:	2200      	movs	r2, #0
 8008980:	4607      	mov	r7, r0
 8008982:	2300      	movs	r3, #0
 8008984:	4620      	mov	r0, r4
 8008986:	4629      	mov	r1, r5
 8008988:	f7f8 f8a8 	bl	8000adc <__aeabi_dcmplt>
 800898c:	b140      	cbz	r0, 80089a0 <_dtoa_r+0x168>
 800898e:	4638      	mov	r0, r7
 8008990:	f7f7 fdc8 	bl	8000524 <__aeabi_i2d>
 8008994:	4622      	mov	r2, r4
 8008996:	462b      	mov	r3, r5
 8008998:	f7f8 f896 	bl	8000ac8 <__aeabi_dcmpeq>
 800899c:	b900      	cbnz	r0, 80089a0 <_dtoa_r+0x168>
 800899e:	3f01      	subs	r7, #1
 80089a0:	2f16      	cmp	r7, #22
 80089a2:	d851      	bhi.n	8008a48 <_dtoa_r+0x210>
 80089a4:	4b5b      	ldr	r3, [pc, #364]	@ (8008b14 <_dtoa_r+0x2dc>)
 80089a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80089aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089b2:	f7f8 f893 	bl	8000adc <__aeabi_dcmplt>
 80089b6:	2800      	cmp	r0, #0
 80089b8:	d048      	beq.n	8008a4c <_dtoa_r+0x214>
 80089ba:	3f01      	subs	r7, #1
 80089bc:	2300      	movs	r3, #0
 80089be:	9312      	str	r3, [sp, #72]	@ 0x48
 80089c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80089c2:	1b9b      	subs	r3, r3, r6
 80089c4:	1e5a      	subs	r2, r3, #1
 80089c6:	bf44      	itt	mi
 80089c8:	f1c3 0801 	rsbmi	r8, r3, #1
 80089cc:	2300      	movmi	r3, #0
 80089ce:	9208      	str	r2, [sp, #32]
 80089d0:	bf54      	ite	pl
 80089d2:	f04f 0800 	movpl.w	r8, #0
 80089d6:	9308      	strmi	r3, [sp, #32]
 80089d8:	2f00      	cmp	r7, #0
 80089da:	db39      	blt.n	8008a50 <_dtoa_r+0x218>
 80089dc:	9b08      	ldr	r3, [sp, #32]
 80089de:	970f      	str	r7, [sp, #60]	@ 0x3c
 80089e0:	443b      	add	r3, r7
 80089e2:	9308      	str	r3, [sp, #32]
 80089e4:	2300      	movs	r3, #0
 80089e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80089e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089ea:	2b09      	cmp	r3, #9
 80089ec:	d864      	bhi.n	8008ab8 <_dtoa_r+0x280>
 80089ee:	2b05      	cmp	r3, #5
 80089f0:	bfc4      	itt	gt
 80089f2:	3b04      	subgt	r3, #4
 80089f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80089f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089f8:	f1a3 0302 	sub.w	r3, r3, #2
 80089fc:	bfcc      	ite	gt
 80089fe:	2400      	movgt	r4, #0
 8008a00:	2401      	movle	r4, #1
 8008a02:	2b03      	cmp	r3, #3
 8008a04:	d863      	bhi.n	8008ace <_dtoa_r+0x296>
 8008a06:	e8df f003 	tbb	[pc, r3]
 8008a0a:	372a      	.short	0x372a
 8008a0c:	5535      	.short	0x5535
 8008a0e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008a12:	441e      	add	r6, r3
 8008a14:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008a18:	2b20      	cmp	r3, #32
 8008a1a:	bfc1      	itttt	gt
 8008a1c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008a20:	409f      	lslgt	r7, r3
 8008a22:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008a26:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008a2a:	bfd6      	itet	le
 8008a2c:	f1c3 0320 	rsble	r3, r3, #32
 8008a30:	ea47 0003 	orrgt.w	r0, r7, r3
 8008a34:	fa04 f003 	lslle.w	r0, r4, r3
 8008a38:	f7f7 fd64 	bl	8000504 <__aeabi_ui2d>
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008a42:	3e01      	subs	r6, #1
 8008a44:	9214      	str	r2, [sp, #80]	@ 0x50
 8008a46:	e777      	b.n	8008938 <_dtoa_r+0x100>
 8008a48:	2301      	movs	r3, #1
 8008a4a:	e7b8      	b.n	80089be <_dtoa_r+0x186>
 8008a4c:	9012      	str	r0, [sp, #72]	@ 0x48
 8008a4e:	e7b7      	b.n	80089c0 <_dtoa_r+0x188>
 8008a50:	427b      	negs	r3, r7
 8008a52:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a54:	2300      	movs	r3, #0
 8008a56:	eba8 0807 	sub.w	r8, r8, r7
 8008a5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008a5c:	e7c4      	b.n	80089e8 <_dtoa_r+0x1b0>
 8008a5e:	2300      	movs	r3, #0
 8008a60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	dc35      	bgt.n	8008ad4 <_dtoa_r+0x29c>
 8008a68:	2301      	movs	r3, #1
 8008a6a:	9300      	str	r3, [sp, #0]
 8008a6c:	9307      	str	r3, [sp, #28]
 8008a6e:	461a      	mov	r2, r3
 8008a70:	920e      	str	r2, [sp, #56]	@ 0x38
 8008a72:	e00b      	b.n	8008a8c <_dtoa_r+0x254>
 8008a74:	2301      	movs	r3, #1
 8008a76:	e7f3      	b.n	8008a60 <_dtoa_r+0x228>
 8008a78:	2300      	movs	r3, #0
 8008a7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a7e:	18fb      	adds	r3, r7, r3
 8008a80:	9300      	str	r3, [sp, #0]
 8008a82:	3301      	adds	r3, #1
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	9307      	str	r3, [sp, #28]
 8008a88:	bfb8      	it	lt
 8008a8a:	2301      	movlt	r3, #1
 8008a8c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008a90:	2100      	movs	r1, #0
 8008a92:	2204      	movs	r2, #4
 8008a94:	f102 0514 	add.w	r5, r2, #20
 8008a98:	429d      	cmp	r5, r3
 8008a9a:	d91f      	bls.n	8008adc <_dtoa_r+0x2a4>
 8008a9c:	6041      	str	r1, [r0, #4]
 8008a9e:	4658      	mov	r0, fp
 8008aa0:	f000 fd8e 	bl	80095c0 <_Balloc>
 8008aa4:	4682      	mov	sl, r0
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	d13c      	bne.n	8008b24 <_dtoa_r+0x2ec>
 8008aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8008b18 <_dtoa_r+0x2e0>)
 8008aac:	4602      	mov	r2, r0
 8008aae:	f240 11af 	movw	r1, #431	@ 0x1af
 8008ab2:	e6d8      	b.n	8008866 <_dtoa_r+0x2e>
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e7e0      	b.n	8008a7a <_dtoa_r+0x242>
 8008ab8:	2401      	movs	r4, #1
 8008aba:	2300      	movs	r3, #0
 8008abc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008abe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ac4:	9300      	str	r3, [sp, #0]
 8008ac6:	9307      	str	r3, [sp, #28]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	2312      	movs	r3, #18
 8008acc:	e7d0      	b.n	8008a70 <_dtoa_r+0x238>
 8008ace:	2301      	movs	r3, #1
 8008ad0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ad2:	e7f5      	b.n	8008ac0 <_dtoa_r+0x288>
 8008ad4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ad6:	9300      	str	r3, [sp, #0]
 8008ad8:	9307      	str	r3, [sp, #28]
 8008ada:	e7d7      	b.n	8008a8c <_dtoa_r+0x254>
 8008adc:	3101      	adds	r1, #1
 8008ade:	0052      	lsls	r2, r2, #1
 8008ae0:	e7d8      	b.n	8008a94 <_dtoa_r+0x25c>
 8008ae2:	bf00      	nop
 8008ae4:	f3af 8000 	nop.w
 8008ae8:	636f4361 	.word	0x636f4361
 8008aec:	3fd287a7 	.word	0x3fd287a7
 8008af0:	8b60c8b3 	.word	0x8b60c8b3
 8008af4:	3fc68a28 	.word	0x3fc68a28
 8008af8:	509f79fb 	.word	0x509f79fb
 8008afc:	3fd34413 	.word	0x3fd34413
 8008b00:	0800be14 	.word	0x0800be14
 8008b04:	0800be2b 	.word	0x0800be2b
 8008b08:	7ff00000 	.word	0x7ff00000
 8008b0c:	0800bddf 	.word	0x0800bddf
 8008b10:	3ff80000 	.word	0x3ff80000
 8008b14:	0800bf28 	.word	0x0800bf28
 8008b18:	0800be83 	.word	0x0800be83
 8008b1c:	0800be10 	.word	0x0800be10
 8008b20:	0800bdde 	.word	0x0800bdde
 8008b24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008b28:	6018      	str	r0, [r3, #0]
 8008b2a:	9b07      	ldr	r3, [sp, #28]
 8008b2c:	2b0e      	cmp	r3, #14
 8008b2e:	f200 80a4 	bhi.w	8008c7a <_dtoa_r+0x442>
 8008b32:	2c00      	cmp	r4, #0
 8008b34:	f000 80a1 	beq.w	8008c7a <_dtoa_r+0x442>
 8008b38:	2f00      	cmp	r7, #0
 8008b3a:	dd33      	ble.n	8008ba4 <_dtoa_r+0x36c>
 8008b3c:	4bad      	ldr	r3, [pc, #692]	@ (8008df4 <_dtoa_r+0x5bc>)
 8008b3e:	f007 020f 	and.w	r2, r7, #15
 8008b42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b46:	ed93 7b00 	vldr	d7, [r3]
 8008b4a:	05f8      	lsls	r0, r7, #23
 8008b4c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008b50:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008b54:	d516      	bpl.n	8008b84 <_dtoa_r+0x34c>
 8008b56:	4ba8      	ldr	r3, [pc, #672]	@ (8008df8 <_dtoa_r+0x5c0>)
 8008b58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b60:	f7f7 fe74 	bl	800084c <__aeabi_ddiv>
 8008b64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b68:	f004 040f 	and.w	r4, r4, #15
 8008b6c:	2603      	movs	r6, #3
 8008b6e:	4da2      	ldr	r5, [pc, #648]	@ (8008df8 <_dtoa_r+0x5c0>)
 8008b70:	b954      	cbnz	r4, 8008b88 <_dtoa_r+0x350>
 8008b72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b7a:	f7f7 fe67 	bl	800084c <__aeabi_ddiv>
 8008b7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b82:	e028      	b.n	8008bd6 <_dtoa_r+0x39e>
 8008b84:	2602      	movs	r6, #2
 8008b86:	e7f2      	b.n	8008b6e <_dtoa_r+0x336>
 8008b88:	07e1      	lsls	r1, r4, #31
 8008b8a:	d508      	bpl.n	8008b9e <_dtoa_r+0x366>
 8008b8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008b94:	f7f7 fd30 	bl	80005f8 <__aeabi_dmul>
 8008b98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b9c:	3601      	adds	r6, #1
 8008b9e:	1064      	asrs	r4, r4, #1
 8008ba0:	3508      	adds	r5, #8
 8008ba2:	e7e5      	b.n	8008b70 <_dtoa_r+0x338>
 8008ba4:	f000 80d2 	beq.w	8008d4c <_dtoa_r+0x514>
 8008ba8:	427c      	negs	r4, r7
 8008baa:	4b92      	ldr	r3, [pc, #584]	@ (8008df4 <_dtoa_r+0x5bc>)
 8008bac:	4d92      	ldr	r5, [pc, #584]	@ (8008df8 <_dtoa_r+0x5c0>)
 8008bae:	f004 020f 	and.w	r2, r4, #15
 8008bb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008bbe:	f7f7 fd1b 	bl	80005f8 <__aeabi_dmul>
 8008bc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bc6:	1124      	asrs	r4, r4, #4
 8008bc8:	2300      	movs	r3, #0
 8008bca:	2602      	movs	r6, #2
 8008bcc:	2c00      	cmp	r4, #0
 8008bce:	f040 80b2 	bne.w	8008d36 <_dtoa_r+0x4fe>
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d1d3      	bne.n	8008b7e <_dtoa_r+0x346>
 8008bd6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008bd8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	f000 80b7 	beq.w	8008d50 <_dtoa_r+0x518>
 8008be2:	4b86      	ldr	r3, [pc, #536]	@ (8008dfc <_dtoa_r+0x5c4>)
 8008be4:	2200      	movs	r2, #0
 8008be6:	4620      	mov	r0, r4
 8008be8:	4629      	mov	r1, r5
 8008bea:	f7f7 ff77 	bl	8000adc <__aeabi_dcmplt>
 8008bee:	2800      	cmp	r0, #0
 8008bf0:	f000 80ae 	beq.w	8008d50 <_dtoa_r+0x518>
 8008bf4:	9b07      	ldr	r3, [sp, #28]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f000 80aa 	beq.w	8008d50 <_dtoa_r+0x518>
 8008bfc:	9b00      	ldr	r3, [sp, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	dd37      	ble.n	8008c72 <_dtoa_r+0x43a>
 8008c02:	1e7b      	subs	r3, r7, #1
 8008c04:	9304      	str	r3, [sp, #16]
 8008c06:	4620      	mov	r0, r4
 8008c08:	4b7d      	ldr	r3, [pc, #500]	@ (8008e00 <_dtoa_r+0x5c8>)
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	4629      	mov	r1, r5
 8008c0e:	f7f7 fcf3 	bl	80005f8 <__aeabi_dmul>
 8008c12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c16:	9c00      	ldr	r4, [sp, #0]
 8008c18:	3601      	adds	r6, #1
 8008c1a:	4630      	mov	r0, r6
 8008c1c:	f7f7 fc82 	bl	8000524 <__aeabi_i2d>
 8008c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c24:	f7f7 fce8 	bl	80005f8 <__aeabi_dmul>
 8008c28:	4b76      	ldr	r3, [pc, #472]	@ (8008e04 <_dtoa_r+0x5cc>)
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f7f7 fb2e 	bl	800028c <__adddf3>
 8008c30:	4605      	mov	r5, r0
 8008c32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008c36:	2c00      	cmp	r4, #0
 8008c38:	f040 808d 	bne.w	8008d56 <_dtoa_r+0x51e>
 8008c3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c40:	4b71      	ldr	r3, [pc, #452]	@ (8008e08 <_dtoa_r+0x5d0>)
 8008c42:	2200      	movs	r2, #0
 8008c44:	f7f7 fb20 	bl	8000288 <__aeabi_dsub>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c50:	462a      	mov	r2, r5
 8008c52:	4633      	mov	r3, r6
 8008c54:	f7f7 ff60 	bl	8000b18 <__aeabi_dcmpgt>
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	f040 828b 	bne.w	8009174 <_dtoa_r+0x93c>
 8008c5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c62:	462a      	mov	r2, r5
 8008c64:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008c68:	f7f7 ff38 	bl	8000adc <__aeabi_dcmplt>
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	f040 8128 	bne.w	8008ec2 <_dtoa_r+0x68a>
 8008c72:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008c76:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008c7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	f2c0 815a 	blt.w	8008f36 <_dtoa_r+0x6fe>
 8008c82:	2f0e      	cmp	r7, #14
 8008c84:	f300 8157 	bgt.w	8008f36 <_dtoa_r+0x6fe>
 8008c88:	4b5a      	ldr	r3, [pc, #360]	@ (8008df4 <_dtoa_r+0x5bc>)
 8008c8a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008c8e:	ed93 7b00 	vldr	d7, [r3]
 8008c92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	ed8d 7b00 	vstr	d7, [sp]
 8008c9a:	da03      	bge.n	8008ca4 <_dtoa_r+0x46c>
 8008c9c:	9b07      	ldr	r3, [sp, #28]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	f340 8101 	ble.w	8008ea6 <_dtoa_r+0x66e>
 8008ca4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008ca8:	4656      	mov	r6, sl
 8008caa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cae:	4620      	mov	r0, r4
 8008cb0:	4629      	mov	r1, r5
 8008cb2:	f7f7 fdcb 	bl	800084c <__aeabi_ddiv>
 8008cb6:	f7f7 ff4f 	bl	8000b58 <__aeabi_d2iz>
 8008cba:	4680      	mov	r8, r0
 8008cbc:	f7f7 fc32 	bl	8000524 <__aeabi_i2d>
 8008cc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cc4:	f7f7 fc98 	bl	80005f8 <__aeabi_dmul>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	460b      	mov	r3, r1
 8008ccc:	4620      	mov	r0, r4
 8008cce:	4629      	mov	r1, r5
 8008cd0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008cd4:	f7f7 fad8 	bl	8000288 <__aeabi_dsub>
 8008cd8:	f806 4b01 	strb.w	r4, [r6], #1
 8008cdc:	9d07      	ldr	r5, [sp, #28]
 8008cde:	eba6 040a 	sub.w	r4, r6, sl
 8008ce2:	42a5      	cmp	r5, r4
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	f040 8117 	bne.w	8008f1a <_dtoa_r+0x6e2>
 8008cec:	f7f7 face 	bl	800028c <__adddf3>
 8008cf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cf4:	4604      	mov	r4, r0
 8008cf6:	460d      	mov	r5, r1
 8008cf8:	f7f7 ff0e 	bl	8000b18 <__aeabi_dcmpgt>
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	f040 80f9 	bne.w	8008ef4 <_dtoa_r+0x6bc>
 8008d02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d06:	4620      	mov	r0, r4
 8008d08:	4629      	mov	r1, r5
 8008d0a:	f7f7 fedd 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d0e:	b118      	cbz	r0, 8008d18 <_dtoa_r+0x4e0>
 8008d10:	f018 0f01 	tst.w	r8, #1
 8008d14:	f040 80ee 	bne.w	8008ef4 <_dtoa_r+0x6bc>
 8008d18:	4649      	mov	r1, r9
 8008d1a:	4658      	mov	r0, fp
 8008d1c:	f000 fc90 	bl	8009640 <_Bfree>
 8008d20:	2300      	movs	r3, #0
 8008d22:	7033      	strb	r3, [r6, #0]
 8008d24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008d26:	3701      	adds	r7, #1
 8008d28:	601f      	str	r7, [r3, #0]
 8008d2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f000 831d 	beq.w	800936c <_dtoa_r+0xb34>
 8008d32:	601e      	str	r6, [r3, #0]
 8008d34:	e31a      	b.n	800936c <_dtoa_r+0xb34>
 8008d36:	07e2      	lsls	r2, r4, #31
 8008d38:	d505      	bpl.n	8008d46 <_dtoa_r+0x50e>
 8008d3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008d3e:	f7f7 fc5b 	bl	80005f8 <__aeabi_dmul>
 8008d42:	3601      	adds	r6, #1
 8008d44:	2301      	movs	r3, #1
 8008d46:	1064      	asrs	r4, r4, #1
 8008d48:	3508      	adds	r5, #8
 8008d4a:	e73f      	b.n	8008bcc <_dtoa_r+0x394>
 8008d4c:	2602      	movs	r6, #2
 8008d4e:	e742      	b.n	8008bd6 <_dtoa_r+0x39e>
 8008d50:	9c07      	ldr	r4, [sp, #28]
 8008d52:	9704      	str	r7, [sp, #16]
 8008d54:	e761      	b.n	8008c1a <_dtoa_r+0x3e2>
 8008d56:	4b27      	ldr	r3, [pc, #156]	@ (8008df4 <_dtoa_r+0x5bc>)
 8008d58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008d5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d5e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d62:	4454      	add	r4, sl
 8008d64:	2900      	cmp	r1, #0
 8008d66:	d053      	beq.n	8008e10 <_dtoa_r+0x5d8>
 8008d68:	4928      	ldr	r1, [pc, #160]	@ (8008e0c <_dtoa_r+0x5d4>)
 8008d6a:	2000      	movs	r0, #0
 8008d6c:	f7f7 fd6e 	bl	800084c <__aeabi_ddiv>
 8008d70:	4633      	mov	r3, r6
 8008d72:	462a      	mov	r2, r5
 8008d74:	f7f7 fa88 	bl	8000288 <__aeabi_dsub>
 8008d78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008d7c:	4656      	mov	r6, sl
 8008d7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d82:	f7f7 fee9 	bl	8000b58 <__aeabi_d2iz>
 8008d86:	4605      	mov	r5, r0
 8008d88:	f7f7 fbcc 	bl	8000524 <__aeabi_i2d>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	460b      	mov	r3, r1
 8008d90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d94:	f7f7 fa78 	bl	8000288 <__aeabi_dsub>
 8008d98:	3530      	adds	r5, #48	@ 0x30
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008da2:	f806 5b01 	strb.w	r5, [r6], #1
 8008da6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008daa:	f7f7 fe97 	bl	8000adc <__aeabi_dcmplt>
 8008dae:	2800      	cmp	r0, #0
 8008db0:	d171      	bne.n	8008e96 <_dtoa_r+0x65e>
 8008db2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008db6:	4911      	ldr	r1, [pc, #68]	@ (8008dfc <_dtoa_r+0x5c4>)
 8008db8:	2000      	movs	r0, #0
 8008dba:	f7f7 fa65 	bl	8000288 <__aeabi_dsub>
 8008dbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008dc2:	f7f7 fe8b 	bl	8000adc <__aeabi_dcmplt>
 8008dc6:	2800      	cmp	r0, #0
 8008dc8:	f040 8095 	bne.w	8008ef6 <_dtoa_r+0x6be>
 8008dcc:	42a6      	cmp	r6, r4
 8008dce:	f43f af50 	beq.w	8008c72 <_dtoa_r+0x43a>
 8008dd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8008e00 <_dtoa_r+0x5c8>)
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f7f7 fc0d 	bl	80005f8 <__aeabi_dmul>
 8008dde:	4b08      	ldr	r3, [pc, #32]	@ (8008e00 <_dtoa_r+0x5c8>)
 8008de0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008de4:	2200      	movs	r2, #0
 8008de6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dea:	f7f7 fc05 	bl	80005f8 <__aeabi_dmul>
 8008dee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008df2:	e7c4      	b.n	8008d7e <_dtoa_r+0x546>
 8008df4:	0800bf28 	.word	0x0800bf28
 8008df8:	0800bf00 	.word	0x0800bf00
 8008dfc:	3ff00000 	.word	0x3ff00000
 8008e00:	40240000 	.word	0x40240000
 8008e04:	401c0000 	.word	0x401c0000
 8008e08:	40140000 	.word	0x40140000
 8008e0c:	3fe00000 	.word	0x3fe00000
 8008e10:	4631      	mov	r1, r6
 8008e12:	4628      	mov	r0, r5
 8008e14:	f7f7 fbf0 	bl	80005f8 <__aeabi_dmul>
 8008e18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008e1c:	9415      	str	r4, [sp, #84]	@ 0x54
 8008e1e:	4656      	mov	r6, sl
 8008e20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e24:	f7f7 fe98 	bl	8000b58 <__aeabi_d2iz>
 8008e28:	4605      	mov	r5, r0
 8008e2a:	f7f7 fb7b 	bl	8000524 <__aeabi_i2d>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	460b      	mov	r3, r1
 8008e32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e36:	f7f7 fa27 	bl	8000288 <__aeabi_dsub>
 8008e3a:	3530      	adds	r5, #48	@ 0x30
 8008e3c:	f806 5b01 	strb.w	r5, [r6], #1
 8008e40:	4602      	mov	r2, r0
 8008e42:	460b      	mov	r3, r1
 8008e44:	42a6      	cmp	r6, r4
 8008e46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008e4a:	f04f 0200 	mov.w	r2, #0
 8008e4e:	d124      	bne.n	8008e9a <_dtoa_r+0x662>
 8008e50:	4bac      	ldr	r3, [pc, #688]	@ (8009104 <_dtoa_r+0x8cc>)
 8008e52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008e56:	f7f7 fa19 	bl	800028c <__adddf3>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e62:	f7f7 fe59 	bl	8000b18 <__aeabi_dcmpgt>
 8008e66:	2800      	cmp	r0, #0
 8008e68:	d145      	bne.n	8008ef6 <_dtoa_r+0x6be>
 8008e6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008e6e:	49a5      	ldr	r1, [pc, #660]	@ (8009104 <_dtoa_r+0x8cc>)
 8008e70:	2000      	movs	r0, #0
 8008e72:	f7f7 fa09 	bl	8000288 <__aeabi_dsub>
 8008e76:	4602      	mov	r2, r0
 8008e78:	460b      	mov	r3, r1
 8008e7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e7e:	f7f7 fe2d 	bl	8000adc <__aeabi_dcmplt>
 8008e82:	2800      	cmp	r0, #0
 8008e84:	f43f aef5 	beq.w	8008c72 <_dtoa_r+0x43a>
 8008e88:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008e8a:	1e73      	subs	r3, r6, #1
 8008e8c:	9315      	str	r3, [sp, #84]	@ 0x54
 8008e8e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008e92:	2b30      	cmp	r3, #48	@ 0x30
 8008e94:	d0f8      	beq.n	8008e88 <_dtoa_r+0x650>
 8008e96:	9f04      	ldr	r7, [sp, #16]
 8008e98:	e73e      	b.n	8008d18 <_dtoa_r+0x4e0>
 8008e9a:	4b9b      	ldr	r3, [pc, #620]	@ (8009108 <_dtoa_r+0x8d0>)
 8008e9c:	f7f7 fbac 	bl	80005f8 <__aeabi_dmul>
 8008ea0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ea4:	e7bc      	b.n	8008e20 <_dtoa_r+0x5e8>
 8008ea6:	d10c      	bne.n	8008ec2 <_dtoa_r+0x68a>
 8008ea8:	4b98      	ldr	r3, [pc, #608]	@ (800910c <_dtoa_r+0x8d4>)
 8008eaa:	2200      	movs	r2, #0
 8008eac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008eb0:	f7f7 fba2 	bl	80005f8 <__aeabi_dmul>
 8008eb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008eb8:	f7f7 fe24 	bl	8000b04 <__aeabi_dcmpge>
 8008ebc:	2800      	cmp	r0, #0
 8008ebe:	f000 8157 	beq.w	8009170 <_dtoa_r+0x938>
 8008ec2:	2400      	movs	r4, #0
 8008ec4:	4625      	mov	r5, r4
 8008ec6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ec8:	43db      	mvns	r3, r3
 8008eca:	9304      	str	r3, [sp, #16]
 8008ecc:	4656      	mov	r6, sl
 8008ece:	2700      	movs	r7, #0
 8008ed0:	4621      	mov	r1, r4
 8008ed2:	4658      	mov	r0, fp
 8008ed4:	f000 fbb4 	bl	8009640 <_Bfree>
 8008ed8:	2d00      	cmp	r5, #0
 8008eda:	d0dc      	beq.n	8008e96 <_dtoa_r+0x65e>
 8008edc:	b12f      	cbz	r7, 8008eea <_dtoa_r+0x6b2>
 8008ede:	42af      	cmp	r7, r5
 8008ee0:	d003      	beq.n	8008eea <_dtoa_r+0x6b2>
 8008ee2:	4639      	mov	r1, r7
 8008ee4:	4658      	mov	r0, fp
 8008ee6:	f000 fbab 	bl	8009640 <_Bfree>
 8008eea:	4629      	mov	r1, r5
 8008eec:	4658      	mov	r0, fp
 8008eee:	f000 fba7 	bl	8009640 <_Bfree>
 8008ef2:	e7d0      	b.n	8008e96 <_dtoa_r+0x65e>
 8008ef4:	9704      	str	r7, [sp, #16]
 8008ef6:	4633      	mov	r3, r6
 8008ef8:	461e      	mov	r6, r3
 8008efa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008efe:	2a39      	cmp	r2, #57	@ 0x39
 8008f00:	d107      	bne.n	8008f12 <_dtoa_r+0x6da>
 8008f02:	459a      	cmp	sl, r3
 8008f04:	d1f8      	bne.n	8008ef8 <_dtoa_r+0x6c0>
 8008f06:	9a04      	ldr	r2, [sp, #16]
 8008f08:	3201      	adds	r2, #1
 8008f0a:	9204      	str	r2, [sp, #16]
 8008f0c:	2230      	movs	r2, #48	@ 0x30
 8008f0e:	f88a 2000 	strb.w	r2, [sl]
 8008f12:	781a      	ldrb	r2, [r3, #0]
 8008f14:	3201      	adds	r2, #1
 8008f16:	701a      	strb	r2, [r3, #0]
 8008f18:	e7bd      	b.n	8008e96 <_dtoa_r+0x65e>
 8008f1a:	4b7b      	ldr	r3, [pc, #492]	@ (8009108 <_dtoa_r+0x8d0>)
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f7f7 fb6b 	bl	80005f8 <__aeabi_dmul>
 8008f22:	2200      	movs	r2, #0
 8008f24:	2300      	movs	r3, #0
 8008f26:	4604      	mov	r4, r0
 8008f28:	460d      	mov	r5, r1
 8008f2a:	f7f7 fdcd 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	f43f aebb 	beq.w	8008caa <_dtoa_r+0x472>
 8008f34:	e6f0      	b.n	8008d18 <_dtoa_r+0x4e0>
 8008f36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008f38:	2a00      	cmp	r2, #0
 8008f3a:	f000 80db 	beq.w	80090f4 <_dtoa_r+0x8bc>
 8008f3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f40:	2a01      	cmp	r2, #1
 8008f42:	f300 80bf 	bgt.w	80090c4 <_dtoa_r+0x88c>
 8008f46:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008f48:	2a00      	cmp	r2, #0
 8008f4a:	f000 80b7 	beq.w	80090bc <_dtoa_r+0x884>
 8008f4e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008f52:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008f54:	4646      	mov	r6, r8
 8008f56:	9a08      	ldr	r2, [sp, #32]
 8008f58:	2101      	movs	r1, #1
 8008f5a:	441a      	add	r2, r3
 8008f5c:	4658      	mov	r0, fp
 8008f5e:	4498      	add	r8, r3
 8008f60:	9208      	str	r2, [sp, #32]
 8008f62:	f000 fc6b 	bl	800983c <__i2b>
 8008f66:	4605      	mov	r5, r0
 8008f68:	b15e      	cbz	r6, 8008f82 <_dtoa_r+0x74a>
 8008f6a:	9b08      	ldr	r3, [sp, #32]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	dd08      	ble.n	8008f82 <_dtoa_r+0x74a>
 8008f70:	42b3      	cmp	r3, r6
 8008f72:	9a08      	ldr	r2, [sp, #32]
 8008f74:	bfa8      	it	ge
 8008f76:	4633      	movge	r3, r6
 8008f78:	eba8 0803 	sub.w	r8, r8, r3
 8008f7c:	1af6      	subs	r6, r6, r3
 8008f7e:	1ad3      	subs	r3, r2, r3
 8008f80:	9308      	str	r3, [sp, #32]
 8008f82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f84:	b1f3      	cbz	r3, 8008fc4 <_dtoa_r+0x78c>
 8008f86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f000 80b7 	beq.w	80090fc <_dtoa_r+0x8c4>
 8008f8e:	b18c      	cbz	r4, 8008fb4 <_dtoa_r+0x77c>
 8008f90:	4629      	mov	r1, r5
 8008f92:	4622      	mov	r2, r4
 8008f94:	4658      	mov	r0, fp
 8008f96:	f000 fd11 	bl	80099bc <__pow5mult>
 8008f9a:	464a      	mov	r2, r9
 8008f9c:	4601      	mov	r1, r0
 8008f9e:	4605      	mov	r5, r0
 8008fa0:	4658      	mov	r0, fp
 8008fa2:	f000 fc61 	bl	8009868 <__multiply>
 8008fa6:	4649      	mov	r1, r9
 8008fa8:	9004      	str	r0, [sp, #16]
 8008faa:	4658      	mov	r0, fp
 8008fac:	f000 fb48 	bl	8009640 <_Bfree>
 8008fb0:	9b04      	ldr	r3, [sp, #16]
 8008fb2:	4699      	mov	r9, r3
 8008fb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fb6:	1b1a      	subs	r2, r3, r4
 8008fb8:	d004      	beq.n	8008fc4 <_dtoa_r+0x78c>
 8008fba:	4649      	mov	r1, r9
 8008fbc:	4658      	mov	r0, fp
 8008fbe:	f000 fcfd 	bl	80099bc <__pow5mult>
 8008fc2:	4681      	mov	r9, r0
 8008fc4:	2101      	movs	r1, #1
 8008fc6:	4658      	mov	r0, fp
 8008fc8:	f000 fc38 	bl	800983c <__i2b>
 8008fcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fce:	4604      	mov	r4, r0
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f000 81cf 	beq.w	8009374 <_dtoa_r+0xb3c>
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	4601      	mov	r1, r0
 8008fda:	4658      	mov	r0, fp
 8008fdc:	f000 fcee 	bl	80099bc <__pow5mult>
 8008fe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	4604      	mov	r4, r0
 8008fe6:	f300 8095 	bgt.w	8009114 <_dtoa_r+0x8dc>
 8008fea:	9b02      	ldr	r3, [sp, #8]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	f040 8087 	bne.w	8009100 <_dtoa_r+0x8c8>
 8008ff2:	9b03      	ldr	r3, [sp, #12]
 8008ff4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	f040 8089 	bne.w	8009110 <_dtoa_r+0x8d8>
 8008ffe:	9b03      	ldr	r3, [sp, #12]
 8009000:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009004:	0d1b      	lsrs	r3, r3, #20
 8009006:	051b      	lsls	r3, r3, #20
 8009008:	b12b      	cbz	r3, 8009016 <_dtoa_r+0x7de>
 800900a:	9b08      	ldr	r3, [sp, #32]
 800900c:	3301      	adds	r3, #1
 800900e:	9308      	str	r3, [sp, #32]
 8009010:	f108 0801 	add.w	r8, r8, #1
 8009014:	2301      	movs	r3, #1
 8009016:	930a      	str	r3, [sp, #40]	@ 0x28
 8009018:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800901a:	2b00      	cmp	r3, #0
 800901c:	f000 81b0 	beq.w	8009380 <_dtoa_r+0xb48>
 8009020:	6923      	ldr	r3, [r4, #16]
 8009022:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009026:	6918      	ldr	r0, [r3, #16]
 8009028:	f000 fbbc 	bl	80097a4 <__hi0bits>
 800902c:	f1c0 0020 	rsb	r0, r0, #32
 8009030:	9b08      	ldr	r3, [sp, #32]
 8009032:	4418      	add	r0, r3
 8009034:	f010 001f 	ands.w	r0, r0, #31
 8009038:	d077      	beq.n	800912a <_dtoa_r+0x8f2>
 800903a:	f1c0 0320 	rsb	r3, r0, #32
 800903e:	2b04      	cmp	r3, #4
 8009040:	dd6b      	ble.n	800911a <_dtoa_r+0x8e2>
 8009042:	9b08      	ldr	r3, [sp, #32]
 8009044:	f1c0 001c 	rsb	r0, r0, #28
 8009048:	4403      	add	r3, r0
 800904a:	4480      	add	r8, r0
 800904c:	4406      	add	r6, r0
 800904e:	9308      	str	r3, [sp, #32]
 8009050:	f1b8 0f00 	cmp.w	r8, #0
 8009054:	dd05      	ble.n	8009062 <_dtoa_r+0x82a>
 8009056:	4649      	mov	r1, r9
 8009058:	4642      	mov	r2, r8
 800905a:	4658      	mov	r0, fp
 800905c:	f000 fd08 	bl	8009a70 <__lshift>
 8009060:	4681      	mov	r9, r0
 8009062:	9b08      	ldr	r3, [sp, #32]
 8009064:	2b00      	cmp	r3, #0
 8009066:	dd05      	ble.n	8009074 <_dtoa_r+0x83c>
 8009068:	4621      	mov	r1, r4
 800906a:	461a      	mov	r2, r3
 800906c:	4658      	mov	r0, fp
 800906e:	f000 fcff 	bl	8009a70 <__lshift>
 8009072:	4604      	mov	r4, r0
 8009074:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009076:	2b00      	cmp	r3, #0
 8009078:	d059      	beq.n	800912e <_dtoa_r+0x8f6>
 800907a:	4621      	mov	r1, r4
 800907c:	4648      	mov	r0, r9
 800907e:	f000 fd63 	bl	8009b48 <__mcmp>
 8009082:	2800      	cmp	r0, #0
 8009084:	da53      	bge.n	800912e <_dtoa_r+0x8f6>
 8009086:	1e7b      	subs	r3, r7, #1
 8009088:	9304      	str	r3, [sp, #16]
 800908a:	4649      	mov	r1, r9
 800908c:	2300      	movs	r3, #0
 800908e:	220a      	movs	r2, #10
 8009090:	4658      	mov	r0, fp
 8009092:	f000 faf7 	bl	8009684 <__multadd>
 8009096:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009098:	4681      	mov	r9, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	f000 8172 	beq.w	8009384 <_dtoa_r+0xb4c>
 80090a0:	2300      	movs	r3, #0
 80090a2:	4629      	mov	r1, r5
 80090a4:	220a      	movs	r2, #10
 80090a6:	4658      	mov	r0, fp
 80090a8:	f000 faec 	bl	8009684 <__multadd>
 80090ac:	9b00      	ldr	r3, [sp, #0]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	4605      	mov	r5, r0
 80090b2:	dc67      	bgt.n	8009184 <_dtoa_r+0x94c>
 80090b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090b6:	2b02      	cmp	r3, #2
 80090b8:	dc41      	bgt.n	800913e <_dtoa_r+0x906>
 80090ba:	e063      	b.n	8009184 <_dtoa_r+0x94c>
 80090bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80090be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80090c2:	e746      	b.n	8008f52 <_dtoa_r+0x71a>
 80090c4:	9b07      	ldr	r3, [sp, #28]
 80090c6:	1e5c      	subs	r4, r3, #1
 80090c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090ca:	42a3      	cmp	r3, r4
 80090cc:	bfbf      	itttt	lt
 80090ce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80090d0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80090d2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80090d4:	1ae3      	sublt	r3, r4, r3
 80090d6:	bfb4      	ite	lt
 80090d8:	18d2      	addlt	r2, r2, r3
 80090da:	1b1c      	subge	r4, r3, r4
 80090dc:	9b07      	ldr	r3, [sp, #28]
 80090de:	bfbc      	itt	lt
 80090e0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80090e2:	2400      	movlt	r4, #0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	bfb5      	itete	lt
 80090e8:	eba8 0603 	sublt.w	r6, r8, r3
 80090ec:	9b07      	ldrge	r3, [sp, #28]
 80090ee:	2300      	movlt	r3, #0
 80090f0:	4646      	movge	r6, r8
 80090f2:	e730      	b.n	8008f56 <_dtoa_r+0x71e>
 80090f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80090f6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80090f8:	4646      	mov	r6, r8
 80090fa:	e735      	b.n	8008f68 <_dtoa_r+0x730>
 80090fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80090fe:	e75c      	b.n	8008fba <_dtoa_r+0x782>
 8009100:	2300      	movs	r3, #0
 8009102:	e788      	b.n	8009016 <_dtoa_r+0x7de>
 8009104:	3fe00000 	.word	0x3fe00000
 8009108:	40240000 	.word	0x40240000
 800910c:	40140000 	.word	0x40140000
 8009110:	9b02      	ldr	r3, [sp, #8]
 8009112:	e780      	b.n	8009016 <_dtoa_r+0x7de>
 8009114:	2300      	movs	r3, #0
 8009116:	930a      	str	r3, [sp, #40]	@ 0x28
 8009118:	e782      	b.n	8009020 <_dtoa_r+0x7e8>
 800911a:	d099      	beq.n	8009050 <_dtoa_r+0x818>
 800911c:	9a08      	ldr	r2, [sp, #32]
 800911e:	331c      	adds	r3, #28
 8009120:	441a      	add	r2, r3
 8009122:	4498      	add	r8, r3
 8009124:	441e      	add	r6, r3
 8009126:	9208      	str	r2, [sp, #32]
 8009128:	e792      	b.n	8009050 <_dtoa_r+0x818>
 800912a:	4603      	mov	r3, r0
 800912c:	e7f6      	b.n	800911c <_dtoa_r+0x8e4>
 800912e:	9b07      	ldr	r3, [sp, #28]
 8009130:	9704      	str	r7, [sp, #16]
 8009132:	2b00      	cmp	r3, #0
 8009134:	dc20      	bgt.n	8009178 <_dtoa_r+0x940>
 8009136:	9300      	str	r3, [sp, #0]
 8009138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800913a:	2b02      	cmp	r3, #2
 800913c:	dd1e      	ble.n	800917c <_dtoa_r+0x944>
 800913e:	9b00      	ldr	r3, [sp, #0]
 8009140:	2b00      	cmp	r3, #0
 8009142:	f47f aec0 	bne.w	8008ec6 <_dtoa_r+0x68e>
 8009146:	4621      	mov	r1, r4
 8009148:	2205      	movs	r2, #5
 800914a:	4658      	mov	r0, fp
 800914c:	f000 fa9a 	bl	8009684 <__multadd>
 8009150:	4601      	mov	r1, r0
 8009152:	4604      	mov	r4, r0
 8009154:	4648      	mov	r0, r9
 8009156:	f000 fcf7 	bl	8009b48 <__mcmp>
 800915a:	2800      	cmp	r0, #0
 800915c:	f77f aeb3 	ble.w	8008ec6 <_dtoa_r+0x68e>
 8009160:	4656      	mov	r6, sl
 8009162:	2331      	movs	r3, #49	@ 0x31
 8009164:	f806 3b01 	strb.w	r3, [r6], #1
 8009168:	9b04      	ldr	r3, [sp, #16]
 800916a:	3301      	adds	r3, #1
 800916c:	9304      	str	r3, [sp, #16]
 800916e:	e6ae      	b.n	8008ece <_dtoa_r+0x696>
 8009170:	9c07      	ldr	r4, [sp, #28]
 8009172:	9704      	str	r7, [sp, #16]
 8009174:	4625      	mov	r5, r4
 8009176:	e7f3      	b.n	8009160 <_dtoa_r+0x928>
 8009178:	9b07      	ldr	r3, [sp, #28]
 800917a:	9300      	str	r3, [sp, #0]
 800917c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800917e:	2b00      	cmp	r3, #0
 8009180:	f000 8104 	beq.w	800938c <_dtoa_r+0xb54>
 8009184:	2e00      	cmp	r6, #0
 8009186:	dd05      	ble.n	8009194 <_dtoa_r+0x95c>
 8009188:	4629      	mov	r1, r5
 800918a:	4632      	mov	r2, r6
 800918c:	4658      	mov	r0, fp
 800918e:	f000 fc6f 	bl	8009a70 <__lshift>
 8009192:	4605      	mov	r5, r0
 8009194:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009196:	2b00      	cmp	r3, #0
 8009198:	d05a      	beq.n	8009250 <_dtoa_r+0xa18>
 800919a:	6869      	ldr	r1, [r5, #4]
 800919c:	4658      	mov	r0, fp
 800919e:	f000 fa0f 	bl	80095c0 <_Balloc>
 80091a2:	4606      	mov	r6, r0
 80091a4:	b928      	cbnz	r0, 80091b2 <_dtoa_r+0x97a>
 80091a6:	4b84      	ldr	r3, [pc, #528]	@ (80093b8 <_dtoa_r+0xb80>)
 80091a8:	4602      	mov	r2, r0
 80091aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80091ae:	f7ff bb5a 	b.w	8008866 <_dtoa_r+0x2e>
 80091b2:	692a      	ldr	r2, [r5, #16]
 80091b4:	3202      	adds	r2, #2
 80091b6:	0092      	lsls	r2, r2, #2
 80091b8:	f105 010c 	add.w	r1, r5, #12
 80091bc:	300c      	adds	r0, #12
 80091be:	f7ff fa9c 	bl	80086fa <memcpy>
 80091c2:	2201      	movs	r2, #1
 80091c4:	4631      	mov	r1, r6
 80091c6:	4658      	mov	r0, fp
 80091c8:	f000 fc52 	bl	8009a70 <__lshift>
 80091cc:	f10a 0301 	add.w	r3, sl, #1
 80091d0:	9307      	str	r3, [sp, #28]
 80091d2:	9b00      	ldr	r3, [sp, #0]
 80091d4:	4453      	add	r3, sl
 80091d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091d8:	9b02      	ldr	r3, [sp, #8]
 80091da:	f003 0301 	and.w	r3, r3, #1
 80091de:	462f      	mov	r7, r5
 80091e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80091e2:	4605      	mov	r5, r0
 80091e4:	9b07      	ldr	r3, [sp, #28]
 80091e6:	4621      	mov	r1, r4
 80091e8:	3b01      	subs	r3, #1
 80091ea:	4648      	mov	r0, r9
 80091ec:	9300      	str	r3, [sp, #0]
 80091ee:	f7ff fa99 	bl	8008724 <quorem>
 80091f2:	4639      	mov	r1, r7
 80091f4:	9002      	str	r0, [sp, #8]
 80091f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80091fa:	4648      	mov	r0, r9
 80091fc:	f000 fca4 	bl	8009b48 <__mcmp>
 8009200:	462a      	mov	r2, r5
 8009202:	9008      	str	r0, [sp, #32]
 8009204:	4621      	mov	r1, r4
 8009206:	4658      	mov	r0, fp
 8009208:	f000 fcba 	bl	8009b80 <__mdiff>
 800920c:	68c2      	ldr	r2, [r0, #12]
 800920e:	4606      	mov	r6, r0
 8009210:	bb02      	cbnz	r2, 8009254 <_dtoa_r+0xa1c>
 8009212:	4601      	mov	r1, r0
 8009214:	4648      	mov	r0, r9
 8009216:	f000 fc97 	bl	8009b48 <__mcmp>
 800921a:	4602      	mov	r2, r0
 800921c:	4631      	mov	r1, r6
 800921e:	4658      	mov	r0, fp
 8009220:	920e      	str	r2, [sp, #56]	@ 0x38
 8009222:	f000 fa0d 	bl	8009640 <_Bfree>
 8009226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009228:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800922a:	9e07      	ldr	r6, [sp, #28]
 800922c:	ea43 0102 	orr.w	r1, r3, r2
 8009230:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009232:	4319      	orrs	r1, r3
 8009234:	d110      	bne.n	8009258 <_dtoa_r+0xa20>
 8009236:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800923a:	d029      	beq.n	8009290 <_dtoa_r+0xa58>
 800923c:	9b08      	ldr	r3, [sp, #32]
 800923e:	2b00      	cmp	r3, #0
 8009240:	dd02      	ble.n	8009248 <_dtoa_r+0xa10>
 8009242:	9b02      	ldr	r3, [sp, #8]
 8009244:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009248:	9b00      	ldr	r3, [sp, #0]
 800924a:	f883 8000 	strb.w	r8, [r3]
 800924e:	e63f      	b.n	8008ed0 <_dtoa_r+0x698>
 8009250:	4628      	mov	r0, r5
 8009252:	e7bb      	b.n	80091cc <_dtoa_r+0x994>
 8009254:	2201      	movs	r2, #1
 8009256:	e7e1      	b.n	800921c <_dtoa_r+0x9e4>
 8009258:	9b08      	ldr	r3, [sp, #32]
 800925a:	2b00      	cmp	r3, #0
 800925c:	db04      	blt.n	8009268 <_dtoa_r+0xa30>
 800925e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009260:	430b      	orrs	r3, r1
 8009262:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009264:	430b      	orrs	r3, r1
 8009266:	d120      	bne.n	80092aa <_dtoa_r+0xa72>
 8009268:	2a00      	cmp	r2, #0
 800926a:	dded      	ble.n	8009248 <_dtoa_r+0xa10>
 800926c:	4649      	mov	r1, r9
 800926e:	2201      	movs	r2, #1
 8009270:	4658      	mov	r0, fp
 8009272:	f000 fbfd 	bl	8009a70 <__lshift>
 8009276:	4621      	mov	r1, r4
 8009278:	4681      	mov	r9, r0
 800927a:	f000 fc65 	bl	8009b48 <__mcmp>
 800927e:	2800      	cmp	r0, #0
 8009280:	dc03      	bgt.n	800928a <_dtoa_r+0xa52>
 8009282:	d1e1      	bne.n	8009248 <_dtoa_r+0xa10>
 8009284:	f018 0f01 	tst.w	r8, #1
 8009288:	d0de      	beq.n	8009248 <_dtoa_r+0xa10>
 800928a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800928e:	d1d8      	bne.n	8009242 <_dtoa_r+0xa0a>
 8009290:	9a00      	ldr	r2, [sp, #0]
 8009292:	2339      	movs	r3, #57	@ 0x39
 8009294:	7013      	strb	r3, [r2, #0]
 8009296:	4633      	mov	r3, r6
 8009298:	461e      	mov	r6, r3
 800929a:	3b01      	subs	r3, #1
 800929c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80092a0:	2a39      	cmp	r2, #57	@ 0x39
 80092a2:	d052      	beq.n	800934a <_dtoa_r+0xb12>
 80092a4:	3201      	adds	r2, #1
 80092a6:	701a      	strb	r2, [r3, #0]
 80092a8:	e612      	b.n	8008ed0 <_dtoa_r+0x698>
 80092aa:	2a00      	cmp	r2, #0
 80092ac:	dd07      	ble.n	80092be <_dtoa_r+0xa86>
 80092ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80092b2:	d0ed      	beq.n	8009290 <_dtoa_r+0xa58>
 80092b4:	9a00      	ldr	r2, [sp, #0]
 80092b6:	f108 0301 	add.w	r3, r8, #1
 80092ba:	7013      	strb	r3, [r2, #0]
 80092bc:	e608      	b.n	8008ed0 <_dtoa_r+0x698>
 80092be:	9b07      	ldr	r3, [sp, #28]
 80092c0:	9a07      	ldr	r2, [sp, #28]
 80092c2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80092c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d028      	beq.n	800931e <_dtoa_r+0xae6>
 80092cc:	4649      	mov	r1, r9
 80092ce:	2300      	movs	r3, #0
 80092d0:	220a      	movs	r2, #10
 80092d2:	4658      	mov	r0, fp
 80092d4:	f000 f9d6 	bl	8009684 <__multadd>
 80092d8:	42af      	cmp	r7, r5
 80092da:	4681      	mov	r9, r0
 80092dc:	f04f 0300 	mov.w	r3, #0
 80092e0:	f04f 020a 	mov.w	r2, #10
 80092e4:	4639      	mov	r1, r7
 80092e6:	4658      	mov	r0, fp
 80092e8:	d107      	bne.n	80092fa <_dtoa_r+0xac2>
 80092ea:	f000 f9cb 	bl	8009684 <__multadd>
 80092ee:	4607      	mov	r7, r0
 80092f0:	4605      	mov	r5, r0
 80092f2:	9b07      	ldr	r3, [sp, #28]
 80092f4:	3301      	adds	r3, #1
 80092f6:	9307      	str	r3, [sp, #28]
 80092f8:	e774      	b.n	80091e4 <_dtoa_r+0x9ac>
 80092fa:	f000 f9c3 	bl	8009684 <__multadd>
 80092fe:	4629      	mov	r1, r5
 8009300:	4607      	mov	r7, r0
 8009302:	2300      	movs	r3, #0
 8009304:	220a      	movs	r2, #10
 8009306:	4658      	mov	r0, fp
 8009308:	f000 f9bc 	bl	8009684 <__multadd>
 800930c:	4605      	mov	r5, r0
 800930e:	e7f0      	b.n	80092f2 <_dtoa_r+0xaba>
 8009310:	9b00      	ldr	r3, [sp, #0]
 8009312:	2b00      	cmp	r3, #0
 8009314:	bfcc      	ite	gt
 8009316:	461e      	movgt	r6, r3
 8009318:	2601      	movle	r6, #1
 800931a:	4456      	add	r6, sl
 800931c:	2700      	movs	r7, #0
 800931e:	4649      	mov	r1, r9
 8009320:	2201      	movs	r2, #1
 8009322:	4658      	mov	r0, fp
 8009324:	f000 fba4 	bl	8009a70 <__lshift>
 8009328:	4621      	mov	r1, r4
 800932a:	4681      	mov	r9, r0
 800932c:	f000 fc0c 	bl	8009b48 <__mcmp>
 8009330:	2800      	cmp	r0, #0
 8009332:	dcb0      	bgt.n	8009296 <_dtoa_r+0xa5e>
 8009334:	d102      	bne.n	800933c <_dtoa_r+0xb04>
 8009336:	f018 0f01 	tst.w	r8, #1
 800933a:	d1ac      	bne.n	8009296 <_dtoa_r+0xa5e>
 800933c:	4633      	mov	r3, r6
 800933e:	461e      	mov	r6, r3
 8009340:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009344:	2a30      	cmp	r2, #48	@ 0x30
 8009346:	d0fa      	beq.n	800933e <_dtoa_r+0xb06>
 8009348:	e5c2      	b.n	8008ed0 <_dtoa_r+0x698>
 800934a:	459a      	cmp	sl, r3
 800934c:	d1a4      	bne.n	8009298 <_dtoa_r+0xa60>
 800934e:	9b04      	ldr	r3, [sp, #16]
 8009350:	3301      	adds	r3, #1
 8009352:	9304      	str	r3, [sp, #16]
 8009354:	2331      	movs	r3, #49	@ 0x31
 8009356:	f88a 3000 	strb.w	r3, [sl]
 800935a:	e5b9      	b.n	8008ed0 <_dtoa_r+0x698>
 800935c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800935e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80093bc <_dtoa_r+0xb84>
 8009362:	b11b      	cbz	r3, 800936c <_dtoa_r+0xb34>
 8009364:	f10a 0308 	add.w	r3, sl, #8
 8009368:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800936a:	6013      	str	r3, [r2, #0]
 800936c:	4650      	mov	r0, sl
 800936e:	b019      	add	sp, #100	@ 0x64
 8009370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009374:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009376:	2b01      	cmp	r3, #1
 8009378:	f77f ae37 	ble.w	8008fea <_dtoa_r+0x7b2>
 800937c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800937e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009380:	2001      	movs	r0, #1
 8009382:	e655      	b.n	8009030 <_dtoa_r+0x7f8>
 8009384:	9b00      	ldr	r3, [sp, #0]
 8009386:	2b00      	cmp	r3, #0
 8009388:	f77f aed6 	ble.w	8009138 <_dtoa_r+0x900>
 800938c:	4656      	mov	r6, sl
 800938e:	4621      	mov	r1, r4
 8009390:	4648      	mov	r0, r9
 8009392:	f7ff f9c7 	bl	8008724 <quorem>
 8009396:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800939a:	f806 8b01 	strb.w	r8, [r6], #1
 800939e:	9b00      	ldr	r3, [sp, #0]
 80093a0:	eba6 020a 	sub.w	r2, r6, sl
 80093a4:	4293      	cmp	r3, r2
 80093a6:	ddb3      	ble.n	8009310 <_dtoa_r+0xad8>
 80093a8:	4649      	mov	r1, r9
 80093aa:	2300      	movs	r3, #0
 80093ac:	220a      	movs	r2, #10
 80093ae:	4658      	mov	r0, fp
 80093b0:	f000 f968 	bl	8009684 <__multadd>
 80093b4:	4681      	mov	r9, r0
 80093b6:	e7ea      	b.n	800938e <_dtoa_r+0xb56>
 80093b8:	0800be83 	.word	0x0800be83
 80093bc:	0800be07 	.word	0x0800be07

080093c0 <_free_r>:
 80093c0:	b538      	push	{r3, r4, r5, lr}
 80093c2:	4605      	mov	r5, r0
 80093c4:	2900      	cmp	r1, #0
 80093c6:	d041      	beq.n	800944c <_free_r+0x8c>
 80093c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093cc:	1f0c      	subs	r4, r1, #4
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	bfb8      	it	lt
 80093d2:	18e4      	addlt	r4, r4, r3
 80093d4:	f000 f8e8 	bl	80095a8 <__malloc_lock>
 80093d8:	4a1d      	ldr	r2, [pc, #116]	@ (8009450 <_free_r+0x90>)
 80093da:	6813      	ldr	r3, [r2, #0]
 80093dc:	b933      	cbnz	r3, 80093ec <_free_r+0x2c>
 80093de:	6063      	str	r3, [r4, #4]
 80093e0:	6014      	str	r4, [r2, #0]
 80093e2:	4628      	mov	r0, r5
 80093e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093e8:	f000 b8e4 	b.w	80095b4 <__malloc_unlock>
 80093ec:	42a3      	cmp	r3, r4
 80093ee:	d908      	bls.n	8009402 <_free_r+0x42>
 80093f0:	6820      	ldr	r0, [r4, #0]
 80093f2:	1821      	adds	r1, r4, r0
 80093f4:	428b      	cmp	r3, r1
 80093f6:	bf01      	itttt	eq
 80093f8:	6819      	ldreq	r1, [r3, #0]
 80093fa:	685b      	ldreq	r3, [r3, #4]
 80093fc:	1809      	addeq	r1, r1, r0
 80093fe:	6021      	streq	r1, [r4, #0]
 8009400:	e7ed      	b.n	80093de <_free_r+0x1e>
 8009402:	461a      	mov	r2, r3
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	b10b      	cbz	r3, 800940c <_free_r+0x4c>
 8009408:	42a3      	cmp	r3, r4
 800940a:	d9fa      	bls.n	8009402 <_free_r+0x42>
 800940c:	6811      	ldr	r1, [r2, #0]
 800940e:	1850      	adds	r0, r2, r1
 8009410:	42a0      	cmp	r0, r4
 8009412:	d10b      	bne.n	800942c <_free_r+0x6c>
 8009414:	6820      	ldr	r0, [r4, #0]
 8009416:	4401      	add	r1, r0
 8009418:	1850      	adds	r0, r2, r1
 800941a:	4283      	cmp	r3, r0
 800941c:	6011      	str	r1, [r2, #0]
 800941e:	d1e0      	bne.n	80093e2 <_free_r+0x22>
 8009420:	6818      	ldr	r0, [r3, #0]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	6053      	str	r3, [r2, #4]
 8009426:	4408      	add	r0, r1
 8009428:	6010      	str	r0, [r2, #0]
 800942a:	e7da      	b.n	80093e2 <_free_r+0x22>
 800942c:	d902      	bls.n	8009434 <_free_r+0x74>
 800942e:	230c      	movs	r3, #12
 8009430:	602b      	str	r3, [r5, #0]
 8009432:	e7d6      	b.n	80093e2 <_free_r+0x22>
 8009434:	6820      	ldr	r0, [r4, #0]
 8009436:	1821      	adds	r1, r4, r0
 8009438:	428b      	cmp	r3, r1
 800943a:	bf04      	itt	eq
 800943c:	6819      	ldreq	r1, [r3, #0]
 800943e:	685b      	ldreq	r3, [r3, #4]
 8009440:	6063      	str	r3, [r4, #4]
 8009442:	bf04      	itt	eq
 8009444:	1809      	addeq	r1, r1, r0
 8009446:	6021      	streq	r1, [r4, #0]
 8009448:	6054      	str	r4, [r2, #4]
 800944a:	e7ca      	b.n	80093e2 <_free_r+0x22>
 800944c:	bd38      	pop	{r3, r4, r5, pc}
 800944e:	bf00      	nop
 8009450:	200048f4 	.word	0x200048f4

08009454 <malloc>:
 8009454:	4b02      	ldr	r3, [pc, #8]	@ (8009460 <malloc+0xc>)
 8009456:	4601      	mov	r1, r0
 8009458:	6818      	ldr	r0, [r3, #0]
 800945a:	f000 b825 	b.w	80094a8 <_malloc_r>
 800945e:	bf00      	nop
 8009460:	2000001c 	.word	0x2000001c

08009464 <sbrk_aligned>:
 8009464:	b570      	push	{r4, r5, r6, lr}
 8009466:	4e0f      	ldr	r6, [pc, #60]	@ (80094a4 <sbrk_aligned+0x40>)
 8009468:	460c      	mov	r4, r1
 800946a:	6831      	ldr	r1, [r6, #0]
 800946c:	4605      	mov	r5, r0
 800946e:	b911      	cbnz	r1, 8009476 <sbrk_aligned+0x12>
 8009470:	f001 ffd2 	bl	800b418 <_sbrk_r>
 8009474:	6030      	str	r0, [r6, #0]
 8009476:	4621      	mov	r1, r4
 8009478:	4628      	mov	r0, r5
 800947a:	f001 ffcd 	bl	800b418 <_sbrk_r>
 800947e:	1c43      	adds	r3, r0, #1
 8009480:	d103      	bne.n	800948a <sbrk_aligned+0x26>
 8009482:	f04f 34ff 	mov.w	r4, #4294967295
 8009486:	4620      	mov	r0, r4
 8009488:	bd70      	pop	{r4, r5, r6, pc}
 800948a:	1cc4      	adds	r4, r0, #3
 800948c:	f024 0403 	bic.w	r4, r4, #3
 8009490:	42a0      	cmp	r0, r4
 8009492:	d0f8      	beq.n	8009486 <sbrk_aligned+0x22>
 8009494:	1a21      	subs	r1, r4, r0
 8009496:	4628      	mov	r0, r5
 8009498:	f001 ffbe 	bl	800b418 <_sbrk_r>
 800949c:	3001      	adds	r0, #1
 800949e:	d1f2      	bne.n	8009486 <sbrk_aligned+0x22>
 80094a0:	e7ef      	b.n	8009482 <sbrk_aligned+0x1e>
 80094a2:	bf00      	nop
 80094a4:	200048f0 	.word	0x200048f0

080094a8 <_malloc_r>:
 80094a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094ac:	1ccd      	adds	r5, r1, #3
 80094ae:	f025 0503 	bic.w	r5, r5, #3
 80094b2:	3508      	adds	r5, #8
 80094b4:	2d0c      	cmp	r5, #12
 80094b6:	bf38      	it	cc
 80094b8:	250c      	movcc	r5, #12
 80094ba:	2d00      	cmp	r5, #0
 80094bc:	4606      	mov	r6, r0
 80094be:	db01      	blt.n	80094c4 <_malloc_r+0x1c>
 80094c0:	42a9      	cmp	r1, r5
 80094c2:	d904      	bls.n	80094ce <_malloc_r+0x26>
 80094c4:	230c      	movs	r3, #12
 80094c6:	6033      	str	r3, [r6, #0]
 80094c8:	2000      	movs	r0, #0
 80094ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80095a4 <_malloc_r+0xfc>
 80094d2:	f000 f869 	bl	80095a8 <__malloc_lock>
 80094d6:	f8d8 3000 	ldr.w	r3, [r8]
 80094da:	461c      	mov	r4, r3
 80094dc:	bb44      	cbnz	r4, 8009530 <_malloc_r+0x88>
 80094de:	4629      	mov	r1, r5
 80094e0:	4630      	mov	r0, r6
 80094e2:	f7ff ffbf 	bl	8009464 <sbrk_aligned>
 80094e6:	1c43      	adds	r3, r0, #1
 80094e8:	4604      	mov	r4, r0
 80094ea:	d158      	bne.n	800959e <_malloc_r+0xf6>
 80094ec:	f8d8 4000 	ldr.w	r4, [r8]
 80094f0:	4627      	mov	r7, r4
 80094f2:	2f00      	cmp	r7, #0
 80094f4:	d143      	bne.n	800957e <_malloc_r+0xd6>
 80094f6:	2c00      	cmp	r4, #0
 80094f8:	d04b      	beq.n	8009592 <_malloc_r+0xea>
 80094fa:	6823      	ldr	r3, [r4, #0]
 80094fc:	4639      	mov	r1, r7
 80094fe:	4630      	mov	r0, r6
 8009500:	eb04 0903 	add.w	r9, r4, r3
 8009504:	f001 ff88 	bl	800b418 <_sbrk_r>
 8009508:	4581      	cmp	r9, r0
 800950a:	d142      	bne.n	8009592 <_malloc_r+0xea>
 800950c:	6821      	ldr	r1, [r4, #0]
 800950e:	1a6d      	subs	r5, r5, r1
 8009510:	4629      	mov	r1, r5
 8009512:	4630      	mov	r0, r6
 8009514:	f7ff ffa6 	bl	8009464 <sbrk_aligned>
 8009518:	3001      	adds	r0, #1
 800951a:	d03a      	beq.n	8009592 <_malloc_r+0xea>
 800951c:	6823      	ldr	r3, [r4, #0]
 800951e:	442b      	add	r3, r5
 8009520:	6023      	str	r3, [r4, #0]
 8009522:	f8d8 3000 	ldr.w	r3, [r8]
 8009526:	685a      	ldr	r2, [r3, #4]
 8009528:	bb62      	cbnz	r2, 8009584 <_malloc_r+0xdc>
 800952a:	f8c8 7000 	str.w	r7, [r8]
 800952e:	e00f      	b.n	8009550 <_malloc_r+0xa8>
 8009530:	6822      	ldr	r2, [r4, #0]
 8009532:	1b52      	subs	r2, r2, r5
 8009534:	d420      	bmi.n	8009578 <_malloc_r+0xd0>
 8009536:	2a0b      	cmp	r2, #11
 8009538:	d917      	bls.n	800956a <_malloc_r+0xc2>
 800953a:	1961      	adds	r1, r4, r5
 800953c:	42a3      	cmp	r3, r4
 800953e:	6025      	str	r5, [r4, #0]
 8009540:	bf18      	it	ne
 8009542:	6059      	strne	r1, [r3, #4]
 8009544:	6863      	ldr	r3, [r4, #4]
 8009546:	bf08      	it	eq
 8009548:	f8c8 1000 	streq.w	r1, [r8]
 800954c:	5162      	str	r2, [r4, r5]
 800954e:	604b      	str	r3, [r1, #4]
 8009550:	4630      	mov	r0, r6
 8009552:	f000 f82f 	bl	80095b4 <__malloc_unlock>
 8009556:	f104 000b 	add.w	r0, r4, #11
 800955a:	1d23      	adds	r3, r4, #4
 800955c:	f020 0007 	bic.w	r0, r0, #7
 8009560:	1ac2      	subs	r2, r0, r3
 8009562:	bf1c      	itt	ne
 8009564:	1a1b      	subne	r3, r3, r0
 8009566:	50a3      	strne	r3, [r4, r2]
 8009568:	e7af      	b.n	80094ca <_malloc_r+0x22>
 800956a:	6862      	ldr	r2, [r4, #4]
 800956c:	42a3      	cmp	r3, r4
 800956e:	bf0c      	ite	eq
 8009570:	f8c8 2000 	streq.w	r2, [r8]
 8009574:	605a      	strne	r2, [r3, #4]
 8009576:	e7eb      	b.n	8009550 <_malloc_r+0xa8>
 8009578:	4623      	mov	r3, r4
 800957a:	6864      	ldr	r4, [r4, #4]
 800957c:	e7ae      	b.n	80094dc <_malloc_r+0x34>
 800957e:	463c      	mov	r4, r7
 8009580:	687f      	ldr	r7, [r7, #4]
 8009582:	e7b6      	b.n	80094f2 <_malloc_r+0x4a>
 8009584:	461a      	mov	r2, r3
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	42a3      	cmp	r3, r4
 800958a:	d1fb      	bne.n	8009584 <_malloc_r+0xdc>
 800958c:	2300      	movs	r3, #0
 800958e:	6053      	str	r3, [r2, #4]
 8009590:	e7de      	b.n	8009550 <_malloc_r+0xa8>
 8009592:	230c      	movs	r3, #12
 8009594:	6033      	str	r3, [r6, #0]
 8009596:	4630      	mov	r0, r6
 8009598:	f000 f80c 	bl	80095b4 <__malloc_unlock>
 800959c:	e794      	b.n	80094c8 <_malloc_r+0x20>
 800959e:	6005      	str	r5, [r0, #0]
 80095a0:	e7d6      	b.n	8009550 <_malloc_r+0xa8>
 80095a2:	bf00      	nop
 80095a4:	200048f4 	.word	0x200048f4

080095a8 <__malloc_lock>:
 80095a8:	4801      	ldr	r0, [pc, #4]	@ (80095b0 <__malloc_lock+0x8>)
 80095aa:	f7ff b8a4 	b.w	80086f6 <__retarget_lock_acquire_recursive>
 80095ae:	bf00      	nop
 80095b0:	200048ec 	.word	0x200048ec

080095b4 <__malloc_unlock>:
 80095b4:	4801      	ldr	r0, [pc, #4]	@ (80095bc <__malloc_unlock+0x8>)
 80095b6:	f7ff b89f 	b.w	80086f8 <__retarget_lock_release_recursive>
 80095ba:	bf00      	nop
 80095bc:	200048ec 	.word	0x200048ec

080095c0 <_Balloc>:
 80095c0:	b570      	push	{r4, r5, r6, lr}
 80095c2:	69c6      	ldr	r6, [r0, #28]
 80095c4:	4604      	mov	r4, r0
 80095c6:	460d      	mov	r5, r1
 80095c8:	b976      	cbnz	r6, 80095e8 <_Balloc+0x28>
 80095ca:	2010      	movs	r0, #16
 80095cc:	f7ff ff42 	bl	8009454 <malloc>
 80095d0:	4602      	mov	r2, r0
 80095d2:	61e0      	str	r0, [r4, #28]
 80095d4:	b920      	cbnz	r0, 80095e0 <_Balloc+0x20>
 80095d6:	4b18      	ldr	r3, [pc, #96]	@ (8009638 <_Balloc+0x78>)
 80095d8:	4818      	ldr	r0, [pc, #96]	@ (800963c <_Balloc+0x7c>)
 80095da:	216b      	movs	r1, #107	@ 0x6b
 80095dc:	f001 ff34 	bl	800b448 <__assert_func>
 80095e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095e4:	6006      	str	r6, [r0, #0]
 80095e6:	60c6      	str	r6, [r0, #12]
 80095e8:	69e6      	ldr	r6, [r4, #28]
 80095ea:	68f3      	ldr	r3, [r6, #12]
 80095ec:	b183      	cbz	r3, 8009610 <_Balloc+0x50>
 80095ee:	69e3      	ldr	r3, [r4, #28]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80095f6:	b9b8      	cbnz	r0, 8009628 <_Balloc+0x68>
 80095f8:	2101      	movs	r1, #1
 80095fa:	fa01 f605 	lsl.w	r6, r1, r5
 80095fe:	1d72      	adds	r2, r6, #5
 8009600:	0092      	lsls	r2, r2, #2
 8009602:	4620      	mov	r0, r4
 8009604:	f001 ff3e 	bl	800b484 <_calloc_r>
 8009608:	b160      	cbz	r0, 8009624 <_Balloc+0x64>
 800960a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800960e:	e00e      	b.n	800962e <_Balloc+0x6e>
 8009610:	2221      	movs	r2, #33	@ 0x21
 8009612:	2104      	movs	r1, #4
 8009614:	4620      	mov	r0, r4
 8009616:	f001 ff35 	bl	800b484 <_calloc_r>
 800961a:	69e3      	ldr	r3, [r4, #28]
 800961c:	60f0      	str	r0, [r6, #12]
 800961e:	68db      	ldr	r3, [r3, #12]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d1e4      	bne.n	80095ee <_Balloc+0x2e>
 8009624:	2000      	movs	r0, #0
 8009626:	bd70      	pop	{r4, r5, r6, pc}
 8009628:	6802      	ldr	r2, [r0, #0]
 800962a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800962e:	2300      	movs	r3, #0
 8009630:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009634:	e7f7      	b.n	8009626 <_Balloc+0x66>
 8009636:	bf00      	nop
 8009638:	0800be14 	.word	0x0800be14
 800963c:	0800be94 	.word	0x0800be94

08009640 <_Bfree>:
 8009640:	b570      	push	{r4, r5, r6, lr}
 8009642:	69c6      	ldr	r6, [r0, #28]
 8009644:	4605      	mov	r5, r0
 8009646:	460c      	mov	r4, r1
 8009648:	b976      	cbnz	r6, 8009668 <_Bfree+0x28>
 800964a:	2010      	movs	r0, #16
 800964c:	f7ff ff02 	bl	8009454 <malloc>
 8009650:	4602      	mov	r2, r0
 8009652:	61e8      	str	r0, [r5, #28]
 8009654:	b920      	cbnz	r0, 8009660 <_Bfree+0x20>
 8009656:	4b09      	ldr	r3, [pc, #36]	@ (800967c <_Bfree+0x3c>)
 8009658:	4809      	ldr	r0, [pc, #36]	@ (8009680 <_Bfree+0x40>)
 800965a:	218f      	movs	r1, #143	@ 0x8f
 800965c:	f001 fef4 	bl	800b448 <__assert_func>
 8009660:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009664:	6006      	str	r6, [r0, #0]
 8009666:	60c6      	str	r6, [r0, #12]
 8009668:	b13c      	cbz	r4, 800967a <_Bfree+0x3a>
 800966a:	69eb      	ldr	r3, [r5, #28]
 800966c:	6862      	ldr	r2, [r4, #4]
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009674:	6021      	str	r1, [r4, #0]
 8009676:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800967a:	bd70      	pop	{r4, r5, r6, pc}
 800967c:	0800be14 	.word	0x0800be14
 8009680:	0800be94 	.word	0x0800be94

08009684 <__multadd>:
 8009684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009688:	690d      	ldr	r5, [r1, #16]
 800968a:	4607      	mov	r7, r0
 800968c:	460c      	mov	r4, r1
 800968e:	461e      	mov	r6, r3
 8009690:	f101 0c14 	add.w	ip, r1, #20
 8009694:	2000      	movs	r0, #0
 8009696:	f8dc 3000 	ldr.w	r3, [ip]
 800969a:	b299      	uxth	r1, r3
 800969c:	fb02 6101 	mla	r1, r2, r1, r6
 80096a0:	0c1e      	lsrs	r6, r3, #16
 80096a2:	0c0b      	lsrs	r3, r1, #16
 80096a4:	fb02 3306 	mla	r3, r2, r6, r3
 80096a8:	b289      	uxth	r1, r1
 80096aa:	3001      	adds	r0, #1
 80096ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80096b0:	4285      	cmp	r5, r0
 80096b2:	f84c 1b04 	str.w	r1, [ip], #4
 80096b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80096ba:	dcec      	bgt.n	8009696 <__multadd+0x12>
 80096bc:	b30e      	cbz	r6, 8009702 <__multadd+0x7e>
 80096be:	68a3      	ldr	r3, [r4, #8]
 80096c0:	42ab      	cmp	r3, r5
 80096c2:	dc19      	bgt.n	80096f8 <__multadd+0x74>
 80096c4:	6861      	ldr	r1, [r4, #4]
 80096c6:	4638      	mov	r0, r7
 80096c8:	3101      	adds	r1, #1
 80096ca:	f7ff ff79 	bl	80095c0 <_Balloc>
 80096ce:	4680      	mov	r8, r0
 80096d0:	b928      	cbnz	r0, 80096de <__multadd+0x5a>
 80096d2:	4602      	mov	r2, r0
 80096d4:	4b0c      	ldr	r3, [pc, #48]	@ (8009708 <__multadd+0x84>)
 80096d6:	480d      	ldr	r0, [pc, #52]	@ (800970c <__multadd+0x88>)
 80096d8:	21ba      	movs	r1, #186	@ 0xba
 80096da:	f001 feb5 	bl	800b448 <__assert_func>
 80096de:	6922      	ldr	r2, [r4, #16]
 80096e0:	3202      	adds	r2, #2
 80096e2:	f104 010c 	add.w	r1, r4, #12
 80096e6:	0092      	lsls	r2, r2, #2
 80096e8:	300c      	adds	r0, #12
 80096ea:	f7ff f806 	bl	80086fa <memcpy>
 80096ee:	4621      	mov	r1, r4
 80096f0:	4638      	mov	r0, r7
 80096f2:	f7ff ffa5 	bl	8009640 <_Bfree>
 80096f6:	4644      	mov	r4, r8
 80096f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80096fc:	3501      	adds	r5, #1
 80096fe:	615e      	str	r6, [r3, #20]
 8009700:	6125      	str	r5, [r4, #16]
 8009702:	4620      	mov	r0, r4
 8009704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009708:	0800be83 	.word	0x0800be83
 800970c:	0800be94 	.word	0x0800be94

08009710 <__s2b>:
 8009710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009714:	460c      	mov	r4, r1
 8009716:	4615      	mov	r5, r2
 8009718:	461f      	mov	r7, r3
 800971a:	2209      	movs	r2, #9
 800971c:	3308      	adds	r3, #8
 800971e:	4606      	mov	r6, r0
 8009720:	fb93 f3f2 	sdiv	r3, r3, r2
 8009724:	2100      	movs	r1, #0
 8009726:	2201      	movs	r2, #1
 8009728:	429a      	cmp	r2, r3
 800972a:	db09      	blt.n	8009740 <__s2b+0x30>
 800972c:	4630      	mov	r0, r6
 800972e:	f7ff ff47 	bl	80095c0 <_Balloc>
 8009732:	b940      	cbnz	r0, 8009746 <__s2b+0x36>
 8009734:	4602      	mov	r2, r0
 8009736:	4b19      	ldr	r3, [pc, #100]	@ (800979c <__s2b+0x8c>)
 8009738:	4819      	ldr	r0, [pc, #100]	@ (80097a0 <__s2b+0x90>)
 800973a:	21d3      	movs	r1, #211	@ 0xd3
 800973c:	f001 fe84 	bl	800b448 <__assert_func>
 8009740:	0052      	lsls	r2, r2, #1
 8009742:	3101      	adds	r1, #1
 8009744:	e7f0      	b.n	8009728 <__s2b+0x18>
 8009746:	9b08      	ldr	r3, [sp, #32]
 8009748:	6143      	str	r3, [r0, #20]
 800974a:	2d09      	cmp	r5, #9
 800974c:	f04f 0301 	mov.w	r3, #1
 8009750:	6103      	str	r3, [r0, #16]
 8009752:	dd16      	ble.n	8009782 <__s2b+0x72>
 8009754:	f104 0909 	add.w	r9, r4, #9
 8009758:	46c8      	mov	r8, r9
 800975a:	442c      	add	r4, r5
 800975c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009760:	4601      	mov	r1, r0
 8009762:	3b30      	subs	r3, #48	@ 0x30
 8009764:	220a      	movs	r2, #10
 8009766:	4630      	mov	r0, r6
 8009768:	f7ff ff8c 	bl	8009684 <__multadd>
 800976c:	45a0      	cmp	r8, r4
 800976e:	d1f5      	bne.n	800975c <__s2b+0x4c>
 8009770:	f1a5 0408 	sub.w	r4, r5, #8
 8009774:	444c      	add	r4, r9
 8009776:	1b2d      	subs	r5, r5, r4
 8009778:	1963      	adds	r3, r4, r5
 800977a:	42bb      	cmp	r3, r7
 800977c:	db04      	blt.n	8009788 <__s2b+0x78>
 800977e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009782:	340a      	adds	r4, #10
 8009784:	2509      	movs	r5, #9
 8009786:	e7f6      	b.n	8009776 <__s2b+0x66>
 8009788:	f814 3b01 	ldrb.w	r3, [r4], #1
 800978c:	4601      	mov	r1, r0
 800978e:	3b30      	subs	r3, #48	@ 0x30
 8009790:	220a      	movs	r2, #10
 8009792:	4630      	mov	r0, r6
 8009794:	f7ff ff76 	bl	8009684 <__multadd>
 8009798:	e7ee      	b.n	8009778 <__s2b+0x68>
 800979a:	bf00      	nop
 800979c:	0800be83 	.word	0x0800be83
 80097a0:	0800be94 	.word	0x0800be94

080097a4 <__hi0bits>:
 80097a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80097a8:	4603      	mov	r3, r0
 80097aa:	bf36      	itet	cc
 80097ac:	0403      	lslcc	r3, r0, #16
 80097ae:	2000      	movcs	r0, #0
 80097b0:	2010      	movcc	r0, #16
 80097b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80097b6:	bf3c      	itt	cc
 80097b8:	021b      	lslcc	r3, r3, #8
 80097ba:	3008      	addcc	r0, #8
 80097bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097c0:	bf3c      	itt	cc
 80097c2:	011b      	lslcc	r3, r3, #4
 80097c4:	3004      	addcc	r0, #4
 80097c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097ca:	bf3c      	itt	cc
 80097cc:	009b      	lslcc	r3, r3, #2
 80097ce:	3002      	addcc	r0, #2
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	db05      	blt.n	80097e0 <__hi0bits+0x3c>
 80097d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80097d8:	f100 0001 	add.w	r0, r0, #1
 80097dc:	bf08      	it	eq
 80097de:	2020      	moveq	r0, #32
 80097e0:	4770      	bx	lr

080097e2 <__lo0bits>:
 80097e2:	6803      	ldr	r3, [r0, #0]
 80097e4:	4602      	mov	r2, r0
 80097e6:	f013 0007 	ands.w	r0, r3, #7
 80097ea:	d00b      	beq.n	8009804 <__lo0bits+0x22>
 80097ec:	07d9      	lsls	r1, r3, #31
 80097ee:	d421      	bmi.n	8009834 <__lo0bits+0x52>
 80097f0:	0798      	lsls	r0, r3, #30
 80097f2:	bf49      	itett	mi
 80097f4:	085b      	lsrmi	r3, r3, #1
 80097f6:	089b      	lsrpl	r3, r3, #2
 80097f8:	2001      	movmi	r0, #1
 80097fa:	6013      	strmi	r3, [r2, #0]
 80097fc:	bf5c      	itt	pl
 80097fe:	6013      	strpl	r3, [r2, #0]
 8009800:	2002      	movpl	r0, #2
 8009802:	4770      	bx	lr
 8009804:	b299      	uxth	r1, r3
 8009806:	b909      	cbnz	r1, 800980c <__lo0bits+0x2a>
 8009808:	0c1b      	lsrs	r3, r3, #16
 800980a:	2010      	movs	r0, #16
 800980c:	b2d9      	uxtb	r1, r3
 800980e:	b909      	cbnz	r1, 8009814 <__lo0bits+0x32>
 8009810:	3008      	adds	r0, #8
 8009812:	0a1b      	lsrs	r3, r3, #8
 8009814:	0719      	lsls	r1, r3, #28
 8009816:	bf04      	itt	eq
 8009818:	091b      	lsreq	r3, r3, #4
 800981a:	3004      	addeq	r0, #4
 800981c:	0799      	lsls	r1, r3, #30
 800981e:	bf04      	itt	eq
 8009820:	089b      	lsreq	r3, r3, #2
 8009822:	3002      	addeq	r0, #2
 8009824:	07d9      	lsls	r1, r3, #31
 8009826:	d403      	bmi.n	8009830 <__lo0bits+0x4e>
 8009828:	085b      	lsrs	r3, r3, #1
 800982a:	f100 0001 	add.w	r0, r0, #1
 800982e:	d003      	beq.n	8009838 <__lo0bits+0x56>
 8009830:	6013      	str	r3, [r2, #0]
 8009832:	4770      	bx	lr
 8009834:	2000      	movs	r0, #0
 8009836:	4770      	bx	lr
 8009838:	2020      	movs	r0, #32
 800983a:	4770      	bx	lr

0800983c <__i2b>:
 800983c:	b510      	push	{r4, lr}
 800983e:	460c      	mov	r4, r1
 8009840:	2101      	movs	r1, #1
 8009842:	f7ff febd 	bl	80095c0 <_Balloc>
 8009846:	4602      	mov	r2, r0
 8009848:	b928      	cbnz	r0, 8009856 <__i2b+0x1a>
 800984a:	4b05      	ldr	r3, [pc, #20]	@ (8009860 <__i2b+0x24>)
 800984c:	4805      	ldr	r0, [pc, #20]	@ (8009864 <__i2b+0x28>)
 800984e:	f240 1145 	movw	r1, #325	@ 0x145
 8009852:	f001 fdf9 	bl	800b448 <__assert_func>
 8009856:	2301      	movs	r3, #1
 8009858:	6144      	str	r4, [r0, #20]
 800985a:	6103      	str	r3, [r0, #16]
 800985c:	bd10      	pop	{r4, pc}
 800985e:	bf00      	nop
 8009860:	0800be83 	.word	0x0800be83
 8009864:	0800be94 	.word	0x0800be94

08009868 <__multiply>:
 8009868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800986c:	4614      	mov	r4, r2
 800986e:	690a      	ldr	r2, [r1, #16]
 8009870:	6923      	ldr	r3, [r4, #16]
 8009872:	429a      	cmp	r2, r3
 8009874:	bfa8      	it	ge
 8009876:	4623      	movge	r3, r4
 8009878:	460f      	mov	r7, r1
 800987a:	bfa4      	itt	ge
 800987c:	460c      	movge	r4, r1
 800987e:	461f      	movge	r7, r3
 8009880:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009884:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009888:	68a3      	ldr	r3, [r4, #8]
 800988a:	6861      	ldr	r1, [r4, #4]
 800988c:	eb0a 0609 	add.w	r6, sl, r9
 8009890:	42b3      	cmp	r3, r6
 8009892:	b085      	sub	sp, #20
 8009894:	bfb8      	it	lt
 8009896:	3101      	addlt	r1, #1
 8009898:	f7ff fe92 	bl	80095c0 <_Balloc>
 800989c:	b930      	cbnz	r0, 80098ac <__multiply+0x44>
 800989e:	4602      	mov	r2, r0
 80098a0:	4b44      	ldr	r3, [pc, #272]	@ (80099b4 <__multiply+0x14c>)
 80098a2:	4845      	ldr	r0, [pc, #276]	@ (80099b8 <__multiply+0x150>)
 80098a4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80098a8:	f001 fdce 	bl	800b448 <__assert_func>
 80098ac:	f100 0514 	add.w	r5, r0, #20
 80098b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80098b4:	462b      	mov	r3, r5
 80098b6:	2200      	movs	r2, #0
 80098b8:	4543      	cmp	r3, r8
 80098ba:	d321      	bcc.n	8009900 <__multiply+0x98>
 80098bc:	f107 0114 	add.w	r1, r7, #20
 80098c0:	f104 0214 	add.w	r2, r4, #20
 80098c4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80098c8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80098cc:	9302      	str	r3, [sp, #8]
 80098ce:	1b13      	subs	r3, r2, r4
 80098d0:	3b15      	subs	r3, #21
 80098d2:	f023 0303 	bic.w	r3, r3, #3
 80098d6:	3304      	adds	r3, #4
 80098d8:	f104 0715 	add.w	r7, r4, #21
 80098dc:	42ba      	cmp	r2, r7
 80098de:	bf38      	it	cc
 80098e0:	2304      	movcc	r3, #4
 80098e2:	9301      	str	r3, [sp, #4]
 80098e4:	9b02      	ldr	r3, [sp, #8]
 80098e6:	9103      	str	r1, [sp, #12]
 80098e8:	428b      	cmp	r3, r1
 80098ea:	d80c      	bhi.n	8009906 <__multiply+0x9e>
 80098ec:	2e00      	cmp	r6, #0
 80098ee:	dd03      	ble.n	80098f8 <__multiply+0x90>
 80098f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d05b      	beq.n	80099b0 <__multiply+0x148>
 80098f8:	6106      	str	r6, [r0, #16]
 80098fa:	b005      	add	sp, #20
 80098fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009900:	f843 2b04 	str.w	r2, [r3], #4
 8009904:	e7d8      	b.n	80098b8 <__multiply+0x50>
 8009906:	f8b1 a000 	ldrh.w	sl, [r1]
 800990a:	f1ba 0f00 	cmp.w	sl, #0
 800990e:	d024      	beq.n	800995a <__multiply+0xf2>
 8009910:	f104 0e14 	add.w	lr, r4, #20
 8009914:	46a9      	mov	r9, r5
 8009916:	f04f 0c00 	mov.w	ip, #0
 800991a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800991e:	f8d9 3000 	ldr.w	r3, [r9]
 8009922:	fa1f fb87 	uxth.w	fp, r7
 8009926:	b29b      	uxth	r3, r3
 8009928:	fb0a 330b 	mla	r3, sl, fp, r3
 800992c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009930:	f8d9 7000 	ldr.w	r7, [r9]
 8009934:	4463      	add	r3, ip
 8009936:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800993a:	fb0a c70b 	mla	r7, sl, fp, ip
 800993e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009942:	b29b      	uxth	r3, r3
 8009944:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009948:	4572      	cmp	r2, lr
 800994a:	f849 3b04 	str.w	r3, [r9], #4
 800994e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009952:	d8e2      	bhi.n	800991a <__multiply+0xb2>
 8009954:	9b01      	ldr	r3, [sp, #4]
 8009956:	f845 c003 	str.w	ip, [r5, r3]
 800995a:	9b03      	ldr	r3, [sp, #12]
 800995c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009960:	3104      	adds	r1, #4
 8009962:	f1b9 0f00 	cmp.w	r9, #0
 8009966:	d021      	beq.n	80099ac <__multiply+0x144>
 8009968:	682b      	ldr	r3, [r5, #0]
 800996a:	f104 0c14 	add.w	ip, r4, #20
 800996e:	46ae      	mov	lr, r5
 8009970:	f04f 0a00 	mov.w	sl, #0
 8009974:	f8bc b000 	ldrh.w	fp, [ip]
 8009978:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800997c:	fb09 770b 	mla	r7, r9, fp, r7
 8009980:	4457      	add	r7, sl
 8009982:	b29b      	uxth	r3, r3
 8009984:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009988:	f84e 3b04 	str.w	r3, [lr], #4
 800998c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009990:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009994:	f8be 3000 	ldrh.w	r3, [lr]
 8009998:	fb09 330a 	mla	r3, r9, sl, r3
 800999c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80099a0:	4562      	cmp	r2, ip
 80099a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80099a6:	d8e5      	bhi.n	8009974 <__multiply+0x10c>
 80099a8:	9f01      	ldr	r7, [sp, #4]
 80099aa:	51eb      	str	r3, [r5, r7]
 80099ac:	3504      	adds	r5, #4
 80099ae:	e799      	b.n	80098e4 <__multiply+0x7c>
 80099b0:	3e01      	subs	r6, #1
 80099b2:	e79b      	b.n	80098ec <__multiply+0x84>
 80099b4:	0800be83 	.word	0x0800be83
 80099b8:	0800be94 	.word	0x0800be94

080099bc <__pow5mult>:
 80099bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099c0:	4615      	mov	r5, r2
 80099c2:	f012 0203 	ands.w	r2, r2, #3
 80099c6:	4607      	mov	r7, r0
 80099c8:	460e      	mov	r6, r1
 80099ca:	d007      	beq.n	80099dc <__pow5mult+0x20>
 80099cc:	4c25      	ldr	r4, [pc, #148]	@ (8009a64 <__pow5mult+0xa8>)
 80099ce:	3a01      	subs	r2, #1
 80099d0:	2300      	movs	r3, #0
 80099d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80099d6:	f7ff fe55 	bl	8009684 <__multadd>
 80099da:	4606      	mov	r6, r0
 80099dc:	10ad      	asrs	r5, r5, #2
 80099de:	d03d      	beq.n	8009a5c <__pow5mult+0xa0>
 80099e0:	69fc      	ldr	r4, [r7, #28]
 80099e2:	b97c      	cbnz	r4, 8009a04 <__pow5mult+0x48>
 80099e4:	2010      	movs	r0, #16
 80099e6:	f7ff fd35 	bl	8009454 <malloc>
 80099ea:	4602      	mov	r2, r0
 80099ec:	61f8      	str	r0, [r7, #28]
 80099ee:	b928      	cbnz	r0, 80099fc <__pow5mult+0x40>
 80099f0:	4b1d      	ldr	r3, [pc, #116]	@ (8009a68 <__pow5mult+0xac>)
 80099f2:	481e      	ldr	r0, [pc, #120]	@ (8009a6c <__pow5mult+0xb0>)
 80099f4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80099f8:	f001 fd26 	bl	800b448 <__assert_func>
 80099fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a00:	6004      	str	r4, [r0, #0]
 8009a02:	60c4      	str	r4, [r0, #12]
 8009a04:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009a08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a0c:	b94c      	cbnz	r4, 8009a22 <__pow5mult+0x66>
 8009a0e:	f240 2171 	movw	r1, #625	@ 0x271
 8009a12:	4638      	mov	r0, r7
 8009a14:	f7ff ff12 	bl	800983c <__i2b>
 8009a18:	2300      	movs	r3, #0
 8009a1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a1e:	4604      	mov	r4, r0
 8009a20:	6003      	str	r3, [r0, #0]
 8009a22:	f04f 0900 	mov.w	r9, #0
 8009a26:	07eb      	lsls	r3, r5, #31
 8009a28:	d50a      	bpl.n	8009a40 <__pow5mult+0x84>
 8009a2a:	4631      	mov	r1, r6
 8009a2c:	4622      	mov	r2, r4
 8009a2e:	4638      	mov	r0, r7
 8009a30:	f7ff ff1a 	bl	8009868 <__multiply>
 8009a34:	4631      	mov	r1, r6
 8009a36:	4680      	mov	r8, r0
 8009a38:	4638      	mov	r0, r7
 8009a3a:	f7ff fe01 	bl	8009640 <_Bfree>
 8009a3e:	4646      	mov	r6, r8
 8009a40:	106d      	asrs	r5, r5, #1
 8009a42:	d00b      	beq.n	8009a5c <__pow5mult+0xa0>
 8009a44:	6820      	ldr	r0, [r4, #0]
 8009a46:	b938      	cbnz	r0, 8009a58 <__pow5mult+0x9c>
 8009a48:	4622      	mov	r2, r4
 8009a4a:	4621      	mov	r1, r4
 8009a4c:	4638      	mov	r0, r7
 8009a4e:	f7ff ff0b 	bl	8009868 <__multiply>
 8009a52:	6020      	str	r0, [r4, #0]
 8009a54:	f8c0 9000 	str.w	r9, [r0]
 8009a58:	4604      	mov	r4, r0
 8009a5a:	e7e4      	b.n	8009a26 <__pow5mult+0x6a>
 8009a5c:	4630      	mov	r0, r6
 8009a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a62:	bf00      	nop
 8009a64:	0800bef0 	.word	0x0800bef0
 8009a68:	0800be14 	.word	0x0800be14
 8009a6c:	0800be94 	.word	0x0800be94

08009a70 <__lshift>:
 8009a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a74:	460c      	mov	r4, r1
 8009a76:	6849      	ldr	r1, [r1, #4]
 8009a78:	6923      	ldr	r3, [r4, #16]
 8009a7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a7e:	68a3      	ldr	r3, [r4, #8]
 8009a80:	4607      	mov	r7, r0
 8009a82:	4691      	mov	r9, r2
 8009a84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a88:	f108 0601 	add.w	r6, r8, #1
 8009a8c:	42b3      	cmp	r3, r6
 8009a8e:	db0b      	blt.n	8009aa8 <__lshift+0x38>
 8009a90:	4638      	mov	r0, r7
 8009a92:	f7ff fd95 	bl	80095c0 <_Balloc>
 8009a96:	4605      	mov	r5, r0
 8009a98:	b948      	cbnz	r0, 8009aae <__lshift+0x3e>
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	4b28      	ldr	r3, [pc, #160]	@ (8009b40 <__lshift+0xd0>)
 8009a9e:	4829      	ldr	r0, [pc, #164]	@ (8009b44 <__lshift+0xd4>)
 8009aa0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009aa4:	f001 fcd0 	bl	800b448 <__assert_func>
 8009aa8:	3101      	adds	r1, #1
 8009aaa:	005b      	lsls	r3, r3, #1
 8009aac:	e7ee      	b.n	8009a8c <__lshift+0x1c>
 8009aae:	2300      	movs	r3, #0
 8009ab0:	f100 0114 	add.w	r1, r0, #20
 8009ab4:	f100 0210 	add.w	r2, r0, #16
 8009ab8:	4618      	mov	r0, r3
 8009aba:	4553      	cmp	r3, sl
 8009abc:	db33      	blt.n	8009b26 <__lshift+0xb6>
 8009abe:	6920      	ldr	r0, [r4, #16]
 8009ac0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ac4:	f104 0314 	add.w	r3, r4, #20
 8009ac8:	f019 091f 	ands.w	r9, r9, #31
 8009acc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ad0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009ad4:	d02b      	beq.n	8009b2e <__lshift+0xbe>
 8009ad6:	f1c9 0e20 	rsb	lr, r9, #32
 8009ada:	468a      	mov	sl, r1
 8009adc:	2200      	movs	r2, #0
 8009ade:	6818      	ldr	r0, [r3, #0]
 8009ae0:	fa00 f009 	lsl.w	r0, r0, r9
 8009ae4:	4310      	orrs	r0, r2
 8009ae6:	f84a 0b04 	str.w	r0, [sl], #4
 8009aea:	f853 2b04 	ldr.w	r2, [r3], #4
 8009aee:	459c      	cmp	ip, r3
 8009af0:	fa22 f20e 	lsr.w	r2, r2, lr
 8009af4:	d8f3      	bhi.n	8009ade <__lshift+0x6e>
 8009af6:	ebac 0304 	sub.w	r3, ip, r4
 8009afa:	3b15      	subs	r3, #21
 8009afc:	f023 0303 	bic.w	r3, r3, #3
 8009b00:	3304      	adds	r3, #4
 8009b02:	f104 0015 	add.w	r0, r4, #21
 8009b06:	4584      	cmp	ip, r0
 8009b08:	bf38      	it	cc
 8009b0a:	2304      	movcc	r3, #4
 8009b0c:	50ca      	str	r2, [r1, r3]
 8009b0e:	b10a      	cbz	r2, 8009b14 <__lshift+0xa4>
 8009b10:	f108 0602 	add.w	r6, r8, #2
 8009b14:	3e01      	subs	r6, #1
 8009b16:	4638      	mov	r0, r7
 8009b18:	612e      	str	r6, [r5, #16]
 8009b1a:	4621      	mov	r1, r4
 8009b1c:	f7ff fd90 	bl	8009640 <_Bfree>
 8009b20:	4628      	mov	r0, r5
 8009b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b26:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	e7c5      	b.n	8009aba <__lshift+0x4a>
 8009b2e:	3904      	subs	r1, #4
 8009b30:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b34:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b38:	459c      	cmp	ip, r3
 8009b3a:	d8f9      	bhi.n	8009b30 <__lshift+0xc0>
 8009b3c:	e7ea      	b.n	8009b14 <__lshift+0xa4>
 8009b3e:	bf00      	nop
 8009b40:	0800be83 	.word	0x0800be83
 8009b44:	0800be94 	.word	0x0800be94

08009b48 <__mcmp>:
 8009b48:	690a      	ldr	r2, [r1, #16]
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	6900      	ldr	r0, [r0, #16]
 8009b4e:	1a80      	subs	r0, r0, r2
 8009b50:	b530      	push	{r4, r5, lr}
 8009b52:	d10e      	bne.n	8009b72 <__mcmp+0x2a>
 8009b54:	3314      	adds	r3, #20
 8009b56:	3114      	adds	r1, #20
 8009b58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009b5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009b60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009b64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009b68:	4295      	cmp	r5, r2
 8009b6a:	d003      	beq.n	8009b74 <__mcmp+0x2c>
 8009b6c:	d205      	bcs.n	8009b7a <__mcmp+0x32>
 8009b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b72:	bd30      	pop	{r4, r5, pc}
 8009b74:	42a3      	cmp	r3, r4
 8009b76:	d3f3      	bcc.n	8009b60 <__mcmp+0x18>
 8009b78:	e7fb      	b.n	8009b72 <__mcmp+0x2a>
 8009b7a:	2001      	movs	r0, #1
 8009b7c:	e7f9      	b.n	8009b72 <__mcmp+0x2a>
	...

08009b80 <__mdiff>:
 8009b80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b84:	4689      	mov	r9, r1
 8009b86:	4606      	mov	r6, r0
 8009b88:	4611      	mov	r1, r2
 8009b8a:	4648      	mov	r0, r9
 8009b8c:	4614      	mov	r4, r2
 8009b8e:	f7ff ffdb 	bl	8009b48 <__mcmp>
 8009b92:	1e05      	subs	r5, r0, #0
 8009b94:	d112      	bne.n	8009bbc <__mdiff+0x3c>
 8009b96:	4629      	mov	r1, r5
 8009b98:	4630      	mov	r0, r6
 8009b9a:	f7ff fd11 	bl	80095c0 <_Balloc>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	b928      	cbnz	r0, 8009bae <__mdiff+0x2e>
 8009ba2:	4b3f      	ldr	r3, [pc, #252]	@ (8009ca0 <__mdiff+0x120>)
 8009ba4:	f240 2137 	movw	r1, #567	@ 0x237
 8009ba8:	483e      	ldr	r0, [pc, #248]	@ (8009ca4 <__mdiff+0x124>)
 8009baa:	f001 fc4d 	bl	800b448 <__assert_func>
 8009bae:	2301      	movs	r3, #1
 8009bb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009bb4:	4610      	mov	r0, r2
 8009bb6:	b003      	add	sp, #12
 8009bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bbc:	bfbc      	itt	lt
 8009bbe:	464b      	movlt	r3, r9
 8009bc0:	46a1      	movlt	r9, r4
 8009bc2:	4630      	mov	r0, r6
 8009bc4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009bc8:	bfba      	itte	lt
 8009bca:	461c      	movlt	r4, r3
 8009bcc:	2501      	movlt	r5, #1
 8009bce:	2500      	movge	r5, #0
 8009bd0:	f7ff fcf6 	bl	80095c0 <_Balloc>
 8009bd4:	4602      	mov	r2, r0
 8009bd6:	b918      	cbnz	r0, 8009be0 <__mdiff+0x60>
 8009bd8:	4b31      	ldr	r3, [pc, #196]	@ (8009ca0 <__mdiff+0x120>)
 8009bda:	f240 2145 	movw	r1, #581	@ 0x245
 8009bde:	e7e3      	b.n	8009ba8 <__mdiff+0x28>
 8009be0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009be4:	6926      	ldr	r6, [r4, #16]
 8009be6:	60c5      	str	r5, [r0, #12]
 8009be8:	f109 0310 	add.w	r3, r9, #16
 8009bec:	f109 0514 	add.w	r5, r9, #20
 8009bf0:	f104 0e14 	add.w	lr, r4, #20
 8009bf4:	f100 0b14 	add.w	fp, r0, #20
 8009bf8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009bfc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009c00:	9301      	str	r3, [sp, #4]
 8009c02:	46d9      	mov	r9, fp
 8009c04:	f04f 0c00 	mov.w	ip, #0
 8009c08:	9b01      	ldr	r3, [sp, #4]
 8009c0a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009c0e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009c12:	9301      	str	r3, [sp, #4]
 8009c14:	fa1f f38a 	uxth.w	r3, sl
 8009c18:	4619      	mov	r1, r3
 8009c1a:	b283      	uxth	r3, r0
 8009c1c:	1acb      	subs	r3, r1, r3
 8009c1e:	0c00      	lsrs	r0, r0, #16
 8009c20:	4463      	add	r3, ip
 8009c22:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009c26:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009c2a:	b29b      	uxth	r3, r3
 8009c2c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009c30:	4576      	cmp	r6, lr
 8009c32:	f849 3b04 	str.w	r3, [r9], #4
 8009c36:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009c3a:	d8e5      	bhi.n	8009c08 <__mdiff+0x88>
 8009c3c:	1b33      	subs	r3, r6, r4
 8009c3e:	3b15      	subs	r3, #21
 8009c40:	f023 0303 	bic.w	r3, r3, #3
 8009c44:	3415      	adds	r4, #21
 8009c46:	3304      	adds	r3, #4
 8009c48:	42a6      	cmp	r6, r4
 8009c4a:	bf38      	it	cc
 8009c4c:	2304      	movcc	r3, #4
 8009c4e:	441d      	add	r5, r3
 8009c50:	445b      	add	r3, fp
 8009c52:	461e      	mov	r6, r3
 8009c54:	462c      	mov	r4, r5
 8009c56:	4544      	cmp	r4, r8
 8009c58:	d30e      	bcc.n	8009c78 <__mdiff+0xf8>
 8009c5a:	f108 0103 	add.w	r1, r8, #3
 8009c5e:	1b49      	subs	r1, r1, r5
 8009c60:	f021 0103 	bic.w	r1, r1, #3
 8009c64:	3d03      	subs	r5, #3
 8009c66:	45a8      	cmp	r8, r5
 8009c68:	bf38      	it	cc
 8009c6a:	2100      	movcc	r1, #0
 8009c6c:	440b      	add	r3, r1
 8009c6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c72:	b191      	cbz	r1, 8009c9a <__mdiff+0x11a>
 8009c74:	6117      	str	r7, [r2, #16]
 8009c76:	e79d      	b.n	8009bb4 <__mdiff+0x34>
 8009c78:	f854 1b04 	ldr.w	r1, [r4], #4
 8009c7c:	46e6      	mov	lr, ip
 8009c7e:	0c08      	lsrs	r0, r1, #16
 8009c80:	fa1c fc81 	uxtah	ip, ip, r1
 8009c84:	4471      	add	r1, lr
 8009c86:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009c8a:	b289      	uxth	r1, r1
 8009c8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009c90:	f846 1b04 	str.w	r1, [r6], #4
 8009c94:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009c98:	e7dd      	b.n	8009c56 <__mdiff+0xd6>
 8009c9a:	3f01      	subs	r7, #1
 8009c9c:	e7e7      	b.n	8009c6e <__mdiff+0xee>
 8009c9e:	bf00      	nop
 8009ca0:	0800be83 	.word	0x0800be83
 8009ca4:	0800be94 	.word	0x0800be94

08009ca8 <__ulp>:
 8009ca8:	b082      	sub	sp, #8
 8009caa:	ed8d 0b00 	vstr	d0, [sp]
 8009cae:	9a01      	ldr	r2, [sp, #4]
 8009cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8009cf0 <__ulp+0x48>)
 8009cb2:	4013      	ands	r3, r2
 8009cb4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	dc08      	bgt.n	8009cce <__ulp+0x26>
 8009cbc:	425b      	negs	r3, r3
 8009cbe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009cc2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009cc6:	da04      	bge.n	8009cd2 <__ulp+0x2a>
 8009cc8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009ccc:	4113      	asrs	r3, r2
 8009cce:	2200      	movs	r2, #0
 8009cd0:	e008      	b.n	8009ce4 <__ulp+0x3c>
 8009cd2:	f1a2 0314 	sub.w	r3, r2, #20
 8009cd6:	2b1e      	cmp	r3, #30
 8009cd8:	bfda      	itte	le
 8009cda:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009cde:	40da      	lsrle	r2, r3
 8009ce0:	2201      	movgt	r2, #1
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	4610      	mov	r0, r2
 8009ce8:	ec41 0b10 	vmov	d0, r0, r1
 8009cec:	b002      	add	sp, #8
 8009cee:	4770      	bx	lr
 8009cf0:	7ff00000 	.word	0x7ff00000

08009cf4 <__b2d>:
 8009cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cf8:	6906      	ldr	r6, [r0, #16]
 8009cfa:	f100 0814 	add.w	r8, r0, #20
 8009cfe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009d02:	1f37      	subs	r7, r6, #4
 8009d04:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009d08:	4610      	mov	r0, r2
 8009d0a:	f7ff fd4b 	bl	80097a4 <__hi0bits>
 8009d0e:	f1c0 0320 	rsb	r3, r0, #32
 8009d12:	280a      	cmp	r0, #10
 8009d14:	600b      	str	r3, [r1, #0]
 8009d16:	491b      	ldr	r1, [pc, #108]	@ (8009d84 <__b2d+0x90>)
 8009d18:	dc15      	bgt.n	8009d46 <__b2d+0x52>
 8009d1a:	f1c0 0c0b 	rsb	ip, r0, #11
 8009d1e:	fa22 f30c 	lsr.w	r3, r2, ip
 8009d22:	45b8      	cmp	r8, r7
 8009d24:	ea43 0501 	orr.w	r5, r3, r1
 8009d28:	bf34      	ite	cc
 8009d2a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009d2e:	2300      	movcs	r3, #0
 8009d30:	3015      	adds	r0, #21
 8009d32:	fa02 f000 	lsl.w	r0, r2, r0
 8009d36:	fa23 f30c 	lsr.w	r3, r3, ip
 8009d3a:	4303      	orrs	r3, r0
 8009d3c:	461c      	mov	r4, r3
 8009d3e:	ec45 4b10 	vmov	d0, r4, r5
 8009d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d46:	45b8      	cmp	r8, r7
 8009d48:	bf3a      	itte	cc
 8009d4a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009d4e:	f1a6 0708 	subcc.w	r7, r6, #8
 8009d52:	2300      	movcs	r3, #0
 8009d54:	380b      	subs	r0, #11
 8009d56:	d012      	beq.n	8009d7e <__b2d+0x8a>
 8009d58:	f1c0 0120 	rsb	r1, r0, #32
 8009d5c:	fa23 f401 	lsr.w	r4, r3, r1
 8009d60:	4082      	lsls	r2, r0
 8009d62:	4322      	orrs	r2, r4
 8009d64:	4547      	cmp	r7, r8
 8009d66:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009d6a:	bf8c      	ite	hi
 8009d6c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009d70:	2200      	movls	r2, #0
 8009d72:	4083      	lsls	r3, r0
 8009d74:	40ca      	lsrs	r2, r1
 8009d76:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	e7de      	b.n	8009d3c <__b2d+0x48>
 8009d7e:	ea42 0501 	orr.w	r5, r2, r1
 8009d82:	e7db      	b.n	8009d3c <__b2d+0x48>
 8009d84:	3ff00000 	.word	0x3ff00000

08009d88 <__d2b>:
 8009d88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d8c:	460f      	mov	r7, r1
 8009d8e:	2101      	movs	r1, #1
 8009d90:	ec59 8b10 	vmov	r8, r9, d0
 8009d94:	4616      	mov	r6, r2
 8009d96:	f7ff fc13 	bl	80095c0 <_Balloc>
 8009d9a:	4604      	mov	r4, r0
 8009d9c:	b930      	cbnz	r0, 8009dac <__d2b+0x24>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	4b23      	ldr	r3, [pc, #140]	@ (8009e30 <__d2b+0xa8>)
 8009da2:	4824      	ldr	r0, [pc, #144]	@ (8009e34 <__d2b+0xac>)
 8009da4:	f240 310f 	movw	r1, #783	@ 0x30f
 8009da8:	f001 fb4e 	bl	800b448 <__assert_func>
 8009dac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009db0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009db4:	b10d      	cbz	r5, 8009dba <__d2b+0x32>
 8009db6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009dba:	9301      	str	r3, [sp, #4]
 8009dbc:	f1b8 0300 	subs.w	r3, r8, #0
 8009dc0:	d023      	beq.n	8009e0a <__d2b+0x82>
 8009dc2:	4668      	mov	r0, sp
 8009dc4:	9300      	str	r3, [sp, #0]
 8009dc6:	f7ff fd0c 	bl	80097e2 <__lo0bits>
 8009dca:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009dce:	b1d0      	cbz	r0, 8009e06 <__d2b+0x7e>
 8009dd0:	f1c0 0320 	rsb	r3, r0, #32
 8009dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8009dd8:	430b      	orrs	r3, r1
 8009dda:	40c2      	lsrs	r2, r0
 8009ddc:	6163      	str	r3, [r4, #20]
 8009dde:	9201      	str	r2, [sp, #4]
 8009de0:	9b01      	ldr	r3, [sp, #4]
 8009de2:	61a3      	str	r3, [r4, #24]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	bf0c      	ite	eq
 8009de8:	2201      	moveq	r2, #1
 8009dea:	2202      	movne	r2, #2
 8009dec:	6122      	str	r2, [r4, #16]
 8009dee:	b1a5      	cbz	r5, 8009e1a <__d2b+0x92>
 8009df0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009df4:	4405      	add	r5, r0
 8009df6:	603d      	str	r5, [r7, #0]
 8009df8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009dfc:	6030      	str	r0, [r6, #0]
 8009dfe:	4620      	mov	r0, r4
 8009e00:	b003      	add	sp, #12
 8009e02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e06:	6161      	str	r1, [r4, #20]
 8009e08:	e7ea      	b.n	8009de0 <__d2b+0x58>
 8009e0a:	a801      	add	r0, sp, #4
 8009e0c:	f7ff fce9 	bl	80097e2 <__lo0bits>
 8009e10:	9b01      	ldr	r3, [sp, #4]
 8009e12:	6163      	str	r3, [r4, #20]
 8009e14:	3020      	adds	r0, #32
 8009e16:	2201      	movs	r2, #1
 8009e18:	e7e8      	b.n	8009dec <__d2b+0x64>
 8009e1a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009e1e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009e22:	6038      	str	r0, [r7, #0]
 8009e24:	6918      	ldr	r0, [r3, #16]
 8009e26:	f7ff fcbd 	bl	80097a4 <__hi0bits>
 8009e2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009e2e:	e7e5      	b.n	8009dfc <__d2b+0x74>
 8009e30:	0800be83 	.word	0x0800be83
 8009e34:	0800be94 	.word	0x0800be94

08009e38 <__ratio>:
 8009e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e3c:	b085      	sub	sp, #20
 8009e3e:	e9cd 1000 	strd	r1, r0, [sp]
 8009e42:	a902      	add	r1, sp, #8
 8009e44:	f7ff ff56 	bl	8009cf4 <__b2d>
 8009e48:	9800      	ldr	r0, [sp, #0]
 8009e4a:	a903      	add	r1, sp, #12
 8009e4c:	ec55 4b10 	vmov	r4, r5, d0
 8009e50:	f7ff ff50 	bl	8009cf4 <__b2d>
 8009e54:	9b01      	ldr	r3, [sp, #4]
 8009e56:	6919      	ldr	r1, [r3, #16]
 8009e58:	9b00      	ldr	r3, [sp, #0]
 8009e5a:	691b      	ldr	r3, [r3, #16]
 8009e5c:	1ac9      	subs	r1, r1, r3
 8009e5e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009e62:	1a9b      	subs	r3, r3, r2
 8009e64:	ec5b ab10 	vmov	sl, fp, d0
 8009e68:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	bfce      	itee	gt
 8009e70:	462a      	movgt	r2, r5
 8009e72:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009e76:	465a      	movle	r2, fp
 8009e78:	462f      	mov	r7, r5
 8009e7a:	46d9      	mov	r9, fp
 8009e7c:	bfcc      	ite	gt
 8009e7e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009e82:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009e86:	464b      	mov	r3, r9
 8009e88:	4652      	mov	r2, sl
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	4639      	mov	r1, r7
 8009e8e:	f7f6 fcdd 	bl	800084c <__aeabi_ddiv>
 8009e92:	ec41 0b10 	vmov	d0, r0, r1
 8009e96:	b005      	add	sp, #20
 8009e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009e9c <__copybits>:
 8009e9c:	3901      	subs	r1, #1
 8009e9e:	b570      	push	{r4, r5, r6, lr}
 8009ea0:	1149      	asrs	r1, r1, #5
 8009ea2:	6914      	ldr	r4, [r2, #16]
 8009ea4:	3101      	adds	r1, #1
 8009ea6:	f102 0314 	add.w	r3, r2, #20
 8009eaa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009eae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009eb2:	1f05      	subs	r5, r0, #4
 8009eb4:	42a3      	cmp	r3, r4
 8009eb6:	d30c      	bcc.n	8009ed2 <__copybits+0x36>
 8009eb8:	1aa3      	subs	r3, r4, r2
 8009eba:	3b11      	subs	r3, #17
 8009ebc:	f023 0303 	bic.w	r3, r3, #3
 8009ec0:	3211      	adds	r2, #17
 8009ec2:	42a2      	cmp	r2, r4
 8009ec4:	bf88      	it	hi
 8009ec6:	2300      	movhi	r3, #0
 8009ec8:	4418      	add	r0, r3
 8009eca:	2300      	movs	r3, #0
 8009ecc:	4288      	cmp	r0, r1
 8009ece:	d305      	bcc.n	8009edc <__copybits+0x40>
 8009ed0:	bd70      	pop	{r4, r5, r6, pc}
 8009ed2:	f853 6b04 	ldr.w	r6, [r3], #4
 8009ed6:	f845 6f04 	str.w	r6, [r5, #4]!
 8009eda:	e7eb      	b.n	8009eb4 <__copybits+0x18>
 8009edc:	f840 3b04 	str.w	r3, [r0], #4
 8009ee0:	e7f4      	b.n	8009ecc <__copybits+0x30>

08009ee2 <__any_on>:
 8009ee2:	f100 0214 	add.w	r2, r0, #20
 8009ee6:	6900      	ldr	r0, [r0, #16]
 8009ee8:	114b      	asrs	r3, r1, #5
 8009eea:	4298      	cmp	r0, r3
 8009eec:	b510      	push	{r4, lr}
 8009eee:	db11      	blt.n	8009f14 <__any_on+0x32>
 8009ef0:	dd0a      	ble.n	8009f08 <__any_on+0x26>
 8009ef2:	f011 011f 	ands.w	r1, r1, #31
 8009ef6:	d007      	beq.n	8009f08 <__any_on+0x26>
 8009ef8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009efc:	fa24 f001 	lsr.w	r0, r4, r1
 8009f00:	fa00 f101 	lsl.w	r1, r0, r1
 8009f04:	428c      	cmp	r4, r1
 8009f06:	d10b      	bne.n	8009f20 <__any_on+0x3e>
 8009f08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d803      	bhi.n	8009f18 <__any_on+0x36>
 8009f10:	2000      	movs	r0, #0
 8009f12:	bd10      	pop	{r4, pc}
 8009f14:	4603      	mov	r3, r0
 8009f16:	e7f7      	b.n	8009f08 <__any_on+0x26>
 8009f18:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009f1c:	2900      	cmp	r1, #0
 8009f1e:	d0f5      	beq.n	8009f0c <__any_on+0x2a>
 8009f20:	2001      	movs	r0, #1
 8009f22:	e7f6      	b.n	8009f12 <__any_on+0x30>

08009f24 <sulp>:
 8009f24:	b570      	push	{r4, r5, r6, lr}
 8009f26:	4604      	mov	r4, r0
 8009f28:	460d      	mov	r5, r1
 8009f2a:	ec45 4b10 	vmov	d0, r4, r5
 8009f2e:	4616      	mov	r6, r2
 8009f30:	f7ff feba 	bl	8009ca8 <__ulp>
 8009f34:	ec51 0b10 	vmov	r0, r1, d0
 8009f38:	b17e      	cbz	r6, 8009f5a <sulp+0x36>
 8009f3a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009f3e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	dd09      	ble.n	8009f5a <sulp+0x36>
 8009f46:	051b      	lsls	r3, r3, #20
 8009f48:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009f4c:	2400      	movs	r4, #0
 8009f4e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009f52:	4622      	mov	r2, r4
 8009f54:	462b      	mov	r3, r5
 8009f56:	f7f6 fb4f 	bl	80005f8 <__aeabi_dmul>
 8009f5a:	ec41 0b10 	vmov	d0, r0, r1
 8009f5e:	bd70      	pop	{r4, r5, r6, pc}

08009f60 <_strtod_l>:
 8009f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f64:	b09f      	sub	sp, #124	@ 0x7c
 8009f66:	460c      	mov	r4, r1
 8009f68:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	921a      	str	r2, [sp, #104]	@ 0x68
 8009f6e:	9005      	str	r0, [sp, #20]
 8009f70:	f04f 0a00 	mov.w	sl, #0
 8009f74:	f04f 0b00 	mov.w	fp, #0
 8009f78:	460a      	mov	r2, r1
 8009f7a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f7c:	7811      	ldrb	r1, [r2, #0]
 8009f7e:	292b      	cmp	r1, #43	@ 0x2b
 8009f80:	d04a      	beq.n	800a018 <_strtod_l+0xb8>
 8009f82:	d838      	bhi.n	8009ff6 <_strtod_l+0x96>
 8009f84:	290d      	cmp	r1, #13
 8009f86:	d832      	bhi.n	8009fee <_strtod_l+0x8e>
 8009f88:	2908      	cmp	r1, #8
 8009f8a:	d832      	bhi.n	8009ff2 <_strtod_l+0x92>
 8009f8c:	2900      	cmp	r1, #0
 8009f8e:	d03b      	beq.n	800a008 <_strtod_l+0xa8>
 8009f90:	2200      	movs	r2, #0
 8009f92:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009f94:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009f96:	782a      	ldrb	r2, [r5, #0]
 8009f98:	2a30      	cmp	r2, #48	@ 0x30
 8009f9a:	f040 80b3 	bne.w	800a104 <_strtod_l+0x1a4>
 8009f9e:	786a      	ldrb	r2, [r5, #1]
 8009fa0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009fa4:	2a58      	cmp	r2, #88	@ 0x58
 8009fa6:	d16e      	bne.n	800a086 <_strtod_l+0x126>
 8009fa8:	9302      	str	r3, [sp, #8]
 8009faa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fac:	9301      	str	r3, [sp, #4]
 8009fae:	ab1a      	add	r3, sp, #104	@ 0x68
 8009fb0:	9300      	str	r3, [sp, #0]
 8009fb2:	4a8e      	ldr	r2, [pc, #568]	@ (800a1ec <_strtod_l+0x28c>)
 8009fb4:	9805      	ldr	r0, [sp, #20]
 8009fb6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009fb8:	a919      	add	r1, sp, #100	@ 0x64
 8009fba:	f001 fadf 	bl	800b57c <__gethex>
 8009fbe:	f010 060f 	ands.w	r6, r0, #15
 8009fc2:	4604      	mov	r4, r0
 8009fc4:	d005      	beq.n	8009fd2 <_strtod_l+0x72>
 8009fc6:	2e06      	cmp	r6, #6
 8009fc8:	d128      	bne.n	800a01c <_strtod_l+0xbc>
 8009fca:	3501      	adds	r5, #1
 8009fcc:	2300      	movs	r3, #0
 8009fce:	9519      	str	r5, [sp, #100]	@ 0x64
 8009fd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009fd2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	f040 858e 	bne.w	800aaf6 <_strtod_l+0xb96>
 8009fda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fdc:	b1cb      	cbz	r3, 800a012 <_strtod_l+0xb2>
 8009fde:	4652      	mov	r2, sl
 8009fe0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009fe4:	ec43 2b10 	vmov	d0, r2, r3
 8009fe8:	b01f      	add	sp, #124	@ 0x7c
 8009fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fee:	2920      	cmp	r1, #32
 8009ff0:	d1ce      	bne.n	8009f90 <_strtod_l+0x30>
 8009ff2:	3201      	adds	r2, #1
 8009ff4:	e7c1      	b.n	8009f7a <_strtod_l+0x1a>
 8009ff6:	292d      	cmp	r1, #45	@ 0x2d
 8009ff8:	d1ca      	bne.n	8009f90 <_strtod_l+0x30>
 8009ffa:	2101      	movs	r1, #1
 8009ffc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009ffe:	1c51      	adds	r1, r2, #1
 800a000:	9119      	str	r1, [sp, #100]	@ 0x64
 800a002:	7852      	ldrb	r2, [r2, #1]
 800a004:	2a00      	cmp	r2, #0
 800a006:	d1c5      	bne.n	8009f94 <_strtod_l+0x34>
 800a008:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a00a:	9419      	str	r4, [sp, #100]	@ 0x64
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	f040 8570 	bne.w	800aaf2 <_strtod_l+0xb92>
 800a012:	4652      	mov	r2, sl
 800a014:	465b      	mov	r3, fp
 800a016:	e7e5      	b.n	8009fe4 <_strtod_l+0x84>
 800a018:	2100      	movs	r1, #0
 800a01a:	e7ef      	b.n	8009ffc <_strtod_l+0x9c>
 800a01c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a01e:	b13a      	cbz	r2, 800a030 <_strtod_l+0xd0>
 800a020:	2135      	movs	r1, #53	@ 0x35
 800a022:	a81c      	add	r0, sp, #112	@ 0x70
 800a024:	f7ff ff3a 	bl	8009e9c <__copybits>
 800a028:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a02a:	9805      	ldr	r0, [sp, #20]
 800a02c:	f7ff fb08 	bl	8009640 <_Bfree>
 800a030:	3e01      	subs	r6, #1
 800a032:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a034:	2e04      	cmp	r6, #4
 800a036:	d806      	bhi.n	800a046 <_strtod_l+0xe6>
 800a038:	e8df f006 	tbb	[pc, r6]
 800a03c:	201d0314 	.word	0x201d0314
 800a040:	14          	.byte	0x14
 800a041:	00          	.byte	0x00
 800a042:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a046:	05e1      	lsls	r1, r4, #23
 800a048:	bf48      	it	mi
 800a04a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a04e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a052:	0d1b      	lsrs	r3, r3, #20
 800a054:	051b      	lsls	r3, r3, #20
 800a056:	2b00      	cmp	r3, #0
 800a058:	d1bb      	bne.n	8009fd2 <_strtod_l+0x72>
 800a05a:	f7fe fb21 	bl	80086a0 <__errno>
 800a05e:	2322      	movs	r3, #34	@ 0x22
 800a060:	6003      	str	r3, [r0, #0]
 800a062:	e7b6      	b.n	8009fd2 <_strtod_l+0x72>
 800a064:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a068:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a06c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a070:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a074:	e7e7      	b.n	800a046 <_strtod_l+0xe6>
 800a076:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a1f4 <_strtod_l+0x294>
 800a07a:	e7e4      	b.n	800a046 <_strtod_l+0xe6>
 800a07c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a080:	f04f 3aff 	mov.w	sl, #4294967295
 800a084:	e7df      	b.n	800a046 <_strtod_l+0xe6>
 800a086:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a088:	1c5a      	adds	r2, r3, #1
 800a08a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a08c:	785b      	ldrb	r3, [r3, #1]
 800a08e:	2b30      	cmp	r3, #48	@ 0x30
 800a090:	d0f9      	beq.n	800a086 <_strtod_l+0x126>
 800a092:	2b00      	cmp	r3, #0
 800a094:	d09d      	beq.n	8009fd2 <_strtod_l+0x72>
 800a096:	2301      	movs	r3, #1
 800a098:	9309      	str	r3, [sp, #36]	@ 0x24
 800a09a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a09c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a09e:	2300      	movs	r3, #0
 800a0a0:	9308      	str	r3, [sp, #32]
 800a0a2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0a4:	461f      	mov	r7, r3
 800a0a6:	220a      	movs	r2, #10
 800a0a8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a0aa:	7805      	ldrb	r5, [r0, #0]
 800a0ac:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a0b0:	b2d9      	uxtb	r1, r3
 800a0b2:	2909      	cmp	r1, #9
 800a0b4:	d928      	bls.n	800a108 <_strtod_l+0x1a8>
 800a0b6:	494e      	ldr	r1, [pc, #312]	@ (800a1f0 <_strtod_l+0x290>)
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	f001 f979 	bl	800b3b0 <strncmp>
 800a0be:	2800      	cmp	r0, #0
 800a0c0:	d032      	beq.n	800a128 <_strtod_l+0x1c8>
 800a0c2:	2000      	movs	r0, #0
 800a0c4:	462a      	mov	r2, r5
 800a0c6:	4681      	mov	r9, r0
 800a0c8:	463d      	mov	r5, r7
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	2a65      	cmp	r2, #101	@ 0x65
 800a0ce:	d001      	beq.n	800a0d4 <_strtod_l+0x174>
 800a0d0:	2a45      	cmp	r2, #69	@ 0x45
 800a0d2:	d114      	bne.n	800a0fe <_strtod_l+0x19e>
 800a0d4:	b91d      	cbnz	r5, 800a0de <_strtod_l+0x17e>
 800a0d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0d8:	4302      	orrs	r2, r0
 800a0da:	d095      	beq.n	800a008 <_strtod_l+0xa8>
 800a0dc:	2500      	movs	r5, #0
 800a0de:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a0e0:	1c62      	adds	r2, r4, #1
 800a0e2:	9219      	str	r2, [sp, #100]	@ 0x64
 800a0e4:	7862      	ldrb	r2, [r4, #1]
 800a0e6:	2a2b      	cmp	r2, #43	@ 0x2b
 800a0e8:	d077      	beq.n	800a1da <_strtod_l+0x27a>
 800a0ea:	2a2d      	cmp	r2, #45	@ 0x2d
 800a0ec:	d07b      	beq.n	800a1e6 <_strtod_l+0x286>
 800a0ee:	f04f 0c00 	mov.w	ip, #0
 800a0f2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a0f6:	2909      	cmp	r1, #9
 800a0f8:	f240 8082 	bls.w	800a200 <_strtod_l+0x2a0>
 800a0fc:	9419      	str	r4, [sp, #100]	@ 0x64
 800a0fe:	f04f 0800 	mov.w	r8, #0
 800a102:	e0a2      	b.n	800a24a <_strtod_l+0x2ea>
 800a104:	2300      	movs	r3, #0
 800a106:	e7c7      	b.n	800a098 <_strtod_l+0x138>
 800a108:	2f08      	cmp	r7, #8
 800a10a:	bfd5      	itete	le
 800a10c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a10e:	9908      	ldrgt	r1, [sp, #32]
 800a110:	fb02 3301 	mlale	r3, r2, r1, r3
 800a114:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a118:	f100 0001 	add.w	r0, r0, #1
 800a11c:	bfd4      	ite	le
 800a11e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a120:	9308      	strgt	r3, [sp, #32]
 800a122:	3701      	adds	r7, #1
 800a124:	9019      	str	r0, [sp, #100]	@ 0x64
 800a126:	e7bf      	b.n	800a0a8 <_strtod_l+0x148>
 800a128:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a12a:	1c5a      	adds	r2, r3, #1
 800a12c:	9219      	str	r2, [sp, #100]	@ 0x64
 800a12e:	785a      	ldrb	r2, [r3, #1]
 800a130:	b37f      	cbz	r7, 800a192 <_strtod_l+0x232>
 800a132:	4681      	mov	r9, r0
 800a134:	463d      	mov	r5, r7
 800a136:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a13a:	2b09      	cmp	r3, #9
 800a13c:	d912      	bls.n	800a164 <_strtod_l+0x204>
 800a13e:	2301      	movs	r3, #1
 800a140:	e7c4      	b.n	800a0cc <_strtod_l+0x16c>
 800a142:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a144:	1c5a      	adds	r2, r3, #1
 800a146:	9219      	str	r2, [sp, #100]	@ 0x64
 800a148:	785a      	ldrb	r2, [r3, #1]
 800a14a:	3001      	adds	r0, #1
 800a14c:	2a30      	cmp	r2, #48	@ 0x30
 800a14e:	d0f8      	beq.n	800a142 <_strtod_l+0x1e2>
 800a150:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a154:	2b08      	cmp	r3, #8
 800a156:	f200 84d3 	bhi.w	800ab00 <_strtod_l+0xba0>
 800a15a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a15c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a15e:	4681      	mov	r9, r0
 800a160:	2000      	movs	r0, #0
 800a162:	4605      	mov	r5, r0
 800a164:	3a30      	subs	r2, #48	@ 0x30
 800a166:	f100 0301 	add.w	r3, r0, #1
 800a16a:	d02a      	beq.n	800a1c2 <_strtod_l+0x262>
 800a16c:	4499      	add	r9, r3
 800a16e:	eb00 0c05 	add.w	ip, r0, r5
 800a172:	462b      	mov	r3, r5
 800a174:	210a      	movs	r1, #10
 800a176:	4563      	cmp	r3, ip
 800a178:	d10d      	bne.n	800a196 <_strtod_l+0x236>
 800a17a:	1c69      	adds	r1, r5, #1
 800a17c:	4401      	add	r1, r0
 800a17e:	4428      	add	r0, r5
 800a180:	2808      	cmp	r0, #8
 800a182:	dc16      	bgt.n	800a1b2 <_strtod_l+0x252>
 800a184:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a186:	230a      	movs	r3, #10
 800a188:	fb03 2300 	mla	r3, r3, r0, r2
 800a18c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a18e:	2300      	movs	r3, #0
 800a190:	e018      	b.n	800a1c4 <_strtod_l+0x264>
 800a192:	4638      	mov	r0, r7
 800a194:	e7da      	b.n	800a14c <_strtod_l+0x1ec>
 800a196:	2b08      	cmp	r3, #8
 800a198:	f103 0301 	add.w	r3, r3, #1
 800a19c:	dc03      	bgt.n	800a1a6 <_strtod_l+0x246>
 800a19e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a1a0:	434e      	muls	r6, r1
 800a1a2:	960a      	str	r6, [sp, #40]	@ 0x28
 800a1a4:	e7e7      	b.n	800a176 <_strtod_l+0x216>
 800a1a6:	2b10      	cmp	r3, #16
 800a1a8:	bfde      	ittt	le
 800a1aa:	9e08      	ldrle	r6, [sp, #32]
 800a1ac:	434e      	mulle	r6, r1
 800a1ae:	9608      	strle	r6, [sp, #32]
 800a1b0:	e7e1      	b.n	800a176 <_strtod_l+0x216>
 800a1b2:	280f      	cmp	r0, #15
 800a1b4:	dceb      	bgt.n	800a18e <_strtod_l+0x22e>
 800a1b6:	9808      	ldr	r0, [sp, #32]
 800a1b8:	230a      	movs	r3, #10
 800a1ba:	fb03 2300 	mla	r3, r3, r0, r2
 800a1be:	9308      	str	r3, [sp, #32]
 800a1c0:	e7e5      	b.n	800a18e <_strtod_l+0x22e>
 800a1c2:	4629      	mov	r1, r5
 800a1c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a1c6:	1c50      	adds	r0, r2, #1
 800a1c8:	9019      	str	r0, [sp, #100]	@ 0x64
 800a1ca:	7852      	ldrb	r2, [r2, #1]
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	460d      	mov	r5, r1
 800a1d0:	e7b1      	b.n	800a136 <_strtod_l+0x1d6>
 800a1d2:	f04f 0900 	mov.w	r9, #0
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	e77d      	b.n	800a0d6 <_strtod_l+0x176>
 800a1da:	f04f 0c00 	mov.w	ip, #0
 800a1de:	1ca2      	adds	r2, r4, #2
 800a1e0:	9219      	str	r2, [sp, #100]	@ 0x64
 800a1e2:	78a2      	ldrb	r2, [r4, #2]
 800a1e4:	e785      	b.n	800a0f2 <_strtod_l+0x192>
 800a1e6:	f04f 0c01 	mov.w	ip, #1
 800a1ea:	e7f8      	b.n	800a1de <_strtod_l+0x27e>
 800a1ec:	0800c008 	.word	0x0800c008
 800a1f0:	0800bff0 	.word	0x0800bff0
 800a1f4:	7ff00000 	.word	0x7ff00000
 800a1f8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a1fa:	1c51      	adds	r1, r2, #1
 800a1fc:	9119      	str	r1, [sp, #100]	@ 0x64
 800a1fe:	7852      	ldrb	r2, [r2, #1]
 800a200:	2a30      	cmp	r2, #48	@ 0x30
 800a202:	d0f9      	beq.n	800a1f8 <_strtod_l+0x298>
 800a204:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a208:	2908      	cmp	r1, #8
 800a20a:	f63f af78 	bhi.w	800a0fe <_strtod_l+0x19e>
 800a20e:	3a30      	subs	r2, #48	@ 0x30
 800a210:	920e      	str	r2, [sp, #56]	@ 0x38
 800a212:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a214:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a216:	f04f 080a 	mov.w	r8, #10
 800a21a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a21c:	1c56      	adds	r6, r2, #1
 800a21e:	9619      	str	r6, [sp, #100]	@ 0x64
 800a220:	7852      	ldrb	r2, [r2, #1]
 800a222:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a226:	f1be 0f09 	cmp.w	lr, #9
 800a22a:	d939      	bls.n	800a2a0 <_strtod_l+0x340>
 800a22c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a22e:	1a76      	subs	r6, r6, r1
 800a230:	2e08      	cmp	r6, #8
 800a232:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a236:	dc03      	bgt.n	800a240 <_strtod_l+0x2e0>
 800a238:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a23a:	4588      	cmp	r8, r1
 800a23c:	bfa8      	it	ge
 800a23e:	4688      	movge	r8, r1
 800a240:	f1bc 0f00 	cmp.w	ip, #0
 800a244:	d001      	beq.n	800a24a <_strtod_l+0x2ea>
 800a246:	f1c8 0800 	rsb	r8, r8, #0
 800a24a:	2d00      	cmp	r5, #0
 800a24c:	d14e      	bne.n	800a2ec <_strtod_l+0x38c>
 800a24e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a250:	4308      	orrs	r0, r1
 800a252:	f47f aebe 	bne.w	8009fd2 <_strtod_l+0x72>
 800a256:	2b00      	cmp	r3, #0
 800a258:	f47f aed6 	bne.w	800a008 <_strtod_l+0xa8>
 800a25c:	2a69      	cmp	r2, #105	@ 0x69
 800a25e:	d028      	beq.n	800a2b2 <_strtod_l+0x352>
 800a260:	dc25      	bgt.n	800a2ae <_strtod_l+0x34e>
 800a262:	2a49      	cmp	r2, #73	@ 0x49
 800a264:	d025      	beq.n	800a2b2 <_strtod_l+0x352>
 800a266:	2a4e      	cmp	r2, #78	@ 0x4e
 800a268:	f47f aece 	bne.w	800a008 <_strtod_l+0xa8>
 800a26c:	499b      	ldr	r1, [pc, #620]	@ (800a4dc <_strtod_l+0x57c>)
 800a26e:	a819      	add	r0, sp, #100	@ 0x64
 800a270:	f001 fba6 	bl	800b9c0 <__match>
 800a274:	2800      	cmp	r0, #0
 800a276:	f43f aec7 	beq.w	800a008 <_strtod_l+0xa8>
 800a27a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	2b28      	cmp	r3, #40	@ 0x28
 800a280:	d12e      	bne.n	800a2e0 <_strtod_l+0x380>
 800a282:	4997      	ldr	r1, [pc, #604]	@ (800a4e0 <_strtod_l+0x580>)
 800a284:	aa1c      	add	r2, sp, #112	@ 0x70
 800a286:	a819      	add	r0, sp, #100	@ 0x64
 800a288:	f001 fbae 	bl	800b9e8 <__hexnan>
 800a28c:	2805      	cmp	r0, #5
 800a28e:	d127      	bne.n	800a2e0 <_strtod_l+0x380>
 800a290:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a292:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a296:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a29a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a29e:	e698      	b.n	8009fd2 <_strtod_l+0x72>
 800a2a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a2a2:	fb08 2101 	mla	r1, r8, r1, r2
 800a2a6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a2aa:	920e      	str	r2, [sp, #56]	@ 0x38
 800a2ac:	e7b5      	b.n	800a21a <_strtod_l+0x2ba>
 800a2ae:	2a6e      	cmp	r2, #110	@ 0x6e
 800a2b0:	e7da      	b.n	800a268 <_strtod_l+0x308>
 800a2b2:	498c      	ldr	r1, [pc, #560]	@ (800a4e4 <_strtod_l+0x584>)
 800a2b4:	a819      	add	r0, sp, #100	@ 0x64
 800a2b6:	f001 fb83 	bl	800b9c0 <__match>
 800a2ba:	2800      	cmp	r0, #0
 800a2bc:	f43f aea4 	beq.w	800a008 <_strtod_l+0xa8>
 800a2c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2c2:	4989      	ldr	r1, [pc, #548]	@ (800a4e8 <_strtod_l+0x588>)
 800a2c4:	3b01      	subs	r3, #1
 800a2c6:	a819      	add	r0, sp, #100	@ 0x64
 800a2c8:	9319      	str	r3, [sp, #100]	@ 0x64
 800a2ca:	f001 fb79 	bl	800b9c0 <__match>
 800a2ce:	b910      	cbnz	r0, 800a2d6 <_strtod_l+0x376>
 800a2d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	9319      	str	r3, [sp, #100]	@ 0x64
 800a2d6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a4f8 <_strtod_l+0x598>
 800a2da:	f04f 0a00 	mov.w	sl, #0
 800a2de:	e678      	b.n	8009fd2 <_strtod_l+0x72>
 800a2e0:	4882      	ldr	r0, [pc, #520]	@ (800a4ec <_strtod_l+0x58c>)
 800a2e2:	f001 f8a9 	bl	800b438 <nan>
 800a2e6:	ec5b ab10 	vmov	sl, fp, d0
 800a2ea:	e672      	b.n	8009fd2 <_strtod_l+0x72>
 800a2ec:	eba8 0309 	sub.w	r3, r8, r9
 800a2f0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a2f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2f4:	2f00      	cmp	r7, #0
 800a2f6:	bf08      	it	eq
 800a2f8:	462f      	moveq	r7, r5
 800a2fa:	2d10      	cmp	r5, #16
 800a2fc:	462c      	mov	r4, r5
 800a2fe:	bfa8      	it	ge
 800a300:	2410      	movge	r4, #16
 800a302:	f7f6 f8ff 	bl	8000504 <__aeabi_ui2d>
 800a306:	2d09      	cmp	r5, #9
 800a308:	4682      	mov	sl, r0
 800a30a:	468b      	mov	fp, r1
 800a30c:	dc13      	bgt.n	800a336 <_strtod_l+0x3d6>
 800a30e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a310:	2b00      	cmp	r3, #0
 800a312:	f43f ae5e 	beq.w	8009fd2 <_strtod_l+0x72>
 800a316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a318:	dd78      	ble.n	800a40c <_strtod_l+0x4ac>
 800a31a:	2b16      	cmp	r3, #22
 800a31c:	dc5f      	bgt.n	800a3de <_strtod_l+0x47e>
 800a31e:	4974      	ldr	r1, [pc, #464]	@ (800a4f0 <_strtod_l+0x590>)
 800a320:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a324:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a328:	4652      	mov	r2, sl
 800a32a:	465b      	mov	r3, fp
 800a32c:	f7f6 f964 	bl	80005f8 <__aeabi_dmul>
 800a330:	4682      	mov	sl, r0
 800a332:	468b      	mov	fp, r1
 800a334:	e64d      	b.n	8009fd2 <_strtod_l+0x72>
 800a336:	4b6e      	ldr	r3, [pc, #440]	@ (800a4f0 <_strtod_l+0x590>)
 800a338:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a33c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a340:	f7f6 f95a 	bl	80005f8 <__aeabi_dmul>
 800a344:	4682      	mov	sl, r0
 800a346:	9808      	ldr	r0, [sp, #32]
 800a348:	468b      	mov	fp, r1
 800a34a:	f7f6 f8db 	bl	8000504 <__aeabi_ui2d>
 800a34e:	4602      	mov	r2, r0
 800a350:	460b      	mov	r3, r1
 800a352:	4650      	mov	r0, sl
 800a354:	4659      	mov	r1, fp
 800a356:	f7f5 ff99 	bl	800028c <__adddf3>
 800a35a:	2d0f      	cmp	r5, #15
 800a35c:	4682      	mov	sl, r0
 800a35e:	468b      	mov	fp, r1
 800a360:	ddd5      	ble.n	800a30e <_strtod_l+0x3ae>
 800a362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a364:	1b2c      	subs	r4, r5, r4
 800a366:	441c      	add	r4, r3
 800a368:	2c00      	cmp	r4, #0
 800a36a:	f340 8096 	ble.w	800a49a <_strtod_l+0x53a>
 800a36e:	f014 030f 	ands.w	r3, r4, #15
 800a372:	d00a      	beq.n	800a38a <_strtod_l+0x42a>
 800a374:	495e      	ldr	r1, [pc, #376]	@ (800a4f0 <_strtod_l+0x590>)
 800a376:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a37a:	4652      	mov	r2, sl
 800a37c:	465b      	mov	r3, fp
 800a37e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a382:	f7f6 f939 	bl	80005f8 <__aeabi_dmul>
 800a386:	4682      	mov	sl, r0
 800a388:	468b      	mov	fp, r1
 800a38a:	f034 040f 	bics.w	r4, r4, #15
 800a38e:	d073      	beq.n	800a478 <_strtod_l+0x518>
 800a390:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a394:	dd48      	ble.n	800a428 <_strtod_l+0x4c8>
 800a396:	2400      	movs	r4, #0
 800a398:	46a0      	mov	r8, r4
 800a39a:	940a      	str	r4, [sp, #40]	@ 0x28
 800a39c:	46a1      	mov	r9, r4
 800a39e:	9a05      	ldr	r2, [sp, #20]
 800a3a0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a4f8 <_strtod_l+0x598>
 800a3a4:	2322      	movs	r3, #34	@ 0x22
 800a3a6:	6013      	str	r3, [r2, #0]
 800a3a8:	f04f 0a00 	mov.w	sl, #0
 800a3ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	f43f ae0f 	beq.w	8009fd2 <_strtod_l+0x72>
 800a3b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a3b6:	9805      	ldr	r0, [sp, #20]
 800a3b8:	f7ff f942 	bl	8009640 <_Bfree>
 800a3bc:	9805      	ldr	r0, [sp, #20]
 800a3be:	4649      	mov	r1, r9
 800a3c0:	f7ff f93e 	bl	8009640 <_Bfree>
 800a3c4:	9805      	ldr	r0, [sp, #20]
 800a3c6:	4641      	mov	r1, r8
 800a3c8:	f7ff f93a 	bl	8009640 <_Bfree>
 800a3cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a3ce:	9805      	ldr	r0, [sp, #20]
 800a3d0:	f7ff f936 	bl	8009640 <_Bfree>
 800a3d4:	9805      	ldr	r0, [sp, #20]
 800a3d6:	4621      	mov	r1, r4
 800a3d8:	f7ff f932 	bl	8009640 <_Bfree>
 800a3dc:	e5f9      	b.n	8009fd2 <_strtod_l+0x72>
 800a3de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	dbbc      	blt.n	800a362 <_strtod_l+0x402>
 800a3e8:	4c41      	ldr	r4, [pc, #260]	@ (800a4f0 <_strtod_l+0x590>)
 800a3ea:	f1c5 050f 	rsb	r5, r5, #15
 800a3ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a3f2:	4652      	mov	r2, sl
 800a3f4:	465b      	mov	r3, fp
 800a3f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3fa:	f7f6 f8fd 	bl	80005f8 <__aeabi_dmul>
 800a3fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a400:	1b5d      	subs	r5, r3, r5
 800a402:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a406:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a40a:	e78f      	b.n	800a32c <_strtod_l+0x3cc>
 800a40c:	3316      	adds	r3, #22
 800a40e:	dba8      	blt.n	800a362 <_strtod_l+0x402>
 800a410:	4b37      	ldr	r3, [pc, #220]	@ (800a4f0 <_strtod_l+0x590>)
 800a412:	eba9 0808 	sub.w	r8, r9, r8
 800a416:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a41a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a41e:	4650      	mov	r0, sl
 800a420:	4659      	mov	r1, fp
 800a422:	f7f6 fa13 	bl	800084c <__aeabi_ddiv>
 800a426:	e783      	b.n	800a330 <_strtod_l+0x3d0>
 800a428:	4b32      	ldr	r3, [pc, #200]	@ (800a4f4 <_strtod_l+0x594>)
 800a42a:	9308      	str	r3, [sp, #32]
 800a42c:	2300      	movs	r3, #0
 800a42e:	1124      	asrs	r4, r4, #4
 800a430:	4650      	mov	r0, sl
 800a432:	4659      	mov	r1, fp
 800a434:	461e      	mov	r6, r3
 800a436:	2c01      	cmp	r4, #1
 800a438:	dc21      	bgt.n	800a47e <_strtod_l+0x51e>
 800a43a:	b10b      	cbz	r3, 800a440 <_strtod_l+0x4e0>
 800a43c:	4682      	mov	sl, r0
 800a43e:	468b      	mov	fp, r1
 800a440:	492c      	ldr	r1, [pc, #176]	@ (800a4f4 <_strtod_l+0x594>)
 800a442:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a446:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a44a:	4652      	mov	r2, sl
 800a44c:	465b      	mov	r3, fp
 800a44e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a452:	f7f6 f8d1 	bl	80005f8 <__aeabi_dmul>
 800a456:	4b28      	ldr	r3, [pc, #160]	@ (800a4f8 <_strtod_l+0x598>)
 800a458:	460a      	mov	r2, r1
 800a45a:	400b      	ands	r3, r1
 800a45c:	4927      	ldr	r1, [pc, #156]	@ (800a4fc <_strtod_l+0x59c>)
 800a45e:	428b      	cmp	r3, r1
 800a460:	4682      	mov	sl, r0
 800a462:	d898      	bhi.n	800a396 <_strtod_l+0x436>
 800a464:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a468:	428b      	cmp	r3, r1
 800a46a:	bf86      	itte	hi
 800a46c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a500 <_strtod_l+0x5a0>
 800a470:	f04f 3aff 	movhi.w	sl, #4294967295
 800a474:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a478:	2300      	movs	r3, #0
 800a47a:	9308      	str	r3, [sp, #32]
 800a47c:	e07a      	b.n	800a574 <_strtod_l+0x614>
 800a47e:	07e2      	lsls	r2, r4, #31
 800a480:	d505      	bpl.n	800a48e <_strtod_l+0x52e>
 800a482:	9b08      	ldr	r3, [sp, #32]
 800a484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a488:	f7f6 f8b6 	bl	80005f8 <__aeabi_dmul>
 800a48c:	2301      	movs	r3, #1
 800a48e:	9a08      	ldr	r2, [sp, #32]
 800a490:	3208      	adds	r2, #8
 800a492:	3601      	adds	r6, #1
 800a494:	1064      	asrs	r4, r4, #1
 800a496:	9208      	str	r2, [sp, #32]
 800a498:	e7cd      	b.n	800a436 <_strtod_l+0x4d6>
 800a49a:	d0ed      	beq.n	800a478 <_strtod_l+0x518>
 800a49c:	4264      	negs	r4, r4
 800a49e:	f014 020f 	ands.w	r2, r4, #15
 800a4a2:	d00a      	beq.n	800a4ba <_strtod_l+0x55a>
 800a4a4:	4b12      	ldr	r3, [pc, #72]	@ (800a4f0 <_strtod_l+0x590>)
 800a4a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4aa:	4650      	mov	r0, sl
 800a4ac:	4659      	mov	r1, fp
 800a4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b2:	f7f6 f9cb 	bl	800084c <__aeabi_ddiv>
 800a4b6:	4682      	mov	sl, r0
 800a4b8:	468b      	mov	fp, r1
 800a4ba:	1124      	asrs	r4, r4, #4
 800a4bc:	d0dc      	beq.n	800a478 <_strtod_l+0x518>
 800a4be:	2c1f      	cmp	r4, #31
 800a4c0:	dd20      	ble.n	800a504 <_strtod_l+0x5a4>
 800a4c2:	2400      	movs	r4, #0
 800a4c4:	46a0      	mov	r8, r4
 800a4c6:	940a      	str	r4, [sp, #40]	@ 0x28
 800a4c8:	46a1      	mov	r9, r4
 800a4ca:	9a05      	ldr	r2, [sp, #20]
 800a4cc:	2322      	movs	r3, #34	@ 0x22
 800a4ce:	f04f 0a00 	mov.w	sl, #0
 800a4d2:	f04f 0b00 	mov.w	fp, #0
 800a4d6:	6013      	str	r3, [r2, #0]
 800a4d8:	e768      	b.n	800a3ac <_strtod_l+0x44c>
 800a4da:	bf00      	nop
 800a4dc:	0800bddb 	.word	0x0800bddb
 800a4e0:	0800bff4 	.word	0x0800bff4
 800a4e4:	0800bdd3 	.word	0x0800bdd3
 800a4e8:	0800be0a 	.word	0x0800be0a
 800a4ec:	0800c19d 	.word	0x0800c19d
 800a4f0:	0800bf28 	.word	0x0800bf28
 800a4f4:	0800bf00 	.word	0x0800bf00
 800a4f8:	7ff00000 	.word	0x7ff00000
 800a4fc:	7ca00000 	.word	0x7ca00000
 800a500:	7fefffff 	.word	0x7fefffff
 800a504:	f014 0310 	ands.w	r3, r4, #16
 800a508:	bf18      	it	ne
 800a50a:	236a      	movne	r3, #106	@ 0x6a
 800a50c:	4ea9      	ldr	r6, [pc, #676]	@ (800a7b4 <_strtod_l+0x854>)
 800a50e:	9308      	str	r3, [sp, #32]
 800a510:	4650      	mov	r0, sl
 800a512:	4659      	mov	r1, fp
 800a514:	2300      	movs	r3, #0
 800a516:	07e2      	lsls	r2, r4, #31
 800a518:	d504      	bpl.n	800a524 <_strtod_l+0x5c4>
 800a51a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a51e:	f7f6 f86b 	bl	80005f8 <__aeabi_dmul>
 800a522:	2301      	movs	r3, #1
 800a524:	1064      	asrs	r4, r4, #1
 800a526:	f106 0608 	add.w	r6, r6, #8
 800a52a:	d1f4      	bne.n	800a516 <_strtod_l+0x5b6>
 800a52c:	b10b      	cbz	r3, 800a532 <_strtod_l+0x5d2>
 800a52e:	4682      	mov	sl, r0
 800a530:	468b      	mov	fp, r1
 800a532:	9b08      	ldr	r3, [sp, #32]
 800a534:	b1b3      	cbz	r3, 800a564 <_strtod_l+0x604>
 800a536:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a53a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a53e:	2b00      	cmp	r3, #0
 800a540:	4659      	mov	r1, fp
 800a542:	dd0f      	ble.n	800a564 <_strtod_l+0x604>
 800a544:	2b1f      	cmp	r3, #31
 800a546:	dd55      	ble.n	800a5f4 <_strtod_l+0x694>
 800a548:	2b34      	cmp	r3, #52	@ 0x34
 800a54a:	bfde      	ittt	le
 800a54c:	f04f 33ff 	movle.w	r3, #4294967295
 800a550:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a554:	4093      	lslle	r3, r2
 800a556:	f04f 0a00 	mov.w	sl, #0
 800a55a:	bfcc      	ite	gt
 800a55c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a560:	ea03 0b01 	andle.w	fp, r3, r1
 800a564:	2200      	movs	r2, #0
 800a566:	2300      	movs	r3, #0
 800a568:	4650      	mov	r0, sl
 800a56a:	4659      	mov	r1, fp
 800a56c:	f7f6 faac 	bl	8000ac8 <__aeabi_dcmpeq>
 800a570:	2800      	cmp	r0, #0
 800a572:	d1a6      	bne.n	800a4c2 <_strtod_l+0x562>
 800a574:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a576:	9300      	str	r3, [sp, #0]
 800a578:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a57a:	9805      	ldr	r0, [sp, #20]
 800a57c:	462b      	mov	r3, r5
 800a57e:	463a      	mov	r2, r7
 800a580:	f7ff f8c6 	bl	8009710 <__s2b>
 800a584:	900a      	str	r0, [sp, #40]	@ 0x28
 800a586:	2800      	cmp	r0, #0
 800a588:	f43f af05 	beq.w	800a396 <_strtod_l+0x436>
 800a58c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a58e:	2a00      	cmp	r2, #0
 800a590:	eba9 0308 	sub.w	r3, r9, r8
 800a594:	bfa8      	it	ge
 800a596:	2300      	movge	r3, #0
 800a598:	9312      	str	r3, [sp, #72]	@ 0x48
 800a59a:	2400      	movs	r4, #0
 800a59c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a5a0:	9316      	str	r3, [sp, #88]	@ 0x58
 800a5a2:	46a0      	mov	r8, r4
 800a5a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5a6:	9805      	ldr	r0, [sp, #20]
 800a5a8:	6859      	ldr	r1, [r3, #4]
 800a5aa:	f7ff f809 	bl	80095c0 <_Balloc>
 800a5ae:	4681      	mov	r9, r0
 800a5b0:	2800      	cmp	r0, #0
 800a5b2:	f43f aef4 	beq.w	800a39e <_strtod_l+0x43e>
 800a5b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5b8:	691a      	ldr	r2, [r3, #16]
 800a5ba:	3202      	adds	r2, #2
 800a5bc:	f103 010c 	add.w	r1, r3, #12
 800a5c0:	0092      	lsls	r2, r2, #2
 800a5c2:	300c      	adds	r0, #12
 800a5c4:	f7fe f899 	bl	80086fa <memcpy>
 800a5c8:	ec4b ab10 	vmov	d0, sl, fp
 800a5cc:	9805      	ldr	r0, [sp, #20]
 800a5ce:	aa1c      	add	r2, sp, #112	@ 0x70
 800a5d0:	a91b      	add	r1, sp, #108	@ 0x6c
 800a5d2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a5d6:	f7ff fbd7 	bl	8009d88 <__d2b>
 800a5da:	901a      	str	r0, [sp, #104]	@ 0x68
 800a5dc:	2800      	cmp	r0, #0
 800a5de:	f43f aede 	beq.w	800a39e <_strtod_l+0x43e>
 800a5e2:	9805      	ldr	r0, [sp, #20]
 800a5e4:	2101      	movs	r1, #1
 800a5e6:	f7ff f929 	bl	800983c <__i2b>
 800a5ea:	4680      	mov	r8, r0
 800a5ec:	b948      	cbnz	r0, 800a602 <_strtod_l+0x6a2>
 800a5ee:	f04f 0800 	mov.w	r8, #0
 800a5f2:	e6d4      	b.n	800a39e <_strtod_l+0x43e>
 800a5f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a5f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a5fc:	ea03 0a0a 	and.w	sl, r3, sl
 800a600:	e7b0      	b.n	800a564 <_strtod_l+0x604>
 800a602:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a604:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a606:	2d00      	cmp	r5, #0
 800a608:	bfab      	itete	ge
 800a60a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a60c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a60e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a610:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a612:	bfac      	ite	ge
 800a614:	18ef      	addge	r7, r5, r3
 800a616:	1b5e      	sublt	r6, r3, r5
 800a618:	9b08      	ldr	r3, [sp, #32]
 800a61a:	1aed      	subs	r5, r5, r3
 800a61c:	4415      	add	r5, r2
 800a61e:	4b66      	ldr	r3, [pc, #408]	@ (800a7b8 <_strtod_l+0x858>)
 800a620:	3d01      	subs	r5, #1
 800a622:	429d      	cmp	r5, r3
 800a624:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a628:	da50      	bge.n	800a6cc <_strtod_l+0x76c>
 800a62a:	1b5b      	subs	r3, r3, r5
 800a62c:	2b1f      	cmp	r3, #31
 800a62e:	eba2 0203 	sub.w	r2, r2, r3
 800a632:	f04f 0101 	mov.w	r1, #1
 800a636:	dc3d      	bgt.n	800a6b4 <_strtod_l+0x754>
 800a638:	fa01 f303 	lsl.w	r3, r1, r3
 800a63c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a63e:	2300      	movs	r3, #0
 800a640:	9310      	str	r3, [sp, #64]	@ 0x40
 800a642:	18bd      	adds	r5, r7, r2
 800a644:	9b08      	ldr	r3, [sp, #32]
 800a646:	42af      	cmp	r7, r5
 800a648:	4416      	add	r6, r2
 800a64a:	441e      	add	r6, r3
 800a64c:	463b      	mov	r3, r7
 800a64e:	bfa8      	it	ge
 800a650:	462b      	movge	r3, r5
 800a652:	42b3      	cmp	r3, r6
 800a654:	bfa8      	it	ge
 800a656:	4633      	movge	r3, r6
 800a658:	2b00      	cmp	r3, #0
 800a65a:	bfc2      	ittt	gt
 800a65c:	1aed      	subgt	r5, r5, r3
 800a65e:	1af6      	subgt	r6, r6, r3
 800a660:	1aff      	subgt	r7, r7, r3
 800a662:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a664:	2b00      	cmp	r3, #0
 800a666:	dd16      	ble.n	800a696 <_strtod_l+0x736>
 800a668:	4641      	mov	r1, r8
 800a66a:	9805      	ldr	r0, [sp, #20]
 800a66c:	461a      	mov	r2, r3
 800a66e:	f7ff f9a5 	bl	80099bc <__pow5mult>
 800a672:	4680      	mov	r8, r0
 800a674:	2800      	cmp	r0, #0
 800a676:	d0ba      	beq.n	800a5ee <_strtod_l+0x68e>
 800a678:	4601      	mov	r1, r0
 800a67a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a67c:	9805      	ldr	r0, [sp, #20]
 800a67e:	f7ff f8f3 	bl	8009868 <__multiply>
 800a682:	900e      	str	r0, [sp, #56]	@ 0x38
 800a684:	2800      	cmp	r0, #0
 800a686:	f43f ae8a 	beq.w	800a39e <_strtod_l+0x43e>
 800a68a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a68c:	9805      	ldr	r0, [sp, #20]
 800a68e:	f7fe ffd7 	bl	8009640 <_Bfree>
 800a692:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a694:	931a      	str	r3, [sp, #104]	@ 0x68
 800a696:	2d00      	cmp	r5, #0
 800a698:	dc1d      	bgt.n	800a6d6 <_strtod_l+0x776>
 800a69a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	dd23      	ble.n	800a6e8 <_strtod_l+0x788>
 800a6a0:	4649      	mov	r1, r9
 800a6a2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a6a4:	9805      	ldr	r0, [sp, #20]
 800a6a6:	f7ff f989 	bl	80099bc <__pow5mult>
 800a6aa:	4681      	mov	r9, r0
 800a6ac:	b9e0      	cbnz	r0, 800a6e8 <_strtod_l+0x788>
 800a6ae:	f04f 0900 	mov.w	r9, #0
 800a6b2:	e674      	b.n	800a39e <_strtod_l+0x43e>
 800a6b4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a6b8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a6bc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a6c0:	35e2      	adds	r5, #226	@ 0xe2
 800a6c2:	fa01 f305 	lsl.w	r3, r1, r5
 800a6c6:	9310      	str	r3, [sp, #64]	@ 0x40
 800a6c8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a6ca:	e7ba      	b.n	800a642 <_strtod_l+0x6e2>
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	9310      	str	r3, [sp, #64]	@ 0x40
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a6d4:	e7b5      	b.n	800a642 <_strtod_l+0x6e2>
 800a6d6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a6d8:	9805      	ldr	r0, [sp, #20]
 800a6da:	462a      	mov	r2, r5
 800a6dc:	f7ff f9c8 	bl	8009a70 <__lshift>
 800a6e0:	901a      	str	r0, [sp, #104]	@ 0x68
 800a6e2:	2800      	cmp	r0, #0
 800a6e4:	d1d9      	bne.n	800a69a <_strtod_l+0x73a>
 800a6e6:	e65a      	b.n	800a39e <_strtod_l+0x43e>
 800a6e8:	2e00      	cmp	r6, #0
 800a6ea:	dd07      	ble.n	800a6fc <_strtod_l+0x79c>
 800a6ec:	4649      	mov	r1, r9
 800a6ee:	9805      	ldr	r0, [sp, #20]
 800a6f0:	4632      	mov	r2, r6
 800a6f2:	f7ff f9bd 	bl	8009a70 <__lshift>
 800a6f6:	4681      	mov	r9, r0
 800a6f8:	2800      	cmp	r0, #0
 800a6fa:	d0d8      	beq.n	800a6ae <_strtod_l+0x74e>
 800a6fc:	2f00      	cmp	r7, #0
 800a6fe:	dd08      	ble.n	800a712 <_strtod_l+0x7b2>
 800a700:	4641      	mov	r1, r8
 800a702:	9805      	ldr	r0, [sp, #20]
 800a704:	463a      	mov	r2, r7
 800a706:	f7ff f9b3 	bl	8009a70 <__lshift>
 800a70a:	4680      	mov	r8, r0
 800a70c:	2800      	cmp	r0, #0
 800a70e:	f43f ae46 	beq.w	800a39e <_strtod_l+0x43e>
 800a712:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a714:	9805      	ldr	r0, [sp, #20]
 800a716:	464a      	mov	r2, r9
 800a718:	f7ff fa32 	bl	8009b80 <__mdiff>
 800a71c:	4604      	mov	r4, r0
 800a71e:	2800      	cmp	r0, #0
 800a720:	f43f ae3d 	beq.w	800a39e <_strtod_l+0x43e>
 800a724:	68c3      	ldr	r3, [r0, #12]
 800a726:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a728:	2300      	movs	r3, #0
 800a72a:	60c3      	str	r3, [r0, #12]
 800a72c:	4641      	mov	r1, r8
 800a72e:	f7ff fa0b 	bl	8009b48 <__mcmp>
 800a732:	2800      	cmp	r0, #0
 800a734:	da46      	bge.n	800a7c4 <_strtod_l+0x864>
 800a736:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a738:	ea53 030a 	orrs.w	r3, r3, sl
 800a73c:	d16c      	bne.n	800a818 <_strtod_l+0x8b8>
 800a73e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a742:	2b00      	cmp	r3, #0
 800a744:	d168      	bne.n	800a818 <_strtod_l+0x8b8>
 800a746:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a74a:	0d1b      	lsrs	r3, r3, #20
 800a74c:	051b      	lsls	r3, r3, #20
 800a74e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a752:	d961      	bls.n	800a818 <_strtod_l+0x8b8>
 800a754:	6963      	ldr	r3, [r4, #20]
 800a756:	b913      	cbnz	r3, 800a75e <_strtod_l+0x7fe>
 800a758:	6923      	ldr	r3, [r4, #16]
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	dd5c      	ble.n	800a818 <_strtod_l+0x8b8>
 800a75e:	4621      	mov	r1, r4
 800a760:	2201      	movs	r2, #1
 800a762:	9805      	ldr	r0, [sp, #20]
 800a764:	f7ff f984 	bl	8009a70 <__lshift>
 800a768:	4641      	mov	r1, r8
 800a76a:	4604      	mov	r4, r0
 800a76c:	f7ff f9ec 	bl	8009b48 <__mcmp>
 800a770:	2800      	cmp	r0, #0
 800a772:	dd51      	ble.n	800a818 <_strtod_l+0x8b8>
 800a774:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a778:	9a08      	ldr	r2, [sp, #32]
 800a77a:	0d1b      	lsrs	r3, r3, #20
 800a77c:	051b      	lsls	r3, r3, #20
 800a77e:	2a00      	cmp	r2, #0
 800a780:	d06b      	beq.n	800a85a <_strtod_l+0x8fa>
 800a782:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a786:	d868      	bhi.n	800a85a <_strtod_l+0x8fa>
 800a788:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a78c:	f67f ae9d 	bls.w	800a4ca <_strtod_l+0x56a>
 800a790:	4b0a      	ldr	r3, [pc, #40]	@ (800a7bc <_strtod_l+0x85c>)
 800a792:	4650      	mov	r0, sl
 800a794:	4659      	mov	r1, fp
 800a796:	2200      	movs	r2, #0
 800a798:	f7f5 ff2e 	bl	80005f8 <__aeabi_dmul>
 800a79c:	4b08      	ldr	r3, [pc, #32]	@ (800a7c0 <_strtod_l+0x860>)
 800a79e:	400b      	ands	r3, r1
 800a7a0:	4682      	mov	sl, r0
 800a7a2:	468b      	mov	fp, r1
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	f47f ae05 	bne.w	800a3b4 <_strtod_l+0x454>
 800a7aa:	9a05      	ldr	r2, [sp, #20]
 800a7ac:	2322      	movs	r3, #34	@ 0x22
 800a7ae:	6013      	str	r3, [r2, #0]
 800a7b0:	e600      	b.n	800a3b4 <_strtod_l+0x454>
 800a7b2:	bf00      	nop
 800a7b4:	0800c020 	.word	0x0800c020
 800a7b8:	fffffc02 	.word	0xfffffc02
 800a7bc:	39500000 	.word	0x39500000
 800a7c0:	7ff00000 	.word	0x7ff00000
 800a7c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a7c8:	d165      	bne.n	800a896 <_strtod_l+0x936>
 800a7ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a7cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a7d0:	b35a      	cbz	r2, 800a82a <_strtod_l+0x8ca>
 800a7d2:	4a9f      	ldr	r2, [pc, #636]	@ (800aa50 <_strtod_l+0xaf0>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d12b      	bne.n	800a830 <_strtod_l+0x8d0>
 800a7d8:	9b08      	ldr	r3, [sp, #32]
 800a7da:	4651      	mov	r1, sl
 800a7dc:	b303      	cbz	r3, 800a820 <_strtod_l+0x8c0>
 800a7de:	4b9d      	ldr	r3, [pc, #628]	@ (800aa54 <_strtod_l+0xaf4>)
 800a7e0:	465a      	mov	r2, fp
 800a7e2:	4013      	ands	r3, r2
 800a7e4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a7e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ec:	d81b      	bhi.n	800a826 <_strtod_l+0x8c6>
 800a7ee:	0d1b      	lsrs	r3, r3, #20
 800a7f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a7f4:	fa02 f303 	lsl.w	r3, r2, r3
 800a7f8:	4299      	cmp	r1, r3
 800a7fa:	d119      	bne.n	800a830 <_strtod_l+0x8d0>
 800a7fc:	4b96      	ldr	r3, [pc, #600]	@ (800aa58 <_strtod_l+0xaf8>)
 800a7fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a800:	429a      	cmp	r2, r3
 800a802:	d102      	bne.n	800a80a <_strtod_l+0x8aa>
 800a804:	3101      	adds	r1, #1
 800a806:	f43f adca 	beq.w	800a39e <_strtod_l+0x43e>
 800a80a:	4b92      	ldr	r3, [pc, #584]	@ (800aa54 <_strtod_l+0xaf4>)
 800a80c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a80e:	401a      	ands	r2, r3
 800a810:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a814:	f04f 0a00 	mov.w	sl, #0
 800a818:	9b08      	ldr	r3, [sp, #32]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d1b8      	bne.n	800a790 <_strtod_l+0x830>
 800a81e:	e5c9      	b.n	800a3b4 <_strtod_l+0x454>
 800a820:	f04f 33ff 	mov.w	r3, #4294967295
 800a824:	e7e8      	b.n	800a7f8 <_strtod_l+0x898>
 800a826:	4613      	mov	r3, r2
 800a828:	e7e6      	b.n	800a7f8 <_strtod_l+0x898>
 800a82a:	ea53 030a 	orrs.w	r3, r3, sl
 800a82e:	d0a1      	beq.n	800a774 <_strtod_l+0x814>
 800a830:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a832:	b1db      	cbz	r3, 800a86c <_strtod_l+0x90c>
 800a834:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a836:	4213      	tst	r3, r2
 800a838:	d0ee      	beq.n	800a818 <_strtod_l+0x8b8>
 800a83a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a83c:	9a08      	ldr	r2, [sp, #32]
 800a83e:	4650      	mov	r0, sl
 800a840:	4659      	mov	r1, fp
 800a842:	b1bb      	cbz	r3, 800a874 <_strtod_l+0x914>
 800a844:	f7ff fb6e 	bl	8009f24 <sulp>
 800a848:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a84c:	ec53 2b10 	vmov	r2, r3, d0
 800a850:	f7f5 fd1c 	bl	800028c <__adddf3>
 800a854:	4682      	mov	sl, r0
 800a856:	468b      	mov	fp, r1
 800a858:	e7de      	b.n	800a818 <_strtod_l+0x8b8>
 800a85a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a85e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a862:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a866:	f04f 3aff 	mov.w	sl, #4294967295
 800a86a:	e7d5      	b.n	800a818 <_strtod_l+0x8b8>
 800a86c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a86e:	ea13 0f0a 	tst.w	r3, sl
 800a872:	e7e1      	b.n	800a838 <_strtod_l+0x8d8>
 800a874:	f7ff fb56 	bl	8009f24 <sulp>
 800a878:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a87c:	ec53 2b10 	vmov	r2, r3, d0
 800a880:	f7f5 fd02 	bl	8000288 <__aeabi_dsub>
 800a884:	2200      	movs	r2, #0
 800a886:	2300      	movs	r3, #0
 800a888:	4682      	mov	sl, r0
 800a88a:	468b      	mov	fp, r1
 800a88c:	f7f6 f91c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a890:	2800      	cmp	r0, #0
 800a892:	d0c1      	beq.n	800a818 <_strtod_l+0x8b8>
 800a894:	e619      	b.n	800a4ca <_strtod_l+0x56a>
 800a896:	4641      	mov	r1, r8
 800a898:	4620      	mov	r0, r4
 800a89a:	f7ff facd 	bl	8009e38 <__ratio>
 800a89e:	ec57 6b10 	vmov	r6, r7, d0
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a8a8:	4630      	mov	r0, r6
 800a8aa:	4639      	mov	r1, r7
 800a8ac:	f7f6 f920 	bl	8000af0 <__aeabi_dcmple>
 800a8b0:	2800      	cmp	r0, #0
 800a8b2:	d06f      	beq.n	800a994 <_strtod_l+0xa34>
 800a8b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d17a      	bne.n	800a9b0 <_strtod_l+0xa50>
 800a8ba:	f1ba 0f00 	cmp.w	sl, #0
 800a8be:	d158      	bne.n	800a972 <_strtod_l+0xa12>
 800a8c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d15a      	bne.n	800a980 <_strtod_l+0xa20>
 800a8ca:	4b64      	ldr	r3, [pc, #400]	@ (800aa5c <_strtod_l+0xafc>)
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	4630      	mov	r0, r6
 800a8d0:	4639      	mov	r1, r7
 800a8d2:	f7f6 f903 	bl	8000adc <__aeabi_dcmplt>
 800a8d6:	2800      	cmp	r0, #0
 800a8d8:	d159      	bne.n	800a98e <_strtod_l+0xa2e>
 800a8da:	4630      	mov	r0, r6
 800a8dc:	4639      	mov	r1, r7
 800a8de:	4b60      	ldr	r3, [pc, #384]	@ (800aa60 <_strtod_l+0xb00>)
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f7f5 fe89 	bl	80005f8 <__aeabi_dmul>
 800a8e6:	4606      	mov	r6, r0
 800a8e8:	460f      	mov	r7, r1
 800a8ea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a8ee:	9606      	str	r6, [sp, #24]
 800a8f0:	9307      	str	r3, [sp, #28]
 800a8f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a8f6:	4d57      	ldr	r5, [pc, #348]	@ (800aa54 <_strtod_l+0xaf4>)
 800a8f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a8fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8fe:	401d      	ands	r5, r3
 800a900:	4b58      	ldr	r3, [pc, #352]	@ (800aa64 <_strtod_l+0xb04>)
 800a902:	429d      	cmp	r5, r3
 800a904:	f040 80b2 	bne.w	800aa6c <_strtod_l+0xb0c>
 800a908:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a90a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a90e:	ec4b ab10 	vmov	d0, sl, fp
 800a912:	f7ff f9c9 	bl	8009ca8 <__ulp>
 800a916:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a91a:	ec51 0b10 	vmov	r0, r1, d0
 800a91e:	f7f5 fe6b 	bl	80005f8 <__aeabi_dmul>
 800a922:	4652      	mov	r2, sl
 800a924:	465b      	mov	r3, fp
 800a926:	f7f5 fcb1 	bl	800028c <__adddf3>
 800a92a:	460b      	mov	r3, r1
 800a92c:	4949      	ldr	r1, [pc, #292]	@ (800aa54 <_strtod_l+0xaf4>)
 800a92e:	4a4e      	ldr	r2, [pc, #312]	@ (800aa68 <_strtod_l+0xb08>)
 800a930:	4019      	ands	r1, r3
 800a932:	4291      	cmp	r1, r2
 800a934:	4682      	mov	sl, r0
 800a936:	d942      	bls.n	800a9be <_strtod_l+0xa5e>
 800a938:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a93a:	4b47      	ldr	r3, [pc, #284]	@ (800aa58 <_strtod_l+0xaf8>)
 800a93c:	429a      	cmp	r2, r3
 800a93e:	d103      	bne.n	800a948 <_strtod_l+0x9e8>
 800a940:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a942:	3301      	adds	r3, #1
 800a944:	f43f ad2b 	beq.w	800a39e <_strtod_l+0x43e>
 800a948:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800aa58 <_strtod_l+0xaf8>
 800a94c:	f04f 3aff 	mov.w	sl, #4294967295
 800a950:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a952:	9805      	ldr	r0, [sp, #20]
 800a954:	f7fe fe74 	bl	8009640 <_Bfree>
 800a958:	9805      	ldr	r0, [sp, #20]
 800a95a:	4649      	mov	r1, r9
 800a95c:	f7fe fe70 	bl	8009640 <_Bfree>
 800a960:	9805      	ldr	r0, [sp, #20]
 800a962:	4641      	mov	r1, r8
 800a964:	f7fe fe6c 	bl	8009640 <_Bfree>
 800a968:	9805      	ldr	r0, [sp, #20]
 800a96a:	4621      	mov	r1, r4
 800a96c:	f7fe fe68 	bl	8009640 <_Bfree>
 800a970:	e618      	b.n	800a5a4 <_strtod_l+0x644>
 800a972:	f1ba 0f01 	cmp.w	sl, #1
 800a976:	d103      	bne.n	800a980 <_strtod_l+0xa20>
 800a978:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	f43f ada5 	beq.w	800a4ca <_strtod_l+0x56a>
 800a980:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800aa30 <_strtod_l+0xad0>
 800a984:	4f35      	ldr	r7, [pc, #212]	@ (800aa5c <_strtod_l+0xafc>)
 800a986:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a98a:	2600      	movs	r6, #0
 800a98c:	e7b1      	b.n	800a8f2 <_strtod_l+0x992>
 800a98e:	4f34      	ldr	r7, [pc, #208]	@ (800aa60 <_strtod_l+0xb00>)
 800a990:	2600      	movs	r6, #0
 800a992:	e7aa      	b.n	800a8ea <_strtod_l+0x98a>
 800a994:	4b32      	ldr	r3, [pc, #200]	@ (800aa60 <_strtod_l+0xb00>)
 800a996:	4630      	mov	r0, r6
 800a998:	4639      	mov	r1, r7
 800a99a:	2200      	movs	r2, #0
 800a99c:	f7f5 fe2c 	bl	80005f8 <__aeabi_dmul>
 800a9a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9a2:	4606      	mov	r6, r0
 800a9a4:	460f      	mov	r7, r1
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d09f      	beq.n	800a8ea <_strtod_l+0x98a>
 800a9aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a9ae:	e7a0      	b.n	800a8f2 <_strtod_l+0x992>
 800a9b0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800aa38 <_strtod_l+0xad8>
 800a9b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a9b8:	ec57 6b17 	vmov	r6, r7, d7
 800a9bc:	e799      	b.n	800a8f2 <_strtod_l+0x992>
 800a9be:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a9c2:	9b08      	ldr	r3, [sp, #32]
 800a9c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d1c1      	bne.n	800a950 <_strtod_l+0x9f0>
 800a9cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a9d0:	0d1b      	lsrs	r3, r3, #20
 800a9d2:	051b      	lsls	r3, r3, #20
 800a9d4:	429d      	cmp	r5, r3
 800a9d6:	d1bb      	bne.n	800a950 <_strtod_l+0x9f0>
 800a9d8:	4630      	mov	r0, r6
 800a9da:	4639      	mov	r1, r7
 800a9dc:	f7f6 f96c 	bl	8000cb8 <__aeabi_d2lz>
 800a9e0:	f7f5 fddc 	bl	800059c <__aeabi_l2d>
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	460b      	mov	r3, r1
 800a9e8:	4630      	mov	r0, r6
 800a9ea:	4639      	mov	r1, r7
 800a9ec:	f7f5 fc4c 	bl	8000288 <__aeabi_dsub>
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a9f8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a9fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9fe:	ea46 060a 	orr.w	r6, r6, sl
 800aa02:	431e      	orrs	r6, r3
 800aa04:	d06f      	beq.n	800aae6 <_strtod_l+0xb86>
 800aa06:	a30e      	add	r3, pc, #56	@ (adr r3, 800aa40 <_strtod_l+0xae0>)
 800aa08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa0c:	f7f6 f866 	bl	8000adc <__aeabi_dcmplt>
 800aa10:	2800      	cmp	r0, #0
 800aa12:	f47f accf 	bne.w	800a3b4 <_strtod_l+0x454>
 800aa16:	a30c      	add	r3, pc, #48	@ (adr r3, 800aa48 <_strtod_l+0xae8>)
 800aa18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa20:	f7f6 f87a 	bl	8000b18 <__aeabi_dcmpgt>
 800aa24:	2800      	cmp	r0, #0
 800aa26:	d093      	beq.n	800a950 <_strtod_l+0x9f0>
 800aa28:	e4c4      	b.n	800a3b4 <_strtod_l+0x454>
 800aa2a:	bf00      	nop
 800aa2c:	f3af 8000 	nop.w
 800aa30:	00000000 	.word	0x00000000
 800aa34:	bff00000 	.word	0xbff00000
 800aa38:	00000000 	.word	0x00000000
 800aa3c:	3ff00000 	.word	0x3ff00000
 800aa40:	94a03595 	.word	0x94a03595
 800aa44:	3fdfffff 	.word	0x3fdfffff
 800aa48:	35afe535 	.word	0x35afe535
 800aa4c:	3fe00000 	.word	0x3fe00000
 800aa50:	000fffff 	.word	0x000fffff
 800aa54:	7ff00000 	.word	0x7ff00000
 800aa58:	7fefffff 	.word	0x7fefffff
 800aa5c:	3ff00000 	.word	0x3ff00000
 800aa60:	3fe00000 	.word	0x3fe00000
 800aa64:	7fe00000 	.word	0x7fe00000
 800aa68:	7c9fffff 	.word	0x7c9fffff
 800aa6c:	9b08      	ldr	r3, [sp, #32]
 800aa6e:	b323      	cbz	r3, 800aaba <_strtod_l+0xb5a>
 800aa70:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800aa74:	d821      	bhi.n	800aaba <_strtod_l+0xb5a>
 800aa76:	a328      	add	r3, pc, #160	@ (adr r3, 800ab18 <_strtod_l+0xbb8>)
 800aa78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7c:	4630      	mov	r0, r6
 800aa7e:	4639      	mov	r1, r7
 800aa80:	f7f6 f836 	bl	8000af0 <__aeabi_dcmple>
 800aa84:	b1a0      	cbz	r0, 800aab0 <_strtod_l+0xb50>
 800aa86:	4639      	mov	r1, r7
 800aa88:	4630      	mov	r0, r6
 800aa8a:	f7f6 f88d 	bl	8000ba8 <__aeabi_d2uiz>
 800aa8e:	2801      	cmp	r0, #1
 800aa90:	bf38      	it	cc
 800aa92:	2001      	movcc	r0, #1
 800aa94:	f7f5 fd36 	bl	8000504 <__aeabi_ui2d>
 800aa98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa9a:	4606      	mov	r6, r0
 800aa9c:	460f      	mov	r7, r1
 800aa9e:	b9fb      	cbnz	r3, 800aae0 <_strtod_l+0xb80>
 800aaa0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aaa4:	9014      	str	r0, [sp, #80]	@ 0x50
 800aaa6:	9315      	str	r3, [sp, #84]	@ 0x54
 800aaa8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800aaac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800aab0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aab2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800aab6:	1b5b      	subs	r3, r3, r5
 800aab8:	9311      	str	r3, [sp, #68]	@ 0x44
 800aaba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800aabe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800aac2:	f7ff f8f1 	bl	8009ca8 <__ulp>
 800aac6:	4650      	mov	r0, sl
 800aac8:	ec53 2b10 	vmov	r2, r3, d0
 800aacc:	4659      	mov	r1, fp
 800aace:	f7f5 fd93 	bl	80005f8 <__aeabi_dmul>
 800aad2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800aad6:	f7f5 fbd9 	bl	800028c <__adddf3>
 800aada:	4682      	mov	sl, r0
 800aadc:	468b      	mov	fp, r1
 800aade:	e770      	b.n	800a9c2 <_strtod_l+0xa62>
 800aae0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800aae4:	e7e0      	b.n	800aaa8 <_strtod_l+0xb48>
 800aae6:	a30e      	add	r3, pc, #56	@ (adr r3, 800ab20 <_strtod_l+0xbc0>)
 800aae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaec:	f7f5 fff6 	bl	8000adc <__aeabi_dcmplt>
 800aaf0:	e798      	b.n	800aa24 <_strtod_l+0xac4>
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aaf6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800aaf8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aafa:	6013      	str	r3, [r2, #0]
 800aafc:	f7ff ba6d 	b.w	8009fda <_strtod_l+0x7a>
 800ab00:	2a65      	cmp	r2, #101	@ 0x65
 800ab02:	f43f ab66 	beq.w	800a1d2 <_strtod_l+0x272>
 800ab06:	2a45      	cmp	r2, #69	@ 0x45
 800ab08:	f43f ab63 	beq.w	800a1d2 <_strtod_l+0x272>
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	f7ff bb9e 	b.w	800a24e <_strtod_l+0x2ee>
 800ab12:	bf00      	nop
 800ab14:	f3af 8000 	nop.w
 800ab18:	ffc00000 	.word	0xffc00000
 800ab1c:	41dfffff 	.word	0x41dfffff
 800ab20:	94a03595 	.word	0x94a03595
 800ab24:	3fcfffff 	.word	0x3fcfffff

0800ab28 <_strtod_r>:
 800ab28:	4b01      	ldr	r3, [pc, #4]	@ (800ab30 <_strtod_r+0x8>)
 800ab2a:	f7ff ba19 	b.w	8009f60 <_strtod_l>
 800ab2e:	bf00      	nop
 800ab30:	2000006c 	.word	0x2000006c

0800ab34 <_strtol_l.constprop.0>:
 800ab34:	2b24      	cmp	r3, #36	@ 0x24
 800ab36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab3a:	4686      	mov	lr, r0
 800ab3c:	4690      	mov	r8, r2
 800ab3e:	d801      	bhi.n	800ab44 <_strtol_l.constprop.0+0x10>
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	d106      	bne.n	800ab52 <_strtol_l.constprop.0+0x1e>
 800ab44:	f7fd fdac 	bl	80086a0 <__errno>
 800ab48:	2316      	movs	r3, #22
 800ab4a:	6003      	str	r3, [r0, #0]
 800ab4c:	2000      	movs	r0, #0
 800ab4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab52:	4834      	ldr	r0, [pc, #208]	@ (800ac24 <_strtol_l.constprop.0+0xf0>)
 800ab54:	460d      	mov	r5, r1
 800ab56:	462a      	mov	r2, r5
 800ab58:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab5c:	5d06      	ldrb	r6, [r0, r4]
 800ab5e:	f016 0608 	ands.w	r6, r6, #8
 800ab62:	d1f8      	bne.n	800ab56 <_strtol_l.constprop.0+0x22>
 800ab64:	2c2d      	cmp	r4, #45	@ 0x2d
 800ab66:	d12d      	bne.n	800abc4 <_strtol_l.constprop.0+0x90>
 800ab68:	782c      	ldrb	r4, [r5, #0]
 800ab6a:	2601      	movs	r6, #1
 800ab6c:	1c95      	adds	r5, r2, #2
 800ab6e:	f033 0210 	bics.w	r2, r3, #16
 800ab72:	d109      	bne.n	800ab88 <_strtol_l.constprop.0+0x54>
 800ab74:	2c30      	cmp	r4, #48	@ 0x30
 800ab76:	d12a      	bne.n	800abce <_strtol_l.constprop.0+0x9a>
 800ab78:	782a      	ldrb	r2, [r5, #0]
 800ab7a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ab7e:	2a58      	cmp	r2, #88	@ 0x58
 800ab80:	d125      	bne.n	800abce <_strtol_l.constprop.0+0x9a>
 800ab82:	786c      	ldrb	r4, [r5, #1]
 800ab84:	2310      	movs	r3, #16
 800ab86:	3502      	adds	r5, #2
 800ab88:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ab8c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ab90:	2200      	movs	r2, #0
 800ab92:	fbbc f9f3 	udiv	r9, ip, r3
 800ab96:	4610      	mov	r0, r2
 800ab98:	fb03 ca19 	mls	sl, r3, r9, ip
 800ab9c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800aba0:	2f09      	cmp	r7, #9
 800aba2:	d81b      	bhi.n	800abdc <_strtol_l.constprop.0+0xa8>
 800aba4:	463c      	mov	r4, r7
 800aba6:	42a3      	cmp	r3, r4
 800aba8:	dd27      	ble.n	800abfa <_strtol_l.constprop.0+0xc6>
 800abaa:	1c57      	adds	r7, r2, #1
 800abac:	d007      	beq.n	800abbe <_strtol_l.constprop.0+0x8a>
 800abae:	4581      	cmp	r9, r0
 800abb0:	d320      	bcc.n	800abf4 <_strtol_l.constprop.0+0xc0>
 800abb2:	d101      	bne.n	800abb8 <_strtol_l.constprop.0+0x84>
 800abb4:	45a2      	cmp	sl, r4
 800abb6:	db1d      	blt.n	800abf4 <_strtol_l.constprop.0+0xc0>
 800abb8:	fb00 4003 	mla	r0, r0, r3, r4
 800abbc:	2201      	movs	r2, #1
 800abbe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800abc2:	e7eb      	b.n	800ab9c <_strtol_l.constprop.0+0x68>
 800abc4:	2c2b      	cmp	r4, #43	@ 0x2b
 800abc6:	bf04      	itt	eq
 800abc8:	782c      	ldrbeq	r4, [r5, #0]
 800abca:	1c95      	addeq	r5, r2, #2
 800abcc:	e7cf      	b.n	800ab6e <_strtol_l.constprop.0+0x3a>
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d1da      	bne.n	800ab88 <_strtol_l.constprop.0+0x54>
 800abd2:	2c30      	cmp	r4, #48	@ 0x30
 800abd4:	bf0c      	ite	eq
 800abd6:	2308      	moveq	r3, #8
 800abd8:	230a      	movne	r3, #10
 800abda:	e7d5      	b.n	800ab88 <_strtol_l.constprop.0+0x54>
 800abdc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800abe0:	2f19      	cmp	r7, #25
 800abe2:	d801      	bhi.n	800abe8 <_strtol_l.constprop.0+0xb4>
 800abe4:	3c37      	subs	r4, #55	@ 0x37
 800abe6:	e7de      	b.n	800aba6 <_strtol_l.constprop.0+0x72>
 800abe8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800abec:	2f19      	cmp	r7, #25
 800abee:	d804      	bhi.n	800abfa <_strtol_l.constprop.0+0xc6>
 800abf0:	3c57      	subs	r4, #87	@ 0x57
 800abf2:	e7d8      	b.n	800aba6 <_strtol_l.constprop.0+0x72>
 800abf4:	f04f 32ff 	mov.w	r2, #4294967295
 800abf8:	e7e1      	b.n	800abbe <_strtol_l.constprop.0+0x8a>
 800abfa:	1c53      	adds	r3, r2, #1
 800abfc:	d108      	bne.n	800ac10 <_strtol_l.constprop.0+0xdc>
 800abfe:	2322      	movs	r3, #34	@ 0x22
 800ac00:	f8ce 3000 	str.w	r3, [lr]
 800ac04:	4660      	mov	r0, ip
 800ac06:	f1b8 0f00 	cmp.w	r8, #0
 800ac0a:	d0a0      	beq.n	800ab4e <_strtol_l.constprop.0+0x1a>
 800ac0c:	1e69      	subs	r1, r5, #1
 800ac0e:	e006      	b.n	800ac1e <_strtol_l.constprop.0+0xea>
 800ac10:	b106      	cbz	r6, 800ac14 <_strtol_l.constprop.0+0xe0>
 800ac12:	4240      	negs	r0, r0
 800ac14:	f1b8 0f00 	cmp.w	r8, #0
 800ac18:	d099      	beq.n	800ab4e <_strtol_l.constprop.0+0x1a>
 800ac1a:	2a00      	cmp	r2, #0
 800ac1c:	d1f6      	bne.n	800ac0c <_strtol_l.constprop.0+0xd8>
 800ac1e:	f8c8 1000 	str.w	r1, [r8]
 800ac22:	e794      	b.n	800ab4e <_strtol_l.constprop.0+0x1a>
 800ac24:	0800c049 	.word	0x0800c049

0800ac28 <_strtol_r>:
 800ac28:	f7ff bf84 	b.w	800ab34 <_strtol_l.constprop.0>

0800ac2c <__ssputs_r>:
 800ac2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac30:	688e      	ldr	r6, [r1, #8]
 800ac32:	461f      	mov	r7, r3
 800ac34:	42be      	cmp	r6, r7
 800ac36:	680b      	ldr	r3, [r1, #0]
 800ac38:	4682      	mov	sl, r0
 800ac3a:	460c      	mov	r4, r1
 800ac3c:	4690      	mov	r8, r2
 800ac3e:	d82d      	bhi.n	800ac9c <__ssputs_r+0x70>
 800ac40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ac44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ac48:	d026      	beq.n	800ac98 <__ssputs_r+0x6c>
 800ac4a:	6965      	ldr	r5, [r4, #20]
 800ac4c:	6909      	ldr	r1, [r1, #16]
 800ac4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac52:	eba3 0901 	sub.w	r9, r3, r1
 800ac56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac5a:	1c7b      	adds	r3, r7, #1
 800ac5c:	444b      	add	r3, r9
 800ac5e:	106d      	asrs	r5, r5, #1
 800ac60:	429d      	cmp	r5, r3
 800ac62:	bf38      	it	cc
 800ac64:	461d      	movcc	r5, r3
 800ac66:	0553      	lsls	r3, r2, #21
 800ac68:	d527      	bpl.n	800acba <__ssputs_r+0x8e>
 800ac6a:	4629      	mov	r1, r5
 800ac6c:	f7fe fc1c 	bl	80094a8 <_malloc_r>
 800ac70:	4606      	mov	r6, r0
 800ac72:	b360      	cbz	r0, 800acce <__ssputs_r+0xa2>
 800ac74:	6921      	ldr	r1, [r4, #16]
 800ac76:	464a      	mov	r2, r9
 800ac78:	f7fd fd3f 	bl	80086fa <memcpy>
 800ac7c:	89a3      	ldrh	r3, [r4, #12]
 800ac7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ac82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac86:	81a3      	strh	r3, [r4, #12]
 800ac88:	6126      	str	r6, [r4, #16]
 800ac8a:	6165      	str	r5, [r4, #20]
 800ac8c:	444e      	add	r6, r9
 800ac8e:	eba5 0509 	sub.w	r5, r5, r9
 800ac92:	6026      	str	r6, [r4, #0]
 800ac94:	60a5      	str	r5, [r4, #8]
 800ac96:	463e      	mov	r6, r7
 800ac98:	42be      	cmp	r6, r7
 800ac9a:	d900      	bls.n	800ac9e <__ssputs_r+0x72>
 800ac9c:	463e      	mov	r6, r7
 800ac9e:	6820      	ldr	r0, [r4, #0]
 800aca0:	4632      	mov	r2, r6
 800aca2:	4641      	mov	r1, r8
 800aca4:	f000 fb6a 	bl	800b37c <memmove>
 800aca8:	68a3      	ldr	r3, [r4, #8]
 800acaa:	1b9b      	subs	r3, r3, r6
 800acac:	60a3      	str	r3, [r4, #8]
 800acae:	6823      	ldr	r3, [r4, #0]
 800acb0:	4433      	add	r3, r6
 800acb2:	6023      	str	r3, [r4, #0]
 800acb4:	2000      	movs	r0, #0
 800acb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acba:	462a      	mov	r2, r5
 800acbc:	f000 ff41 	bl	800bb42 <_realloc_r>
 800acc0:	4606      	mov	r6, r0
 800acc2:	2800      	cmp	r0, #0
 800acc4:	d1e0      	bne.n	800ac88 <__ssputs_r+0x5c>
 800acc6:	6921      	ldr	r1, [r4, #16]
 800acc8:	4650      	mov	r0, sl
 800acca:	f7fe fb79 	bl	80093c0 <_free_r>
 800acce:	230c      	movs	r3, #12
 800acd0:	f8ca 3000 	str.w	r3, [sl]
 800acd4:	89a3      	ldrh	r3, [r4, #12]
 800acd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acda:	81a3      	strh	r3, [r4, #12]
 800acdc:	f04f 30ff 	mov.w	r0, #4294967295
 800ace0:	e7e9      	b.n	800acb6 <__ssputs_r+0x8a>
	...

0800ace4 <_svfiprintf_r>:
 800ace4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ace8:	4698      	mov	r8, r3
 800acea:	898b      	ldrh	r3, [r1, #12]
 800acec:	061b      	lsls	r3, r3, #24
 800acee:	b09d      	sub	sp, #116	@ 0x74
 800acf0:	4607      	mov	r7, r0
 800acf2:	460d      	mov	r5, r1
 800acf4:	4614      	mov	r4, r2
 800acf6:	d510      	bpl.n	800ad1a <_svfiprintf_r+0x36>
 800acf8:	690b      	ldr	r3, [r1, #16]
 800acfa:	b973      	cbnz	r3, 800ad1a <_svfiprintf_r+0x36>
 800acfc:	2140      	movs	r1, #64	@ 0x40
 800acfe:	f7fe fbd3 	bl	80094a8 <_malloc_r>
 800ad02:	6028      	str	r0, [r5, #0]
 800ad04:	6128      	str	r0, [r5, #16]
 800ad06:	b930      	cbnz	r0, 800ad16 <_svfiprintf_r+0x32>
 800ad08:	230c      	movs	r3, #12
 800ad0a:	603b      	str	r3, [r7, #0]
 800ad0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad10:	b01d      	add	sp, #116	@ 0x74
 800ad12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad16:	2340      	movs	r3, #64	@ 0x40
 800ad18:	616b      	str	r3, [r5, #20]
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad1e:	2320      	movs	r3, #32
 800ad20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ad24:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad28:	2330      	movs	r3, #48	@ 0x30
 800ad2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800aec8 <_svfiprintf_r+0x1e4>
 800ad2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ad32:	f04f 0901 	mov.w	r9, #1
 800ad36:	4623      	mov	r3, r4
 800ad38:	469a      	mov	sl, r3
 800ad3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad3e:	b10a      	cbz	r2, 800ad44 <_svfiprintf_r+0x60>
 800ad40:	2a25      	cmp	r2, #37	@ 0x25
 800ad42:	d1f9      	bne.n	800ad38 <_svfiprintf_r+0x54>
 800ad44:	ebba 0b04 	subs.w	fp, sl, r4
 800ad48:	d00b      	beq.n	800ad62 <_svfiprintf_r+0x7e>
 800ad4a:	465b      	mov	r3, fp
 800ad4c:	4622      	mov	r2, r4
 800ad4e:	4629      	mov	r1, r5
 800ad50:	4638      	mov	r0, r7
 800ad52:	f7ff ff6b 	bl	800ac2c <__ssputs_r>
 800ad56:	3001      	adds	r0, #1
 800ad58:	f000 80a7 	beq.w	800aeaa <_svfiprintf_r+0x1c6>
 800ad5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad5e:	445a      	add	r2, fp
 800ad60:	9209      	str	r2, [sp, #36]	@ 0x24
 800ad62:	f89a 3000 	ldrb.w	r3, [sl]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	f000 809f 	beq.w	800aeaa <_svfiprintf_r+0x1c6>
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	f04f 32ff 	mov.w	r2, #4294967295
 800ad72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad76:	f10a 0a01 	add.w	sl, sl, #1
 800ad7a:	9304      	str	r3, [sp, #16]
 800ad7c:	9307      	str	r3, [sp, #28]
 800ad7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ad82:	931a      	str	r3, [sp, #104]	@ 0x68
 800ad84:	4654      	mov	r4, sl
 800ad86:	2205      	movs	r2, #5
 800ad88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad8c:	484e      	ldr	r0, [pc, #312]	@ (800aec8 <_svfiprintf_r+0x1e4>)
 800ad8e:	f7f5 fa1f 	bl	80001d0 <memchr>
 800ad92:	9a04      	ldr	r2, [sp, #16]
 800ad94:	b9d8      	cbnz	r0, 800adce <_svfiprintf_r+0xea>
 800ad96:	06d0      	lsls	r0, r2, #27
 800ad98:	bf44      	itt	mi
 800ad9a:	2320      	movmi	r3, #32
 800ad9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ada0:	0711      	lsls	r1, r2, #28
 800ada2:	bf44      	itt	mi
 800ada4:	232b      	movmi	r3, #43	@ 0x2b
 800ada6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800adaa:	f89a 3000 	ldrb.w	r3, [sl]
 800adae:	2b2a      	cmp	r3, #42	@ 0x2a
 800adb0:	d015      	beq.n	800adde <_svfiprintf_r+0xfa>
 800adb2:	9a07      	ldr	r2, [sp, #28]
 800adb4:	4654      	mov	r4, sl
 800adb6:	2000      	movs	r0, #0
 800adb8:	f04f 0c0a 	mov.w	ip, #10
 800adbc:	4621      	mov	r1, r4
 800adbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adc2:	3b30      	subs	r3, #48	@ 0x30
 800adc4:	2b09      	cmp	r3, #9
 800adc6:	d94b      	bls.n	800ae60 <_svfiprintf_r+0x17c>
 800adc8:	b1b0      	cbz	r0, 800adf8 <_svfiprintf_r+0x114>
 800adca:	9207      	str	r2, [sp, #28]
 800adcc:	e014      	b.n	800adf8 <_svfiprintf_r+0x114>
 800adce:	eba0 0308 	sub.w	r3, r0, r8
 800add2:	fa09 f303 	lsl.w	r3, r9, r3
 800add6:	4313      	orrs	r3, r2
 800add8:	9304      	str	r3, [sp, #16]
 800adda:	46a2      	mov	sl, r4
 800addc:	e7d2      	b.n	800ad84 <_svfiprintf_r+0xa0>
 800adde:	9b03      	ldr	r3, [sp, #12]
 800ade0:	1d19      	adds	r1, r3, #4
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	9103      	str	r1, [sp, #12]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	bfbb      	ittet	lt
 800adea:	425b      	neglt	r3, r3
 800adec:	f042 0202 	orrlt.w	r2, r2, #2
 800adf0:	9307      	strge	r3, [sp, #28]
 800adf2:	9307      	strlt	r3, [sp, #28]
 800adf4:	bfb8      	it	lt
 800adf6:	9204      	strlt	r2, [sp, #16]
 800adf8:	7823      	ldrb	r3, [r4, #0]
 800adfa:	2b2e      	cmp	r3, #46	@ 0x2e
 800adfc:	d10a      	bne.n	800ae14 <_svfiprintf_r+0x130>
 800adfe:	7863      	ldrb	r3, [r4, #1]
 800ae00:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae02:	d132      	bne.n	800ae6a <_svfiprintf_r+0x186>
 800ae04:	9b03      	ldr	r3, [sp, #12]
 800ae06:	1d1a      	adds	r2, r3, #4
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	9203      	str	r2, [sp, #12]
 800ae0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ae10:	3402      	adds	r4, #2
 800ae12:	9305      	str	r3, [sp, #20]
 800ae14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800aed8 <_svfiprintf_r+0x1f4>
 800ae18:	7821      	ldrb	r1, [r4, #0]
 800ae1a:	2203      	movs	r2, #3
 800ae1c:	4650      	mov	r0, sl
 800ae1e:	f7f5 f9d7 	bl	80001d0 <memchr>
 800ae22:	b138      	cbz	r0, 800ae34 <_svfiprintf_r+0x150>
 800ae24:	9b04      	ldr	r3, [sp, #16]
 800ae26:	eba0 000a 	sub.w	r0, r0, sl
 800ae2a:	2240      	movs	r2, #64	@ 0x40
 800ae2c:	4082      	lsls	r2, r0
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	3401      	adds	r4, #1
 800ae32:	9304      	str	r3, [sp, #16]
 800ae34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae38:	4824      	ldr	r0, [pc, #144]	@ (800aecc <_svfiprintf_r+0x1e8>)
 800ae3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ae3e:	2206      	movs	r2, #6
 800ae40:	f7f5 f9c6 	bl	80001d0 <memchr>
 800ae44:	2800      	cmp	r0, #0
 800ae46:	d036      	beq.n	800aeb6 <_svfiprintf_r+0x1d2>
 800ae48:	4b21      	ldr	r3, [pc, #132]	@ (800aed0 <_svfiprintf_r+0x1ec>)
 800ae4a:	bb1b      	cbnz	r3, 800ae94 <_svfiprintf_r+0x1b0>
 800ae4c:	9b03      	ldr	r3, [sp, #12]
 800ae4e:	3307      	adds	r3, #7
 800ae50:	f023 0307 	bic.w	r3, r3, #7
 800ae54:	3308      	adds	r3, #8
 800ae56:	9303      	str	r3, [sp, #12]
 800ae58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae5a:	4433      	add	r3, r6
 800ae5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae5e:	e76a      	b.n	800ad36 <_svfiprintf_r+0x52>
 800ae60:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae64:	460c      	mov	r4, r1
 800ae66:	2001      	movs	r0, #1
 800ae68:	e7a8      	b.n	800adbc <_svfiprintf_r+0xd8>
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	3401      	adds	r4, #1
 800ae6e:	9305      	str	r3, [sp, #20]
 800ae70:	4619      	mov	r1, r3
 800ae72:	f04f 0c0a 	mov.w	ip, #10
 800ae76:	4620      	mov	r0, r4
 800ae78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae7c:	3a30      	subs	r2, #48	@ 0x30
 800ae7e:	2a09      	cmp	r2, #9
 800ae80:	d903      	bls.n	800ae8a <_svfiprintf_r+0x1a6>
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d0c6      	beq.n	800ae14 <_svfiprintf_r+0x130>
 800ae86:	9105      	str	r1, [sp, #20]
 800ae88:	e7c4      	b.n	800ae14 <_svfiprintf_r+0x130>
 800ae8a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae8e:	4604      	mov	r4, r0
 800ae90:	2301      	movs	r3, #1
 800ae92:	e7f0      	b.n	800ae76 <_svfiprintf_r+0x192>
 800ae94:	ab03      	add	r3, sp, #12
 800ae96:	9300      	str	r3, [sp, #0]
 800ae98:	462a      	mov	r2, r5
 800ae9a:	4b0e      	ldr	r3, [pc, #56]	@ (800aed4 <_svfiprintf_r+0x1f0>)
 800ae9c:	a904      	add	r1, sp, #16
 800ae9e:	4638      	mov	r0, r7
 800aea0:	f7fc fb60 	bl	8007564 <_printf_float>
 800aea4:	1c42      	adds	r2, r0, #1
 800aea6:	4606      	mov	r6, r0
 800aea8:	d1d6      	bne.n	800ae58 <_svfiprintf_r+0x174>
 800aeaa:	89ab      	ldrh	r3, [r5, #12]
 800aeac:	065b      	lsls	r3, r3, #25
 800aeae:	f53f af2d 	bmi.w	800ad0c <_svfiprintf_r+0x28>
 800aeb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aeb4:	e72c      	b.n	800ad10 <_svfiprintf_r+0x2c>
 800aeb6:	ab03      	add	r3, sp, #12
 800aeb8:	9300      	str	r3, [sp, #0]
 800aeba:	462a      	mov	r2, r5
 800aebc:	4b05      	ldr	r3, [pc, #20]	@ (800aed4 <_svfiprintf_r+0x1f0>)
 800aebe:	a904      	add	r1, sp, #16
 800aec0:	4638      	mov	r0, r7
 800aec2:	f7fc fde7 	bl	8007a94 <_printf_i>
 800aec6:	e7ed      	b.n	800aea4 <_svfiprintf_r+0x1c0>
 800aec8:	0800c149 	.word	0x0800c149
 800aecc:	0800c153 	.word	0x0800c153
 800aed0:	08007565 	.word	0x08007565
 800aed4:	0800ac2d 	.word	0x0800ac2d
 800aed8:	0800c14f 	.word	0x0800c14f

0800aedc <__sfputc_r>:
 800aedc:	6893      	ldr	r3, [r2, #8]
 800aede:	3b01      	subs	r3, #1
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	b410      	push	{r4}
 800aee4:	6093      	str	r3, [r2, #8]
 800aee6:	da08      	bge.n	800aefa <__sfputc_r+0x1e>
 800aee8:	6994      	ldr	r4, [r2, #24]
 800aeea:	42a3      	cmp	r3, r4
 800aeec:	db01      	blt.n	800aef2 <__sfputc_r+0x16>
 800aeee:	290a      	cmp	r1, #10
 800aef0:	d103      	bne.n	800aefa <__sfputc_r+0x1e>
 800aef2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aef6:	f7fd ba96 	b.w	8008426 <__swbuf_r>
 800aefa:	6813      	ldr	r3, [r2, #0]
 800aefc:	1c58      	adds	r0, r3, #1
 800aefe:	6010      	str	r0, [r2, #0]
 800af00:	7019      	strb	r1, [r3, #0]
 800af02:	4608      	mov	r0, r1
 800af04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af08:	4770      	bx	lr

0800af0a <__sfputs_r>:
 800af0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af0c:	4606      	mov	r6, r0
 800af0e:	460f      	mov	r7, r1
 800af10:	4614      	mov	r4, r2
 800af12:	18d5      	adds	r5, r2, r3
 800af14:	42ac      	cmp	r4, r5
 800af16:	d101      	bne.n	800af1c <__sfputs_r+0x12>
 800af18:	2000      	movs	r0, #0
 800af1a:	e007      	b.n	800af2c <__sfputs_r+0x22>
 800af1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af20:	463a      	mov	r2, r7
 800af22:	4630      	mov	r0, r6
 800af24:	f7ff ffda 	bl	800aedc <__sfputc_r>
 800af28:	1c43      	adds	r3, r0, #1
 800af2a:	d1f3      	bne.n	800af14 <__sfputs_r+0xa>
 800af2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800af30 <_vfiprintf_r>:
 800af30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af34:	460d      	mov	r5, r1
 800af36:	b09d      	sub	sp, #116	@ 0x74
 800af38:	4614      	mov	r4, r2
 800af3a:	4698      	mov	r8, r3
 800af3c:	4606      	mov	r6, r0
 800af3e:	b118      	cbz	r0, 800af48 <_vfiprintf_r+0x18>
 800af40:	6a03      	ldr	r3, [r0, #32]
 800af42:	b90b      	cbnz	r3, 800af48 <_vfiprintf_r+0x18>
 800af44:	f7fd f966 	bl	8008214 <__sinit>
 800af48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af4a:	07d9      	lsls	r1, r3, #31
 800af4c:	d405      	bmi.n	800af5a <_vfiprintf_r+0x2a>
 800af4e:	89ab      	ldrh	r3, [r5, #12]
 800af50:	059a      	lsls	r2, r3, #22
 800af52:	d402      	bmi.n	800af5a <_vfiprintf_r+0x2a>
 800af54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af56:	f7fd fbce 	bl	80086f6 <__retarget_lock_acquire_recursive>
 800af5a:	89ab      	ldrh	r3, [r5, #12]
 800af5c:	071b      	lsls	r3, r3, #28
 800af5e:	d501      	bpl.n	800af64 <_vfiprintf_r+0x34>
 800af60:	692b      	ldr	r3, [r5, #16]
 800af62:	b99b      	cbnz	r3, 800af8c <_vfiprintf_r+0x5c>
 800af64:	4629      	mov	r1, r5
 800af66:	4630      	mov	r0, r6
 800af68:	f7fd fa9c 	bl	80084a4 <__swsetup_r>
 800af6c:	b170      	cbz	r0, 800af8c <_vfiprintf_r+0x5c>
 800af6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af70:	07dc      	lsls	r4, r3, #31
 800af72:	d504      	bpl.n	800af7e <_vfiprintf_r+0x4e>
 800af74:	f04f 30ff 	mov.w	r0, #4294967295
 800af78:	b01d      	add	sp, #116	@ 0x74
 800af7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af7e:	89ab      	ldrh	r3, [r5, #12]
 800af80:	0598      	lsls	r0, r3, #22
 800af82:	d4f7      	bmi.n	800af74 <_vfiprintf_r+0x44>
 800af84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af86:	f7fd fbb7 	bl	80086f8 <__retarget_lock_release_recursive>
 800af8a:	e7f3      	b.n	800af74 <_vfiprintf_r+0x44>
 800af8c:	2300      	movs	r3, #0
 800af8e:	9309      	str	r3, [sp, #36]	@ 0x24
 800af90:	2320      	movs	r3, #32
 800af92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af96:	f8cd 800c 	str.w	r8, [sp, #12]
 800af9a:	2330      	movs	r3, #48	@ 0x30
 800af9c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b14c <_vfiprintf_r+0x21c>
 800afa0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800afa4:	f04f 0901 	mov.w	r9, #1
 800afa8:	4623      	mov	r3, r4
 800afaa:	469a      	mov	sl, r3
 800afac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afb0:	b10a      	cbz	r2, 800afb6 <_vfiprintf_r+0x86>
 800afb2:	2a25      	cmp	r2, #37	@ 0x25
 800afb4:	d1f9      	bne.n	800afaa <_vfiprintf_r+0x7a>
 800afb6:	ebba 0b04 	subs.w	fp, sl, r4
 800afba:	d00b      	beq.n	800afd4 <_vfiprintf_r+0xa4>
 800afbc:	465b      	mov	r3, fp
 800afbe:	4622      	mov	r2, r4
 800afc0:	4629      	mov	r1, r5
 800afc2:	4630      	mov	r0, r6
 800afc4:	f7ff ffa1 	bl	800af0a <__sfputs_r>
 800afc8:	3001      	adds	r0, #1
 800afca:	f000 80a7 	beq.w	800b11c <_vfiprintf_r+0x1ec>
 800afce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afd0:	445a      	add	r2, fp
 800afd2:	9209      	str	r2, [sp, #36]	@ 0x24
 800afd4:	f89a 3000 	ldrb.w	r3, [sl]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	f000 809f 	beq.w	800b11c <_vfiprintf_r+0x1ec>
 800afde:	2300      	movs	r3, #0
 800afe0:	f04f 32ff 	mov.w	r2, #4294967295
 800afe4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afe8:	f10a 0a01 	add.w	sl, sl, #1
 800afec:	9304      	str	r3, [sp, #16]
 800afee:	9307      	str	r3, [sp, #28]
 800aff0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aff4:	931a      	str	r3, [sp, #104]	@ 0x68
 800aff6:	4654      	mov	r4, sl
 800aff8:	2205      	movs	r2, #5
 800affa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800affe:	4853      	ldr	r0, [pc, #332]	@ (800b14c <_vfiprintf_r+0x21c>)
 800b000:	f7f5 f8e6 	bl	80001d0 <memchr>
 800b004:	9a04      	ldr	r2, [sp, #16]
 800b006:	b9d8      	cbnz	r0, 800b040 <_vfiprintf_r+0x110>
 800b008:	06d1      	lsls	r1, r2, #27
 800b00a:	bf44      	itt	mi
 800b00c:	2320      	movmi	r3, #32
 800b00e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b012:	0713      	lsls	r3, r2, #28
 800b014:	bf44      	itt	mi
 800b016:	232b      	movmi	r3, #43	@ 0x2b
 800b018:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b01c:	f89a 3000 	ldrb.w	r3, [sl]
 800b020:	2b2a      	cmp	r3, #42	@ 0x2a
 800b022:	d015      	beq.n	800b050 <_vfiprintf_r+0x120>
 800b024:	9a07      	ldr	r2, [sp, #28]
 800b026:	4654      	mov	r4, sl
 800b028:	2000      	movs	r0, #0
 800b02a:	f04f 0c0a 	mov.w	ip, #10
 800b02e:	4621      	mov	r1, r4
 800b030:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b034:	3b30      	subs	r3, #48	@ 0x30
 800b036:	2b09      	cmp	r3, #9
 800b038:	d94b      	bls.n	800b0d2 <_vfiprintf_r+0x1a2>
 800b03a:	b1b0      	cbz	r0, 800b06a <_vfiprintf_r+0x13a>
 800b03c:	9207      	str	r2, [sp, #28]
 800b03e:	e014      	b.n	800b06a <_vfiprintf_r+0x13a>
 800b040:	eba0 0308 	sub.w	r3, r0, r8
 800b044:	fa09 f303 	lsl.w	r3, r9, r3
 800b048:	4313      	orrs	r3, r2
 800b04a:	9304      	str	r3, [sp, #16]
 800b04c:	46a2      	mov	sl, r4
 800b04e:	e7d2      	b.n	800aff6 <_vfiprintf_r+0xc6>
 800b050:	9b03      	ldr	r3, [sp, #12]
 800b052:	1d19      	adds	r1, r3, #4
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	9103      	str	r1, [sp, #12]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	bfbb      	ittet	lt
 800b05c:	425b      	neglt	r3, r3
 800b05e:	f042 0202 	orrlt.w	r2, r2, #2
 800b062:	9307      	strge	r3, [sp, #28]
 800b064:	9307      	strlt	r3, [sp, #28]
 800b066:	bfb8      	it	lt
 800b068:	9204      	strlt	r2, [sp, #16]
 800b06a:	7823      	ldrb	r3, [r4, #0]
 800b06c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b06e:	d10a      	bne.n	800b086 <_vfiprintf_r+0x156>
 800b070:	7863      	ldrb	r3, [r4, #1]
 800b072:	2b2a      	cmp	r3, #42	@ 0x2a
 800b074:	d132      	bne.n	800b0dc <_vfiprintf_r+0x1ac>
 800b076:	9b03      	ldr	r3, [sp, #12]
 800b078:	1d1a      	adds	r2, r3, #4
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	9203      	str	r2, [sp, #12]
 800b07e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b082:	3402      	adds	r4, #2
 800b084:	9305      	str	r3, [sp, #20]
 800b086:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b15c <_vfiprintf_r+0x22c>
 800b08a:	7821      	ldrb	r1, [r4, #0]
 800b08c:	2203      	movs	r2, #3
 800b08e:	4650      	mov	r0, sl
 800b090:	f7f5 f89e 	bl	80001d0 <memchr>
 800b094:	b138      	cbz	r0, 800b0a6 <_vfiprintf_r+0x176>
 800b096:	9b04      	ldr	r3, [sp, #16]
 800b098:	eba0 000a 	sub.w	r0, r0, sl
 800b09c:	2240      	movs	r2, #64	@ 0x40
 800b09e:	4082      	lsls	r2, r0
 800b0a0:	4313      	orrs	r3, r2
 800b0a2:	3401      	adds	r4, #1
 800b0a4:	9304      	str	r3, [sp, #16]
 800b0a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0aa:	4829      	ldr	r0, [pc, #164]	@ (800b150 <_vfiprintf_r+0x220>)
 800b0ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b0b0:	2206      	movs	r2, #6
 800b0b2:	f7f5 f88d 	bl	80001d0 <memchr>
 800b0b6:	2800      	cmp	r0, #0
 800b0b8:	d03f      	beq.n	800b13a <_vfiprintf_r+0x20a>
 800b0ba:	4b26      	ldr	r3, [pc, #152]	@ (800b154 <_vfiprintf_r+0x224>)
 800b0bc:	bb1b      	cbnz	r3, 800b106 <_vfiprintf_r+0x1d6>
 800b0be:	9b03      	ldr	r3, [sp, #12]
 800b0c0:	3307      	adds	r3, #7
 800b0c2:	f023 0307 	bic.w	r3, r3, #7
 800b0c6:	3308      	adds	r3, #8
 800b0c8:	9303      	str	r3, [sp, #12]
 800b0ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0cc:	443b      	add	r3, r7
 800b0ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0d0:	e76a      	b.n	800afa8 <_vfiprintf_r+0x78>
 800b0d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0d6:	460c      	mov	r4, r1
 800b0d8:	2001      	movs	r0, #1
 800b0da:	e7a8      	b.n	800b02e <_vfiprintf_r+0xfe>
 800b0dc:	2300      	movs	r3, #0
 800b0de:	3401      	adds	r4, #1
 800b0e0:	9305      	str	r3, [sp, #20]
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	f04f 0c0a 	mov.w	ip, #10
 800b0e8:	4620      	mov	r0, r4
 800b0ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0ee:	3a30      	subs	r2, #48	@ 0x30
 800b0f0:	2a09      	cmp	r2, #9
 800b0f2:	d903      	bls.n	800b0fc <_vfiprintf_r+0x1cc>
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d0c6      	beq.n	800b086 <_vfiprintf_r+0x156>
 800b0f8:	9105      	str	r1, [sp, #20]
 800b0fa:	e7c4      	b.n	800b086 <_vfiprintf_r+0x156>
 800b0fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b100:	4604      	mov	r4, r0
 800b102:	2301      	movs	r3, #1
 800b104:	e7f0      	b.n	800b0e8 <_vfiprintf_r+0x1b8>
 800b106:	ab03      	add	r3, sp, #12
 800b108:	9300      	str	r3, [sp, #0]
 800b10a:	462a      	mov	r2, r5
 800b10c:	4b12      	ldr	r3, [pc, #72]	@ (800b158 <_vfiprintf_r+0x228>)
 800b10e:	a904      	add	r1, sp, #16
 800b110:	4630      	mov	r0, r6
 800b112:	f7fc fa27 	bl	8007564 <_printf_float>
 800b116:	4607      	mov	r7, r0
 800b118:	1c78      	adds	r0, r7, #1
 800b11a:	d1d6      	bne.n	800b0ca <_vfiprintf_r+0x19a>
 800b11c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b11e:	07d9      	lsls	r1, r3, #31
 800b120:	d405      	bmi.n	800b12e <_vfiprintf_r+0x1fe>
 800b122:	89ab      	ldrh	r3, [r5, #12]
 800b124:	059a      	lsls	r2, r3, #22
 800b126:	d402      	bmi.n	800b12e <_vfiprintf_r+0x1fe>
 800b128:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b12a:	f7fd fae5 	bl	80086f8 <__retarget_lock_release_recursive>
 800b12e:	89ab      	ldrh	r3, [r5, #12]
 800b130:	065b      	lsls	r3, r3, #25
 800b132:	f53f af1f 	bmi.w	800af74 <_vfiprintf_r+0x44>
 800b136:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b138:	e71e      	b.n	800af78 <_vfiprintf_r+0x48>
 800b13a:	ab03      	add	r3, sp, #12
 800b13c:	9300      	str	r3, [sp, #0]
 800b13e:	462a      	mov	r2, r5
 800b140:	4b05      	ldr	r3, [pc, #20]	@ (800b158 <_vfiprintf_r+0x228>)
 800b142:	a904      	add	r1, sp, #16
 800b144:	4630      	mov	r0, r6
 800b146:	f7fc fca5 	bl	8007a94 <_printf_i>
 800b14a:	e7e4      	b.n	800b116 <_vfiprintf_r+0x1e6>
 800b14c:	0800c149 	.word	0x0800c149
 800b150:	0800c153 	.word	0x0800c153
 800b154:	08007565 	.word	0x08007565
 800b158:	0800af0b 	.word	0x0800af0b
 800b15c:	0800c14f 	.word	0x0800c14f

0800b160 <__sflush_r>:
 800b160:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b168:	0716      	lsls	r6, r2, #28
 800b16a:	4605      	mov	r5, r0
 800b16c:	460c      	mov	r4, r1
 800b16e:	d454      	bmi.n	800b21a <__sflush_r+0xba>
 800b170:	684b      	ldr	r3, [r1, #4]
 800b172:	2b00      	cmp	r3, #0
 800b174:	dc02      	bgt.n	800b17c <__sflush_r+0x1c>
 800b176:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b178:	2b00      	cmp	r3, #0
 800b17a:	dd48      	ble.n	800b20e <__sflush_r+0xae>
 800b17c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b17e:	2e00      	cmp	r6, #0
 800b180:	d045      	beq.n	800b20e <__sflush_r+0xae>
 800b182:	2300      	movs	r3, #0
 800b184:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b188:	682f      	ldr	r7, [r5, #0]
 800b18a:	6a21      	ldr	r1, [r4, #32]
 800b18c:	602b      	str	r3, [r5, #0]
 800b18e:	d030      	beq.n	800b1f2 <__sflush_r+0x92>
 800b190:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b192:	89a3      	ldrh	r3, [r4, #12]
 800b194:	0759      	lsls	r1, r3, #29
 800b196:	d505      	bpl.n	800b1a4 <__sflush_r+0x44>
 800b198:	6863      	ldr	r3, [r4, #4]
 800b19a:	1ad2      	subs	r2, r2, r3
 800b19c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b19e:	b10b      	cbz	r3, 800b1a4 <__sflush_r+0x44>
 800b1a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b1a2:	1ad2      	subs	r2, r2, r3
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b1a8:	6a21      	ldr	r1, [r4, #32]
 800b1aa:	4628      	mov	r0, r5
 800b1ac:	47b0      	blx	r6
 800b1ae:	1c43      	adds	r3, r0, #1
 800b1b0:	89a3      	ldrh	r3, [r4, #12]
 800b1b2:	d106      	bne.n	800b1c2 <__sflush_r+0x62>
 800b1b4:	6829      	ldr	r1, [r5, #0]
 800b1b6:	291d      	cmp	r1, #29
 800b1b8:	d82b      	bhi.n	800b212 <__sflush_r+0xb2>
 800b1ba:	4a2a      	ldr	r2, [pc, #168]	@ (800b264 <__sflush_r+0x104>)
 800b1bc:	410a      	asrs	r2, r1
 800b1be:	07d6      	lsls	r6, r2, #31
 800b1c0:	d427      	bmi.n	800b212 <__sflush_r+0xb2>
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	6062      	str	r2, [r4, #4]
 800b1c6:	04d9      	lsls	r1, r3, #19
 800b1c8:	6922      	ldr	r2, [r4, #16]
 800b1ca:	6022      	str	r2, [r4, #0]
 800b1cc:	d504      	bpl.n	800b1d8 <__sflush_r+0x78>
 800b1ce:	1c42      	adds	r2, r0, #1
 800b1d0:	d101      	bne.n	800b1d6 <__sflush_r+0x76>
 800b1d2:	682b      	ldr	r3, [r5, #0]
 800b1d4:	b903      	cbnz	r3, 800b1d8 <__sflush_r+0x78>
 800b1d6:	6560      	str	r0, [r4, #84]	@ 0x54
 800b1d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b1da:	602f      	str	r7, [r5, #0]
 800b1dc:	b1b9      	cbz	r1, 800b20e <__sflush_r+0xae>
 800b1de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b1e2:	4299      	cmp	r1, r3
 800b1e4:	d002      	beq.n	800b1ec <__sflush_r+0x8c>
 800b1e6:	4628      	mov	r0, r5
 800b1e8:	f7fe f8ea 	bl	80093c0 <_free_r>
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	6363      	str	r3, [r4, #52]	@ 0x34
 800b1f0:	e00d      	b.n	800b20e <__sflush_r+0xae>
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	4628      	mov	r0, r5
 800b1f6:	47b0      	blx	r6
 800b1f8:	4602      	mov	r2, r0
 800b1fa:	1c50      	adds	r0, r2, #1
 800b1fc:	d1c9      	bne.n	800b192 <__sflush_r+0x32>
 800b1fe:	682b      	ldr	r3, [r5, #0]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d0c6      	beq.n	800b192 <__sflush_r+0x32>
 800b204:	2b1d      	cmp	r3, #29
 800b206:	d001      	beq.n	800b20c <__sflush_r+0xac>
 800b208:	2b16      	cmp	r3, #22
 800b20a:	d11e      	bne.n	800b24a <__sflush_r+0xea>
 800b20c:	602f      	str	r7, [r5, #0]
 800b20e:	2000      	movs	r0, #0
 800b210:	e022      	b.n	800b258 <__sflush_r+0xf8>
 800b212:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b216:	b21b      	sxth	r3, r3
 800b218:	e01b      	b.n	800b252 <__sflush_r+0xf2>
 800b21a:	690f      	ldr	r7, [r1, #16]
 800b21c:	2f00      	cmp	r7, #0
 800b21e:	d0f6      	beq.n	800b20e <__sflush_r+0xae>
 800b220:	0793      	lsls	r3, r2, #30
 800b222:	680e      	ldr	r6, [r1, #0]
 800b224:	bf08      	it	eq
 800b226:	694b      	ldreq	r3, [r1, #20]
 800b228:	600f      	str	r7, [r1, #0]
 800b22a:	bf18      	it	ne
 800b22c:	2300      	movne	r3, #0
 800b22e:	eba6 0807 	sub.w	r8, r6, r7
 800b232:	608b      	str	r3, [r1, #8]
 800b234:	f1b8 0f00 	cmp.w	r8, #0
 800b238:	dde9      	ble.n	800b20e <__sflush_r+0xae>
 800b23a:	6a21      	ldr	r1, [r4, #32]
 800b23c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b23e:	4643      	mov	r3, r8
 800b240:	463a      	mov	r2, r7
 800b242:	4628      	mov	r0, r5
 800b244:	47b0      	blx	r6
 800b246:	2800      	cmp	r0, #0
 800b248:	dc08      	bgt.n	800b25c <__sflush_r+0xfc>
 800b24a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b24e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b252:	81a3      	strh	r3, [r4, #12]
 800b254:	f04f 30ff 	mov.w	r0, #4294967295
 800b258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b25c:	4407      	add	r7, r0
 800b25e:	eba8 0800 	sub.w	r8, r8, r0
 800b262:	e7e7      	b.n	800b234 <__sflush_r+0xd4>
 800b264:	dfbffffe 	.word	0xdfbffffe

0800b268 <_fflush_r>:
 800b268:	b538      	push	{r3, r4, r5, lr}
 800b26a:	690b      	ldr	r3, [r1, #16]
 800b26c:	4605      	mov	r5, r0
 800b26e:	460c      	mov	r4, r1
 800b270:	b913      	cbnz	r3, 800b278 <_fflush_r+0x10>
 800b272:	2500      	movs	r5, #0
 800b274:	4628      	mov	r0, r5
 800b276:	bd38      	pop	{r3, r4, r5, pc}
 800b278:	b118      	cbz	r0, 800b282 <_fflush_r+0x1a>
 800b27a:	6a03      	ldr	r3, [r0, #32]
 800b27c:	b90b      	cbnz	r3, 800b282 <_fflush_r+0x1a>
 800b27e:	f7fc ffc9 	bl	8008214 <__sinit>
 800b282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d0f3      	beq.n	800b272 <_fflush_r+0xa>
 800b28a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b28c:	07d0      	lsls	r0, r2, #31
 800b28e:	d404      	bmi.n	800b29a <_fflush_r+0x32>
 800b290:	0599      	lsls	r1, r3, #22
 800b292:	d402      	bmi.n	800b29a <_fflush_r+0x32>
 800b294:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b296:	f7fd fa2e 	bl	80086f6 <__retarget_lock_acquire_recursive>
 800b29a:	4628      	mov	r0, r5
 800b29c:	4621      	mov	r1, r4
 800b29e:	f7ff ff5f 	bl	800b160 <__sflush_r>
 800b2a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b2a4:	07da      	lsls	r2, r3, #31
 800b2a6:	4605      	mov	r5, r0
 800b2a8:	d4e4      	bmi.n	800b274 <_fflush_r+0xc>
 800b2aa:	89a3      	ldrh	r3, [r4, #12]
 800b2ac:	059b      	lsls	r3, r3, #22
 800b2ae:	d4e1      	bmi.n	800b274 <_fflush_r+0xc>
 800b2b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b2b2:	f7fd fa21 	bl	80086f8 <__retarget_lock_release_recursive>
 800b2b6:	e7dd      	b.n	800b274 <_fflush_r+0xc>

0800b2b8 <__swhatbuf_r>:
 800b2b8:	b570      	push	{r4, r5, r6, lr}
 800b2ba:	460c      	mov	r4, r1
 800b2bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2c0:	2900      	cmp	r1, #0
 800b2c2:	b096      	sub	sp, #88	@ 0x58
 800b2c4:	4615      	mov	r5, r2
 800b2c6:	461e      	mov	r6, r3
 800b2c8:	da0d      	bge.n	800b2e6 <__swhatbuf_r+0x2e>
 800b2ca:	89a3      	ldrh	r3, [r4, #12]
 800b2cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b2d0:	f04f 0100 	mov.w	r1, #0
 800b2d4:	bf14      	ite	ne
 800b2d6:	2340      	movne	r3, #64	@ 0x40
 800b2d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b2dc:	2000      	movs	r0, #0
 800b2de:	6031      	str	r1, [r6, #0]
 800b2e0:	602b      	str	r3, [r5, #0]
 800b2e2:	b016      	add	sp, #88	@ 0x58
 800b2e4:	bd70      	pop	{r4, r5, r6, pc}
 800b2e6:	466a      	mov	r2, sp
 800b2e8:	f000 f874 	bl	800b3d4 <_fstat_r>
 800b2ec:	2800      	cmp	r0, #0
 800b2ee:	dbec      	blt.n	800b2ca <__swhatbuf_r+0x12>
 800b2f0:	9901      	ldr	r1, [sp, #4]
 800b2f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b2f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b2fa:	4259      	negs	r1, r3
 800b2fc:	4159      	adcs	r1, r3
 800b2fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b302:	e7eb      	b.n	800b2dc <__swhatbuf_r+0x24>

0800b304 <__smakebuf_r>:
 800b304:	898b      	ldrh	r3, [r1, #12]
 800b306:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b308:	079d      	lsls	r5, r3, #30
 800b30a:	4606      	mov	r6, r0
 800b30c:	460c      	mov	r4, r1
 800b30e:	d507      	bpl.n	800b320 <__smakebuf_r+0x1c>
 800b310:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b314:	6023      	str	r3, [r4, #0]
 800b316:	6123      	str	r3, [r4, #16]
 800b318:	2301      	movs	r3, #1
 800b31a:	6163      	str	r3, [r4, #20]
 800b31c:	b003      	add	sp, #12
 800b31e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b320:	ab01      	add	r3, sp, #4
 800b322:	466a      	mov	r2, sp
 800b324:	f7ff ffc8 	bl	800b2b8 <__swhatbuf_r>
 800b328:	9f00      	ldr	r7, [sp, #0]
 800b32a:	4605      	mov	r5, r0
 800b32c:	4639      	mov	r1, r7
 800b32e:	4630      	mov	r0, r6
 800b330:	f7fe f8ba 	bl	80094a8 <_malloc_r>
 800b334:	b948      	cbnz	r0, 800b34a <__smakebuf_r+0x46>
 800b336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b33a:	059a      	lsls	r2, r3, #22
 800b33c:	d4ee      	bmi.n	800b31c <__smakebuf_r+0x18>
 800b33e:	f023 0303 	bic.w	r3, r3, #3
 800b342:	f043 0302 	orr.w	r3, r3, #2
 800b346:	81a3      	strh	r3, [r4, #12]
 800b348:	e7e2      	b.n	800b310 <__smakebuf_r+0xc>
 800b34a:	89a3      	ldrh	r3, [r4, #12]
 800b34c:	6020      	str	r0, [r4, #0]
 800b34e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b352:	81a3      	strh	r3, [r4, #12]
 800b354:	9b01      	ldr	r3, [sp, #4]
 800b356:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b35a:	b15b      	cbz	r3, 800b374 <__smakebuf_r+0x70>
 800b35c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b360:	4630      	mov	r0, r6
 800b362:	f000 f849 	bl	800b3f8 <_isatty_r>
 800b366:	b128      	cbz	r0, 800b374 <__smakebuf_r+0x70>
 800b368:	89a3      	ldrh	r3, [r4, #12]
 800b36a:	f023 0303 	bic.w	r3, r3, #3
 800b36e:	f043 0301 	orr.w	r3, r3, #1
 800b372:	81a3      	strh	r3, [r4, #12]
 800b374:	89a3      	ldrh	r3, [r4, #12]
 800b376:	431d      	orrs	r5, r3
 800b378:	81a5      	strh	r5, [r4, #12]
 800b37a:	e7cf      	b.n	800b31c <__smakebuf_r+0x18>

0800b37c <memmove>:
 800b37c:	4288      	cmp	r0, r1
 800b37e:	b510      	push	{r4, lr}
 800b380:	eb01 0402 	add.w	r4, r1, r2
 800b384:	d902      	bls.n	800b38c <memmove+0x10>
 800b386:	4284      	cmp	r4, r0
 800b388:	4623      	mov	r3, r4
 800b38a:	d807      	bhi.n	800b39c <memmove+0x20>
 800b38c:	1e43      	subs	r3, r0, #1
 800b38e:	42a1      	cmp	r1, r4
 800b390:	d008      	beq.n	800b3a4 <memmove+0x28>
 800b392:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b396:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b39a:	e7f8      	b.n	800b38e <memmove+0x12>
 800b39c:	4402      	add	r2, r0
 800b39e:	4601      	mov	r1, r0
 800b3a0:	428a      	cmp	r2, r1
 800b3a2:	d100      	bne.n	800b3a6 <memmove+0x2a>
 800b3a4:	bd10      	pop	{r4, pc}
 800b3a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b3aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b3ae:	e7f7      	b.n	800b3a0 <memmove+0x24>

0800b3b0 <strncmp>:
 800b3b0:	b510      	push	{r4, lr}
 800b3b2:	b16a      	cbz	r2, 800b3d0 <strncmp+0x20>
 800b3b4:	3901      	subs	r1, #1
 800b3b6:	1884      	adds	r4, r0, r2
 800b3b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3bc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d103      	bne.n	800b3cc <strncmp+0x1c>
 800b3c4:	42a0      	cmp	r0, r4
 800b3c6:	d001      	beq.n	800b3cc <strncmp+0x1c>
 800b3c8:	2a00      	cmp	r2, #0
 800b3ca:	d1f5      	bne.n	800b3b8 <strncmp+0x8>
 800b3cc:	1ad0      	subs	r0, r2, r3
 800b3ce:	bd10      	pop	{r4, pc}
 800b3d0:	4610      	mov	r0, r2
 800b3d2:	e7fc      	b.n	800b3ce <strncmp+0x1e>

0800b3d4 <_fstat_r>:
 800b3d4:	b538      	push	{r3, r4, r5, lr}
 800b3d6:	4d07      	ldr	r5, [pc, #28]	@ (800b3f4 <_fstat_r+0x20>)
 800b3d8:	2300      	movs	r3, #0
 800b3da:	4604      	mov	r4, r0
 800b3dc:	4608      	mov	r0, r1
 800b3de:	4611      	mov	r1, r2
 800b3e0:	602b      	str	r3, [r5, #0]
 800b3e2:	f7f6 fb73 	bl	8001acc <_fstat>
 800b3e6:	1c43      	adds	r3, r0, #1
 800b3e8:	d102      	bne.n	800b3f0 <_fstat_r+0x1c>
 800b3ea:	682b      	ldr	r3, [r5, #0]
 800b3ec:	b103      	cbz	r3, 800b3f0 <_fstat_r+0x1c>
 800b3ee:	6023      	str	r3, [r4, #0]
 800b3f0:	bd38      	pop	{r3, r4, r5, pc}
 800b3f2:	bf00      	nop
 800b3f4:	200048e8 	.word	0x200048e8

0800b3f8 <_isatty_r>:
 800b3f8:	b538      	push	{r3, r4, r5, lr}
 800b3fa:	4d06      	ldr	r5, [pc, #24]	@ (800b414 <_isatty_r+0x1c>)
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	4604      	mov	r4, r0
 800b400:	4608      	mov	r0, r1
 800b402:	602b      	str	r3, [r5, #0]
 800b404:	f7f6 fb72 	bl	8001aec <_isatty>
 800b408:	1c43      	adds	r3, r0, #1
 800b40a:	d102      	bne.n	800b412 <_isatty_r+0x1a>
 800b40c:	682b      	ldr	r3, [r5, #0]
 800b40e:	b103      	cbz	r3, 800b412 <_isatty_r+0x1a>
 800b410:	6023      	str	r3, [r4, #0]
 800b412:	bd38      	pop	{r3, r4, r5, pc}
 800b414:	200048e8 	.word	0x200048e8

0800b418 <_sbrk_r>:
 800b418:	b538      	push	{r3, r4, r5, lr}
 800b41a:	4d06      	ldr	r5, [pc, #24]	@ (800b434 <_sbrk_r+0x1c>)
 800b41c:	2300      	movs	r3, #0
 800b41e:	4604      	mov	r4, r0
 800b420:	4608      	mov	r0, r1
 800b422:	602b      	str	r3, [r5, #0]
 800b424:	f7f6 fb7a 	bl	8001b1c <_sbrk>
 800b428:	1c43      	adds	r3, r0, #1
 800b42a:	d102      	bne.n	800b432 <_sbrk_r+0x1a>
 800b42c:	682b      	ldr	r3, [r5, #0]
 800b42e:	b103      	cbz	r3, 800b432 <_sbrk_r+0x1a>
 800b430:	6023      	str	r3, [r4, #0]
 800b432:	bd38      	pop	{r3, r4, r5, pc}
 800b434:	200048e8 	.word	0x200048e8

0800b438 <nan>:
 800b438:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b440 <nan+0x8>
 800b43c:	4770      	bx	lr
 800b43e:	bf00      	nop
 800b440:	00000000 	.word	0x00000000
 800b444:	7ff80000 	.word	0x7ff80000

0800b448 <__assert_func>:
 800b448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b44a:	4614      	mov	r4, r2
 800b44c:	461a      	mov	r2, r3
 800b44e:	4b09      	ldr	r3, [pc, #36]	@ (800b474 <__assert_func+0x2c>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	4605      	mov	r5, r0
 800b454:	68d8      	ldr	r0, [r3, #12]
 800b456:	b954      	cbnz	r4, 800b46e <__assert_func+0x26>
 800b458:	4b07      	ldr	r3, [pc, #28]	@ (800b478 <__assert_func+0x30>)
 800b45a:	461c      	mov	r4, r3
 800b45c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b460:	9100      	str	r1, [sp, #0]
 800b462:	462b      	mov	r3, r5
 800b464:	4905      	ldr	r1, [pc, #20]	@ (800b47c <__assert_func+0x34>)
 800b466:	f000 fba7 	bl	800bbb8 <fiprintf>
 800b46a:	f000 fbb7 	bl	800bbdc <abort>
 800b46e:	4b04      	ldr	r3, [pc, #16]	@ (800b480 <__assert_func+0x38>)
 800b470:	e7f4      	b.n	800b45c <__assert_func+0x14>
 800b472:	bf00      	nop
 800b474:	2000001c 	.word	0x2000001c
 800b478:	0800c19d 	.word	0x0800c19d
 800b47c:	0800c16f 	.word	0x0800c16f
 800b480:	0800c162 	.word	0x0800c162

0800b484 <_calloc_r>:
 800b484:	b570      	push	{r4, r5, r6, lr}
 800b486:	fba1 5402 	umull	r5, r4, r1, r2
 800b48a:	b93c      	cbnz	r4, 800b49c <_calloc_r+0x18>
 800b48c:	4629      	mov	r1, r5
 800b48e:	f7fe f80b 	bl	80094a8 <_malloc_r>
 800b492:	4606      	mov	r6, r0
 800b494:	b928      	cbnz	r0, 800b4a2 <_calloc_r+0x1e>
 800b496:	2600      	movs	r6, #0
 800b498:	4630      	mov	r0, r6
 800b49a:	bd70      	pop	{r4, r5, r6, pc}
 800b49c:	220c      	movs	r2, #12
 800b49e:	6002      	str	r2, [r0, #0]
 800b4a0:	e7f9      	b.n	800b496 <_calloc_r+0x12>
 800b4a2:	462a      	mov	r2, r5
 800b4a4:	4621      	mov	r1, r4
 800b4a6:	f7fd f853 	bl	8008550 <memset>
 800b4aa:	e7f5      	b.n	800b498 <_calloc_r+0x14>

0800b4ac <rshift>:
 800b4ac:	6903      	ldr	r3, [r0, #16]
 800b4ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b4b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b4b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b4ba:	f100 0414 	add.w	r4, r0, #20
 800b4be:	dd45      	ble.n	800b54c <rshift+0xa0>
 800b4c0:	f011 011f 	ands.w	r1, r1, #31
 800b4c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b4c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b4cc:	d10c      	bne.n	800b4e8 <rshift+0x3c>
 800b4ce:	f100 0710 	add.w	r7, r0, #16
 800b4d2:	4629      	mov	r1, r5
 800b4d4:	42b1      	cmp	r1, r6
 800b4d6:	d334      	bcc.n	800b542 <rshift+0x96>
 800b4d8:	1a9b      	subs	r3, r3, r2
 800b4da:	009b      	lsls	r3, r3, #2
 800b4dc:	1eea      	subs	r2, r5, #3
 800b4de:	4296      	cmp	r6, r2
 800b4e0:	bf38      	it	cc
 800b4e2:	2300      	movcc	r3, #0
 800b4e4:	4423      	add	r3, r4
 800b4e6:	e015      	b.n	800b514 <rshift+0x68>
 800b4e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b4ec:	f1c1 0820 	rsb	r8, r1, #32
 800b4f0:	40cf      	lsrs	r7, r1
 800b4f2:	f105 0e04 	add.w	lr, r5, #4
 800b4f6:	46a1      	mov	r9, r4
 800b4f8:	4576      	cmp	r6, lr
 800b4fa:	46f4      	mov	ip, lr
 800b4fc:	d815      	bhi.n	800b52a <rshift+0x7e>
 800b4fe:	1a9a      	subs	r2, r3, r2
 800b500:	0092      	lsls	r2, r2, #2
 800b502:	3a04      	subs	r2, #4
 800b504:	3501      	adds	r5, #1
 800b506:	42ae      	cmp	r6, r5
 800b508:	bf38      	it	cc
 800b50a:	2200      	movcc	r2, #0
 800b50c:	18a3      	adds	r3, r4, r2
 800b50e:	50a7      	str	r7, [r4, r2]
 800b510:	b107      	cbz	r7, 800b514 <rshift+0x68>
 800b512:	3304      	adds	r3, #4
 800b514:	1b1a      	subs	r2, r3, r4
 800b516:	42a3      	cmp	r3, r4
 800b518:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b51c:	bf08      	it	eq
 800b51e:	2300      	moveq	r3, #0
 800b520:	6102      	str	r2, [r0, #16]
 800b522:	bf08      	it	eq
 800b524:	6143      	streq	r3, [r0, #20]
 800b526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b52a:	f8dc c000 	ldr.w	ip, [ip]
 800b52e:	fa0c fc08 	lsl.w	ip, ip, r8
 800b532:	ea4c 0707 	orr.w	r7, ip, r7
 800b536:	f849 7b04 	str.w	r7, [r9], #4
 800b53a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b53e:	40cf      	lsrs	r7, r1
 800b540:	e7da      	b.n	800b4f8 <rshift+0x4c>
 800b542:	f851 cb04 	ldr.w	ip, [r1], #4
 800b546:	f847 cf04 	str.w	ip, [r7, #4]!
 800b54a:	e7c3      	b.n	800b4d4 <rshift+0x28>
 800b54c:	4623      	mov	r3, r4
 800b54e:	e7e1      	b.n	800b514 <rshift+0x68>

0800b550 <__hexdig_fun>:
 800b550:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b554:	2b09      	cmp	r3, #9
 800b556:	d802      	bhi.n	800b55e <__hexdig_fun+0xe>
 800b558:	3820      	subs	r0, #32
 800b55a:	b2c0      	uxtb	r0, r0
 800b55c:	4770      	bx	lr
 800b55e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b562:	2b05      	cmp	r3, #5
 800b564:	d801      	bhi.n	800b56a <__hexdig_fun+0x1a>
 800b566:	3847      	subs	r0, #71	@ 0x47
 800b568:	e7f7      	b.n	800b55a <__hexdig_fun+0xa>
 800b56a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b56e:	2b05      	cmp	r3, #5
 800b570:	d801      	bhi.n	800b576 <__hexdig_fun+0x26>
 800b572:	3827      	subs	r0, #39	@ 0x27
 800b574:	e7f1      	b.n	800b55a <__hexdig_fun+0xa>
 800b576:	2000      	movs	r0, #0
 800b578:	4770      	bx	lr
	...

0800b57c <__gethex>:
 800b57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b580:	b085      	sub	sp, #20
 800b582:	468a      	mov	sl, r1
 800b584:	9302      	str	r3, [sp, #8]
 800b586:	680b      	ldr	r3, [r1, #0]
 800b588:	9001      	str	r0, [sp, #4]
 800b58a:	4690      	mov	r8, r2
 800b58c:	1c9c      	adds	r4, r3, #2
 800b58e:	46a1      	mov	r9, r4
 800b590:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b594:	2830      	cmp	r0, #48	@ 0x30
 800b596:	d0fa      	beq.n	800b58e <__gethex+0x12>
 800b598:	eba9 0303 	sub.w	r3, r9, r3
 800b59c:	f1a3 0b02 	sub.w	fp, r3, #2
 800b5a0:	f7ff ffd6 	bl	800b550 <__hexdig_fun>
 800b5a4:	4605      	mov	r5, r0
 800b5a6:	2800      	cmp	r0, #0
 800b5a8:	d168      	bne.n	800b67c <__gethex+0x100>
 800b5aa:	49a0      	ldr	r1, [pc, #640]	@ (800b82c <__gethex+0x2b0>)
 800b5ac:	2201      	movs	r2, #1
 800b5ae:	4648      	mov	r0, r9
 800b5b0:	f7ff fefe 	bl	800b3b0 <strncmp>
 800b5b4:	4607      	mov	r7, r0
 800b5b6:	2800      	cmp	r0, #0
 800b5b8:	d167      	bne.n	800b68a <__gethex+0x10e>
 800b5ba:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b5be:	4626      	mov	r6, r4
 800b5c0:	f7ff ffc6 	bl	800b550 <__hexdig_fun>
 800b5c4:	2800      	cmp	r0, #0
 800b5c6:	d062      	beq.n	800b68e <__gethex+0x112>
 800b5c8:	4623      	mov	r3, r4
 800b5ca:	7818      	ldrb	r0, [r3, #0]
 800b5cc:	2830      	cmp	r0, #48	@ 0x30
 800b5ce:	4699      	mov	r9, r3
 800b5d0:	f103 0301 	add.w	r3, r3, #1
 800b5d4:	d0f9      	beq.n	800b5ca <__gethex+0x4e>
 800b5d6:	f7ff ffbb 	bl	800b550 <__hexdig_fun>
 800b5da:	fab0 f580 	clz	r5, r0
 800b5de:	096d      	lsrs	r5, r5, #5
 800b5e0:	f04f 0b01 	mov.w	fp, #1
 800b5e4:	464a      	mov	r2, r9
 800b5e6:	4616      	mov	r6, r2
 800b5e8:	3201      	adds	r2, #1
 800b5ea:	7830      	ldrb	r0, [r6, #0]
 800b5ec:	f7ff ffb0 	bl	800b550 <__hexdig_fun>
 800b5f0:	2800      	cmp	r0, #0
 800b5f2:	d1f8      	bne.n	800b5e6 <__gethex+0x6a>
 800b5f4:	498d      	ldr	r1, [pc, #564]	@ (800b82c <__gethex+0x2b0>)
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	4630      	mov	r0, r6
 800b5fa:	f7ff fed9 	bl	800b3b0 <strncmp>
 800b5fe:	2800      	cmp	r0, #0
 800b600:	d13f      	bne.n	800b682 <__gethex+0x106>
 800b602:	b944      	cbnz	r4, 800b616 <__gethex+0x9a>
 800b604:	1c74      	adds	r4, r6, #1
 800b606:	4622      	mov	r2, r4
 800b608:	4616      	mov	r6, r2
 800b60a:	3201      	adds	r2, #1
 800b60c:	7830      	ldrb	r0, [r6, #0]
 800b60e:	f7ff ff9f 	bl	800b550 <__hexdig_fun>
 800b612:	2800      	cmp	r0, #0
 800b614:	d1f8      	bne.n	800b608 <__gethex+0x8c>
 800b616:	1ba4      	subs	r4, r4, r6
 800b618:	00a7      	lsls	r7, r4, #2
 800b61a:	7833      	ldrb	r3, [r6, #0]
 800b61c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b620:	2b50      	cmp	r3, #80	@ 0x50
 800b622:	d13e      	bne.n	800b6a2 <__gethex+0x126>
 800b624:	7873      	ldrb	r3, [r6, #1]
 800b626:	2b2b      	cmp	r3, #43	@ 0x2b
 800b628:	d033      	beq.n	800b692 <__gethex+0x116>
 800b62a:	2b2d      	cmp	r3, #45	@ 0x2d
 800b62c:	d034      	beq.n	800b698 <__gethex+0x11c>
 800b62e:	1c71      	adds	r1, r6, #1
 800b630:	2400      	movs	r4, #0
 800b632:	7808      	ldrb	r0, [r1, #0]
 800b634:	f7ff ff8c 	bl	800b550 <__hexdig_fun>
 800b638:	1e43      	subs	r3, r0, #1
 800b63a:	b2db      	uxtb	r3, r3
 800b63c:	2b18      	cmp	r3, #24
 800b63e:	d830      	bhi.n	800b6a2 <__gethex+0x126>
 800b640:	f1a0 0210 	sub.w	r2, r0, #16
 800b644:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b648:	f7ff ff82 	bl	800b550 <__hexdig_fun>
 800b64c:	f100 3cff 	add.w	ip, r0, #4294967295
 800b650:	fa5f fc8c 	uxtb.w	ip, ip
 800b654:	f1bc 0f18 	cmp.w	ip, #24
 800b658:	f04f 030a 	mov.w	r3, #10
 800b65c:	d91e      	bls.n	800b69c <__gethex+0x120>
 800b65e:	b104      	cbz	r4, 800b662 <__gethex+0xe6>
 800b660:	4252      	negs	r2, r2
 800b662:	4417      	add	r7, r2
 800b664:	f8ca 1000 	str.w	r1, [sl]
 800b668:	b1ed      	cbz	r5, 800b6a6 <__gethex+0x12a>
 800b66a:	f1bb 0f00 	cmp.w	fp, #0
 800b66e:	bf0c      	ite	eq
 800b670:	2506      	moveq	r5, #6
 800b672:	2500      	movne	r5, #0
 800b674:	4628      	mov	r0, r5
 800b676:	b005      	add	sp, #20
 800b678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b67c:	2500      	movs	r5, #0
 800b67e:	462c      	mov	r4, r5
 800b680:	e7b0      	b.n	800b5e4 <__gethex+0x68>
 800b682:	2c00      	cmp	r4, #0
 800b684:	d1c7      	bne.n	800b616 <__gethex+0x9a>
 800b686:	4627      	mov	r7, r4
 800b688:	e7c7      	b.n	800b61a <__gethex+0x9e>
 800b68a:	464e      	mov	r6, r9
 800b68c:	462f      	mov	r7, r5
 800b68e:	2501      	movs	r5, #1
 800b690:	e7c3      	b.n	800b61a <__gethex+0x9e>
 800b692:	2400      	movs	r4, #0
 800b694:	1cb1      	adds	r1, r6, #2
 800b696:	e7cc      	b.n	800b632 <__gethex+0xb6>
 800b698:	2401      	movs	r4, #1
 800b69a:	e7fb      	b.n	800b694 <__gethex+0x118>
 800b69c:	fb03 0002 	mla	r0, r3, r2, r0
 800b6a0:	e7ce      	b.n	800b640 <__gethex+0xc4>
 800b6a2:	4631      	mov	r1, r6
 800b6a4:	e7de      	b.n	800b664 <__gethex+0xe8>
 800b6a6:	eba6 0309 	sub.w	r3, r6, r9
 800b6aa:	3b01      	subs	r3, #1
 800b6ac:	4629      	mov	r1, r5
 800b6ae:	2b07      	cmp	r3, #7
 800b6b0:	dc0a      	bgt.n	800b6c8 <__gethex+0x14c>
 800b6b2:	9801      	ldr	r0, [sp, #4]
 800b6b4:	f7fd ff84 	bl	80095c0 <_Balloc>
 800b6b8:	4604      	mov	r4, r0
 800b6ba:	b940      	cbnz	r0, 800b6ce <__gethex+0x152>
 800b6bc:	4b5c      	ldr	r3, [pc, #368]	@ (800b830 <__gethex+0x2b4>)
 800b6be:	4602      	mov	r2, r0
 800b6c0:	21e4      	movs	r1, #228	@ 0xe4
 800b6c2:	485c      	ldr	r0, [pc, #368]	@ (800b834 <__gethex+0x2b8>)
 800b6c4:	f7ff fec0 	bl	800b448 <__assert_func>
 800b6c8:	3101      	adds	r1, #1
 800b6ca:	105b      	asrs	r3, r3, #1
 800b6cc:	e7ef      	b.n	800b6ae <__gethex+0x132>
 800b6ce:	f100 0a14 	add.w	sl, r0, #20
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	4655      	mov	r5, sl
 800b6d6:	469b      	mov	fp, r3
 800b6d8:	45b1      	cmp	r9, r6
 800b6da:	d337      	bcc.n	800b74c <__gethex+0x1d0>
 800b6dc:	f845 bb04 	str.w	fp, [r5], #4
 800b6e0:	eba5 050a 	sub.w	r5, r5, sl
 800b6e4:	10ad      	asrs	r5, r5, #2
 800b6e6:	6125      	str	r5, [r4, #16]
 800b6e8:	4658      	mov	r0, fp
 800b6ea:	f7fe f85b 	bl	80097a4 <__hi0bits>
 800b6ee:	016d      	lsls	r5, r5, #5
 800b6f0:	f8d8 6000 	ldr.w	r6, [r8]
 800b6f4:	1a2d      	subs	r5, r5, r0
 800b6f6:	42b5      	cmp	r5, r6
 800b6f8:	dd54      	ble.n	800b7a4 <__gethex+0x228>
 800b6fa:	1bad      	subs	r5, r5, r6
 800b6fc:	4629      	mov	r1, r5
 800b6fe:	4620      	mov	r0, r4
 800b700:	f7fe fbef 	bl	8009ee2 <__any_on>
 800b704:	4681      	mov	r9, r0
 800b706:	b178      	cbz	r0, 800b728 <__gethex+0x1ac>
 800b708:	1e6b      	subs	r3, r5, #1
 800b70a:	1159      	asrs	r1, r3, #5
 800b70c:	f003 021f 	and.w	r2, r3, #31
 800b710:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b714:	f04f 0901 	mov.w	r9, #1
 800b718:	fa09 f202 	lsl.w	r2, r9, r2
 800b71c:	420a      	tst	r2, r1
 800b71e:	d003      	beq.n	800b728 <__gethex+0x1ac>
 800b720:	454b      	cmp	r3, r9
 800b722:	dc36      	bgt.n	800b792 <__gethex+0x216>
 800b724:	f04f 0902 	mov.w	r9, #2
 800b728:	4629      	mov	r1, r5
 800b72a:	4620      	mov	r0, r4
 800b72c:	f7ff febe 	bl	800b4ac <rshift>
 800b730:	442f      	add	r7, r5
 800b732:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b736:	42bb      	cmp	r3, r7
 800b738:	da42      	bge.n	800b7c0 <__gethex+0x244>
 800b73a:	9801      	ldr	r0, [sp, #4]
 800b73c:	4621      	mov	r1, r4
 800b73e:	f7fd ff7f 	bl	8009640 <_Bfree>
 800b742:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b744:	2300      	movs	r3, #0
 800b746:	6013      	str	r3, [r2, #0]
 800b748:	25a3      	movs	r5, #163	@ 0xa3
 800b74a:	e793      	b.n	800b674 <__gethex+0xf8>
 800b74c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b750:	2a2e      	cmp	r2, #46	@ 0x2e
 800b752:	d012      	beq.n	800b77a <__gethex+0x1fe>
 800b754:	2b20      	cmp	r3, #32
 800b756:	d104      	bne.n	800b762 <__gethex+0x1e6>
 800b758:	f845 bb04 	str.w	fp, [r5], #4
 800b75c:	f04f 0b00 	mov.w	fp, #0
 800b760:	465b      	mov	r3, fp
 800b762:	7830      	ldrb	r0, [r6, #0]
 800b764:	9303      	str	r3, [sp, #12]
 800b766:	f7ff fef3 	bl	800b550 <__hexdig_fun>
 800b76a:	9b03      	ldr	r3, [sp, #12]
 800b76c:	f000 000f 	and.w	r0, r0, #15
 800b770:	4098      	lsls	r0, r3
 800b772:	ea4b 0b00 	orr.w	fp, fp, r0
 800b776:	3304      	adds	r3, #4
 800b778:	e7ae      	b.n	800b6d8 <__gethex+0x15c>
 800b77a:	45b1      	cmp	r9, r6
 800b77c:	d8ea      	bhi.n	800b754 <__gethex+0x1d8>
 800b77e:	492b      	ldr	r1, [pc, #172]	@ (800b82c <__gethex+0x2b0>)
 800b780:	9303      	str	r3, [sp, #12]
 800b782:	2201      	movs	r2, #1
 800b784:	4630      	mov	r0, r6
 800b786:	f7ff fe13 	bl	800b3b0 <strncmp>
 800b78a:	9b03      	ldr	r3, [sp, #12]
 800b78c:	2800      	cmp	r0, #0
 800b78e:	d1e1      	bne.n	800b754 <__gethex+0x1d8>
 800b790:	e7a2      	b.n	800b6d8 <__gethex+0x15c>
 800b792:	1ea9      	subs	r1, r5, #2
 800b794:	4620      	mov	r0, r4
 800b796:	f7fe fba4 	bl	8009ee2 <__any_on>
 800b79a:	2800      	cmp	r0, #0
 800b79c:	d0c2      	beq.n	800b724 <__gethex+0x1a8>
 800b79e:	f04f 0903 	mov.w	r9, #3
 800b7a2:	e7c1      	b.n	800b728 <__gethex+0x1ac>
 800b7a4:	da09      	bge.n	800b7ba <__gethex+0x23e>
 800b7a6:	1b75      	subs	r5, r6, r5
 800b7a8:	4621      	mov	r1, r4
 800b7aa:	9801      	ldr	r0, [sp, #4]
 800b7ac:	462a      	mov	r2, r5
 800b7ae:	f7fe f95f 	bl	8009a70 <__lshift>
 800b7b2:	1b7f      	subs	r7, r7, r5
 800b7b4:	4604      	mov	r4, r0
 800b7b6:	f100 0a14 	add.w	sl, r0, #20
 800b7ba:	f04f 0900 	mov.w	r9, #0
 800b7be:	e7b8      	b.n	800b732 <__gethex+0x1b6>
 800b7c0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b7c4:	42bd      	cmp	r5, r7
 800b7c6:	dd6f      	ble.n	800b8a8 <__gethex+0x32c>
 800b7c8:	1bed      	subs	r5, r5, r7
 800b7ca:	42ae      	cmp	r6, r5
 800b7cc:	dc34      	bgt.n	800b838 <__gethex+0x2bc>
 800b7ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b7d2:	2b02      	cmp	r3, #2
 800b7d4:	d022      	beq.n	800b81c <__gethex+0x2a0>
 800b7d6:	2b03      	cmp	r3, #3
 800b7d8:	d024      	beq.n	800b824 <__gethex+0x2a8>
 800b7da:	2b01      	cmp	r3, #1
 800b7dc:	d115      	bne.n	800b80a <__gethex+0x28e>
 800b7de:	42ae      	cmp	r6, r5
 800b7e0:	d113      	bne.n	800b80a <__gethex+0x28e>
 800b7e2:	2e01      	cmp	r6, #1
 800b7e4:	d10b      	bne.n	800b7fe <__gethex+0x282>
 800b7e6:	9a02      	ldr	r2, [sp, #8]
 800b7e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b7ec:	6013      	str	r3, [r2, #0]
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	6123      	str	r3, [r4, #16]
 800b7f2:	f8ca 3000 	str.w	r3, [sl]
 800b7f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7f8:	2562      	movs	r5, #98	@ 0x62
 800b7fa:	601c      	str	r4, [r3, #0]
 800b7fc:	e73a      	b.n	800b674 <__gethex+0xf8>
 800b7fe:	1e71      	subs	r1, r6, #1
 800b800:	4620      	mov	r0, r4
 800b802:	f7fe fb6e 	bl	8009ee2 <__any_on>
 800b806:	2800      	cmp	r0, #0
 800b808:	d1ed      	bne.n	800b7e6 <__gethex+0x26a>
 800b80a:	9801      	ldr	r0, [sp, #4]
 800b80c:	4621      	mov	r1, r4
 800b80e:	f7fd ff17 	bl	8009640 <_Bfree>
 800b812:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b814:	2300      	movs	r3, #0
 800b816:	6013      	str	r3, [r2, #0]
 800b818:	2550      	movs	r5, #80	@ 0x50
 800b81a:	e72b      	b.n	800b674 <__gethex+0xf8>
 800b81c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d1f3      	bne.n	800b80a <__gethex+0x28e>
 800b822:	e7e0      	b.n	800b7e6 <__gethex+0x26a>
 800b824:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b826:	2b00      	cmp	r3, #0
 800b828:	d1dd      	bne.n	800b7e6 <__gethex+0x26a>
 800b82a:	e7ee      	b.n	800b80a <__gethex+0x28e>
 800b82c:	0800bff0 	.word	0x0800bff0
 800b830:	0800be83 	.word	0x0800be83
 800b834:	0800c19e 	.word	0x0800c19e
 800b838:	1e6f      	subs	r7, r5, #1
 800b83a:	f1b9 0f00 	cmp.w	r9, #0
 800b83e:	d130      	bne.n	800b8a2 <__gethex+0x326>
 800b840:	b127      	cbz	r7, 800b84c <__gethex+0x2d0>
 800b842:	4639      	mov	r1, r7
 800b844:	4620      	mov	r0, r4
 800b846:	f7fe fb4c 	bl	8009ee2 <__any_on>
 800b84a:	4681      	mov	r9, r0
 800b84c:	117a      	asrs	r2, r7, #5
 800b84e:	2301      	movs	r3, #1
 800b850:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b854:	f007 071f 	and.w	r7, r7, #31
 800b858:	40bb      	lsls	r3, r7
 800b85a:	4213      	tst	r3, r2
 800b85c:	4629      	mov	r1, r5
 800b85e:	4620      	mov	r0, r4
 800b860:	bf18      	it	ne
 800b862:	f049 0902 	orrne.w	r9, r9, #2
 800b866:	f7ff fe21 	bl	800b4ac <rshift>
 800b86a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b86e:	1b76      	subs	r6, r6, r5
 800b870:	2502      	movs	r5, #2
 800b872:	f1b9 0f00 	cmp.w	r9, #0
 800b876:	d047      	beq.n	800b908 <__gethex+0x38c>
 800b878:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b87c:	2b02      	cmp	r3, #2
 800b87e:	d015      	beq.n	800b8ac <__gethex+0x330>
 800b880:	2b03      	cmp	r3, #3
 800b882:	d017      	beq.n	800b8b4 <__gethex+0x338>
 800b884:	2b01      	cmp	r3, #1
 800b886:	d109      	bne.n	800b89c <__gethex+0x320>
 800b888:	f019 0f02 	tst.w	r9, #2
 800b88c:	d006      	beq.n	800b89c <__gethex+0x320>
 800b88e:	f8da 3000 	ldr.w	r3, [sl]
 800b892:	ea49 0903 	orr.w	r9, r9, r3
 800b896:	f019 0f01 	tst.w	r9, #1
 800b89a:	d10e      	bne.n	800b8ba <__gethex+0x33e>
 800b89c:	f045 0510 	orr.w	r5, r5, #16
 800b8a0:	e032      	b.n	800b908 <__gethex+0x38c>
 800b8a2:	f04f 0901 	mov.w	r9, #1
 800b8a6:	e7d1      	b.n	800b84c <__gethex+0x2d0>
 800b8a8:	2501      	movs	r5, #1
 800b8aa:	e7e2      	b.n	800b872 <__gethex+0x2f6>
 800b8ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8ae:	f1c3 0301 	rsb	r3, r3, #1
 800b8b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b8b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d0f0      	beq.n	800b89c <__gethex+0x320>
 800b8ba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b8be:	f104 0314 	add.w	r3, r4, #20
 800b8c2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b8c6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b8ca:	f04f 0c00 	mov.w	ip, #0
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8d4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b8d8:	d01b      	beq.n	800b912 <__gethex+0x396>
 800b8da:	3201      	adds	r2, #1
 800b8dc:	6002      	str	r2, [r0, #0]
 800b8de:	2d02      	cmp	r5, #2
 800b8e0:	f104 0314 	add.w	r3, r4, #20
 800b8e4:	d13c      	bne.n	800b960 <__gethex+0x3e4>
 800b8e6:	f8d8 2000 	ldr.w	r2, [r8]
 800b8ea:	3a01      	subs	r2, #1
 800b8ec:	42b2      	cmp	r2, r6
 800b8ee:	d109      	bne.n	800b904 <__gethex+0x388>
 800b8f0:	1171      	asrs	r1, r6, #5
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b8f8:	f006 061f 	and.w	r6, r6, #31
 800b8fc:	fa02 f606 	lsl.w	r6, r2, r6
 800b900:	421e      	tst	r6, r3
 800b902:	d13a      	bne.n	800b97a <__gethex+0x3fe>
 800b904:	f045 0520 	orr.w	r5, r5, #32
 800b908:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b90a:	601c      	str	r4, [r3, #0]
 800b90c:	9b02      	ldr	r3, [sp, #8]
 800b90e:	601f      	str	r7, [r3, #0]
 800b910:	e6b0      	b.n	800b674 <__gethex+0xf8>
 800b912:	4299      	cmp	r1, r3
 800b914:	f843 cc04 	str.w	ip, [r3, #-4]
 800b918:	d8d9      	bhi.n	800b8ce <__gethex+0x352>
 800b91a:	68a3      	ldr	r3, [r4, #8]
 800b91c:	459b      	cmp	fp, r3
 800b91e:	db17      	blt.n	800b950 <__gethex+0x3d4>
 800b920:	6861      	ldr	r1, [r4, #4]
 800b922:	9801      	ldr	r0, [sp, #4]
 800b924:	3101      	adds	r1, #1
 800b926:	f7fd fe4b 	bl	80095c0 <_Balloc>
 800b92a:	4681      	mov	r9, r0
 800b92c:	b918      	cbnz	r0, 800b936 <__gethex+0x3ba>
 800b92e:	4b1a      	ldr	r3, [pc, #104]	@ (800b998 <__gethex+0x41c>)
 800b930:	4602      	mov	r2, r0
 800b932:	2184      	movs	r1, #132	@ 0x84
 800b934:	e6c5      	b.n	800b6c2 <__gethex+0x146>
 800b936:	6922      	ldr	r2, [r4, #16]
 800b938:	3202      	adds	r2, #2
 800b93a:	f104 010c 	add.w	r1, r4, #12
 800b93e:	0092      	lsls	r2, r2, #2
 800b940:	300c      	adds	r0, #12
 800b942:	f7fc feda 	bl	80086fa <memcpy>
 800b946:	4621      	mov	r1, r4
 800b948:	9801      	ldr	r0, [sp, #4]
 800b94a:	f7fd fe79 	bl	8009640 <_Bfree>
 800b94e:	464c      	mov	r4, r9
 800b950:	6923      	ldr	r3, [r4, #16]
 800b952:	1c5a      	adds	r2, r3, #1
 800b954:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b958:	6122      	str	r2, [r4, #16]
 800b95a:	2201      	movs	r2, #1
 800b95c:	615a      	str	r2, [r3, #20]
 800b95e:	e7be      	b.n	800b8de <__gethex+0x362>
 800b960:	6922      	ldr	r2, [r4, #16]
 800b962:	455a      	cmp	r2, fp
 800b964:	dd0b      	ble.n	800b97e <__gethex+0x402>
 800b966:	2101      	movs	r1, #1
 800b968:	4620      	mov	r0, r4
 800b96a:	f7ff fd9f 	bl	800b4ac <rshift>
 800b96e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b972:	3701      	adds	r7, #1
 800b974:	42bb      	cmp	r3, r7
 800b976:	f6ff aee0 	blt.w	800b73a <__gethex+0x1be>
 800b97a:	2501      	movs	r5, #1
 800b97c:	e7c2      	b.n	800b904 <__gethex+0x388>
 800b97e:	f016 061f 	ands.w	r6, r6, #31
 800b982:	d0fa      	beq.n	800b97a <__gethex+0x3fe>
 800b984:	4453      	add	r3, sl
 800b986:	f1c6 0620 	rsb	r6, r6, #32
 800b98a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b98e:	f7fd ff09 	bl	80097a4 <__hi0bits>
 800b992:	42b0      	cmp	r0, r6
 800b994:	dbe7      	blt.n	800b966 <__gethex+0x3ea>
 800b996:	e7f0      	b.n	800b97a <__gethex+0x3fe>
 800b998:	0800be83 	.word	0x0800be83

0800b99c <L_shift>:
 800b99c:	f1c2 0208 	rsb	r2, r2, #8
 800b9a0:	0092      	lsls	r2, r2, #2
 800b9a2:	b570      	push	{r4, r5, r6, lr}
 800b9a4:	f1c2 0620 	rsb	r6, r2, #32
 800b9a8:	6843      	ldr	r3, [r0, #4]
 800b9aa:	6804      	ldr	r4, [r0, #0]
 800b9ac:	fa03 f506 	lsl.w	r5, r3, r6
 800b9b0:	432c      	orrs	r4, r5
 800b9b2:	40d3      	lsrs	r3, r2
 800b9b4:	6004      	str	r4, [r0, #0]
 800b9b6:	f840 3f04 	str.w	r3, [r0, #4]!
 800b9ba:	4288      	cmp	r0, r1
 800b9bc:	d3f4      	bcc.n	800b9a8 <L_shift+0xc>
 800b9be:	bd70      	pop	{r4, r5, r6, pc}

0800b9c0 <__match>:
 800b9c0:	b530      	push	{r4, r5, lr}
 800b9c2:	6803      	ldr	r3, [r0, #0]
 800b9c4:	3301      	adds	r3, #1
 800b9c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9ca:	b914      	cbnz	r4, 800b9d2 <__match+0x12>
 800b9cc:	6003      	str	r3, [r0, #0]
 800b9ce:	2001      	movs	r0, #1
 800b9d0:	bd30      	pop	{r4, r5, pc}
 800b9d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9d6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b9da:	2d19      	cmp	r5, #25
 800b9dc:	bf98      	it	ls
 800b9de:	3220      	addls	r2, #32
 800b9e0:	42a2      	cmp	r2, r4
 800b9e2:	d0f0      	beq.n	800b9c6 <__match+0x6>
 800b9e4:	2000      	movs	r0, #0
 800b9e6:	e7f3      	b.n	800b9d0 <__match+0x10>

0800b9e8 <__hexnan>:
 800b9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9ec:	680b      	ldr	r3, [r1, #0]
 800b9ee:	6801      	ldr	r1, [r0, #0]
 800b9f0:	115e      	asrs	r6, r3, #5
 800b9f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b9f6:	f013 031f 	ands.w	r3, r3, #31
 800b9fa:	b087      	sub	sp, #28
 800b9fc:	bf18      	it	ne
 800b9fe:	3604      	addne	r6, #4
 800ba00:	2500      	movs	r5, #0
 800ba02:	1f37      	subs	r7, r6, #4
 800ba04:	4682      	mov	sl, r0
 800ba06:	4690      	mov	r8, r2
 800ba08:	9301      	str	r3, [sp, #4]
 800ba0a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ba0e:	46b9      	mov	r9, r7
 800ba10:	463c      	mov	r4, r7
 800ba12:	9502      	str	r5, [sp, #8]
 800ba14:	46ab      	mov	fp, r5
 800ba16:	784a      	ldrb	r2, [r1, #1]
 800ba18:	1c4b      	adds	r3, r1, #1
 800ba1a:	9303      	str	r3, [sp, #12]
 800ba1c:	b342      	cbz	r2, 800ba70 <__hexnan+0x88>
 800ba1e:	4610      	mov	r0, r2
 800ba20:	9105      	str	r1, [sp, #20]
 800ba22:	9204      	str	r2, [sp, #16]
 800ba24:	f7ff fd94 	bl	800b550 <__hexdig_fun>
 800ba28:	2800      	cmp	r0, #0
 800ba2a:	d151      	bne.n	800bad0 <__hexnan+0xe8>
 800ba2c:	9a04      	ldr	r2, [sp, #16]
 800ba2e:	9905      	ldr	r1, [sp, #20]
 800ba30:	2a20      	cmp	r2, #32
 800ba32:	d818      	bhi.n	800ba66 <__hexnan+0x7e>
 800ba34:	9b02      	ldr	r3, [sp, #8]
 800ba36:	459b      	cmp	fp, r3
 800ba38:	dd13      	ble.n	800ba62 <__hexnan+0x7a>
 800ba3a:	454c      	cmp	r4, r9
 800ba3c:	d206      	bcs.n	800ba4c <__hexnan+0x64>
 800ba3e:	2d07      	cmp	r5, #7
 800ba40:	dc04      	bgt.n	800ba4c <__hexnan+0x64>
 800ba42:	462a      	mov	r2, r5
 800ba44:	4649      	mov	r1, r9
 800ba46:	4620      	mov	r0, r4
 800ba48:	f7ff ffa8 	bl	800b99c <L_shift>
 800ba4c:	4544      	cmp	r4, r8
 800ba4e:	d952      	bls.n	800baf6 <__hexnan+0x10e>
 800ba50:	2300      	movs	r3, #0
 800ba52:	f1a4 0904 	sub.w	r9, r4, #4
 800ba56:	f844 3c04 	str.w	r3, [r4, #-4]
 800ba5a:	f8cd b008 	str.w	fp, [sp, #8]
 800ba5e:	464c      	mov	r4, r9
 800ba60:	461d      	mov	r5, r3
 800ba62:	9903      	ldr	r1, [sp, #12]
 800ba64:	e7d7      	b.n	800ba16 <__hexnan+0x2e>
 800ba66:	2a29      	cmp	r2, #41	@ 0x29
 800ba68:	d157      	bne.n	800bb1a <__hexnan+0x132>
 800ba6a:	3102      	adds	r1, #2
 800ba6c:	f8ca 1000 	str.w	r1, [sl]
 800ba70:	f1bb 0f00 	cmp.w	fp, #0
 800ba74:	d051      	beq.n	800bb1a <__hexnan+0x132>
 800ba76:	454c      	cmp	r4, r9
 800ba78:	d206      	bcs.n	800ba88 <__hexnan+0xa0>
 800ba7a:	2d07      	cmp	r5, #7
 800ba7c:	dc04      	bgt.n	800ba88 <__hexnan+0xa0>
 800ba7e:	462a      	mov	r2, r5
 800ba80:	4649      	mov	r1, r9
 800ba82:	4620      	mov	r0, r4
 800ba84:	f7ff ff8a 	bl	800b99c <L_shift>
 800ba88:	4544      	cmp	r4, r8
 800ba8a:	d936      	bls.n	800bafa <__hexnan+0x112>
 800ba8c:	f1a8 0204 	sub.w	r2, r8, #4
 800ba90:	4623      	mov	r3, r4
 800ba92:	f853 1b04 	ldr.w	r1, [r3], #4
 800ba96:	f842 1f04 	str.w	r1, [r2, #4]!
 800ba9a:	429f      	cmp	r7, r3
 800ba9c:	d2f9      	bcs.n	800ba92 <__hexnan+0xaa>
 800ba9e:	1b3b      	subs	r3, r7, r4
 800baa0:	f023 0303 	bic.w	r3, r3, #3
 800baa4:	3304      	adds	r3, #4
 800baa6:	3401      	adds	r4, #1
 800baa8:	3e03      	subs	r6, #3
 800baaa:	42b4      	cmp	r4, r6
 800baac:	bf88      	it	hi
 800baae:	2304      	movhi	r3, #4
 800bab0:	4443      	add	r3, r8
 800bab2:	2200      	movs	r2, #0
 800bab4:	f843 2b04 	str.w	r2, [r3], #4
 800bab8:	429f      	cmp	r7, r3
 800baba:	d2fb      	bcs.n	800bab4 <__hexnan+0xcc>
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	b91b      	cbnz	r3, 800bac8 <__hexnan+0xe0>
 800bac0:	4547      	cmp	r7, r8
 800bac2:	d128      	bne.n	800bb16 <__hexnan+0x12e>
 800bac4:	2301      	movs	r3, #1
 800bac6:	603b      	str	r3, [r7, #0]
 800bac8:	2005      	movs	r0, #5
 800baca:	b007      	add	sp, #28
 800bacc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bad0:	3501      	adds	r5, #1
 800bad2:	2d08      	cmp	r5, #8
 800bad4:	f10b 0b01 	add.w	fp, fp, #1
 800bad8:	dd06      	ble.n	800bae8 <__hexnan+0x100>
 800bada:	4544      	cmp	r4, r8
 800badc:	d9c1      	bls.n	800ba62 <__hexnan+0x7a>
 800bade:	2300      	movs	r3, #0
 800bae0:	f844 3c04 	str.w	r3, [r4, #-4]
 800bae4:	2501      	movs	r5, #1
 800bae6:	3c04      	subs	r4, #4
 800bae8:	6822      	ldr	r2, [r4, #0]
 800baea:	f000 000f 	and.w	r0, r0, #15
 800baee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800baf2:	6020      	str	r0, [r4, #0]
 800baf4:	e7b5      	b.n	800ba62 <__hexnan+0x7a>
 800baf6:	2508      	movs	r5, #8
 800baf8:	e7b3      	b.n	800ba62 <__hexnan+0x7a>
 800bafa:	9b01      	ldr	r3, [sp, #4]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d0dd      	beq.n	800babc <__hexnan+0xd4>
 800bb00:	f1c3 0320 	rsb	r3, r3, #32
 800bb04:	f04f 32ff 	mov.w	r2, #4294967295
 800bb08:	40da      	lsrs	r2, r3
 800bb0a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bb0e:	4013      	ands	r3, r2
 800bb10:	f846 3c04 	str.w	r3, [r6, #-4]
 800bb14:	e7d2      	b.n	800babc <__hexnan+0xd4>
 800bb16:	3f04      	subs	r7, #4
 800bb18:	e7d0      	b.n	800babc <__hexnan+0xd4>
 800bb1a:	2004      	movs	r0, #4
 800bb1c:	e7d5      	b.n	800baca <__hexnan+0xe2>

0800bb1e <__ascii_mbtowc>:
 800bb1e:	b082      	sub	sp, #8
 800bb20:	b901      	cbnz	r1, 800bb24 <__ascii_mbtowc+0x6>
 800bb22:	a901      	add	r1, sp, #4
 800bb24:	b142      	cbz	r2, 800bb38 <__ascii_mbtowc+0x1a>
 800bb26:	b14b      	cbz	r3, 800bb3c <__ascii_mbtowc+0x1e>
 800bb28:	7813      	ldrb	r3, [r2, #0]
 800bb2a:	600b      	str	r3, [r1, #0]
 800bb2c:	7812      	ldrb	r2, [r2, #0]
 800bb2e:	1e10      	subs	r0, r2, #0
 800bb30:	bf18      	it	ne
 800bb32:	2001      	movne	r0, #1
 800bb34:	b002      	add	sp, #8
 800bb36:	4770      	bx	lr
 800bb38:	4610      	mov	r0, r2
 800bb3a:	e7fb      	b.n	800bb34 <__ascii_mbtowc+0x16>
 800bb3c:	f06f 0001 	mvn.w	r0, #1
 800bb40:	e7f8      	b.n	800bb34 <__ascii_mbtowc+0x16>

0800bb42 <_realloc_r>:
 800bb42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb46:	4680      	mov	r8, r0
 800bb48:	4615      	mov	r5, r2
 800bb4a:	460c      	mov	r4, r1
 800bb4c:	b921      	cbnz	r1, 800bb58 <_realloc_r+0x16>
 800bb4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb52:	4611      	mov	r1, r2
 800bb54:	f7fd bca8 	b.w	80094a8 <_malloc_r>
 800bb58:	b92a      	cbnz	r2, 800bb66 <_realloc_r+0x24>
 800bb5a:	f7fd fc31 	bl	80093c0 <_free_r>
 800bb5e:	2400      	movs	r4, #0
 800bb60:	4620      	mov	r0, r4
 800bb62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb66:	f000 f840 	bl	800bbea <_malloc_usable_size_r>
 800bb6a:	4285      	cmp	r5, r0
 800bb6c:	4606      	mov	r6, r0
 800bb6e:	d802      	bhi.n	800bb76 <_realloc_r+0x34>
 800bb70:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bb74:	d8f4      	bhi.n	800bb60 <_realloc_r+0x1e>
 800bb76:	4629      	mov	r1, r5
 800bb78:	4640      	mov	r0, r8
 800bb7a:	f7fd fc95 	bl	80094a8 <_malloc_r>
 800bb7e:	4607      	mov	r7, r0
 800bb80:	2800      	cmp	r0, #0
 800bb82:	d0ec      	beq.n	800bb5e <_realloc_r+0x1c>
 800bb84:	42b5      	cmp	r5, r6
 800bb86:	462a      	mov	r2, r5
 800bb88:	4621      	mov	r1, r4
 800bb8a:	bf28      	it	cs
 800bb8c:	4632      	movcs	r2, r6
 800bb8e:	f7fc fdb4 	bl	80086fa <memcpy>
 800bb92:	4621      	mov	r1, r4
 800bb94:	4640      	mov	r0, r8
 800bb96:	f7fd fc13 	bl	80093c0 <_free_r>
 800bb9a:	463c      	mov	r4, r7
 800bb9c:	e7e0      	b.n	800bb60 <_realloc_r+0x1e>

0800bb9e <__ascii_wctomb>:
 800bb9e:	4603      	mov	r3, r0
 800bba0:	4608      	mov	r0, r1
 800bba2:	b141      	cbz	r1, 800bbb6 <__ascii_wctomb+0x18>
 800bba4:	2aff      	cmp	r2, #255	@ 0xff
 800bba6:	d904      	bls.n	800bbb2 <__ascii_wctomb+0x14>
 800bba8:	228a      	movs	r2, #138	@ 0x8a
 800bbaa:	601a      	str	r2, [r3, #0]
 800bbac:	f04f 30ff 	mov.w	r0, #4294967295
 800bbb0:	4770      	bx	lr
 800bbb2:	700a      	strb	r2, [r1, #0]
 800bbb4:	2001      	movs	r0, #1
 800bbb6:	4770      	bx	lr

0800bbb8 <fiprintf>:
 800bbb8:	b40e      	push	{r1, r2, r3}
 800bbba:	b503      	push	{r0, r1, lr}
 800bbbc:	4601      	mov	r1, r0
 800bbbe:	ab03      	add	r3, sp, #12
 800bbc0:	4805      	ldr	r0, [pc, #20]	@ (800bbd8 <fiprintf+0x20>)
 800bbc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbc6:	6800      	ldr	r0, [r0, #0]
 800bbc8:	9301      	str	r3, [sp, #4]
 800bbca:	f7ff f9b1 	bl	800af30 <_vfiprintf_r>
 800bbce:	b002      	add	sp, #8
 800bbd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbd4:	b003      	add	sp, #12
 800bbd6:	4770      	bx	lr
 800bbd8:	2000001c 	.word	0x2000001c

0800bbdc <abort>:
 800bbdc:	b508      	push	{r3, lr}
 800bbde:	2006      	movs	r0, #6
 800bbe0:	f000 f834 	bl	800bc4c <raise>
 800bbe4:	2001      	movs	r0, #1
 800bbe6:	f7f5 ff21 	bl	8001a2c <_exit>

0800bbea <_malloc_usable_size_r>:
 800bbea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbee:	1f18      	subs	r0, r3, #4
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	bfbc      	itt	lt
 800bbf4:	580b      	ldrlt	r3, [r1, r0]
 800bbf6:	18c0      	addlt	r0, r0, r3
 800bbf8:	4770      	bx	lr

0800bbfa <_raise_r>:
 800bbfa:	291f      	cmp	r1, #31
 800bbfc:	b538      	push	{r3, r4, r5, lr}
 800bbfe:	4605      	mov	r5, r0
 800bc00:	460c      	mov	r4, r1
 800bc02:	d904      	bls.n	800bc0e <_raise_r+0x14>
 800bc04:	2316      	movs	r3, #22
 800bc06:	6003      	str	r3, [r0, #0]
 800bc08:	f04f 30ff 	mov.w	r0, #4294967295
 800bc0c:	bd38      	pop	{r3, r4, r5, pc}
 800bc0e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bc10:	b112      	cbz	r2, 800bc18 <_raise_r+0x1e>
 800bc12:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc16:	b94b      	cbnz	r3, 800bc2c <_raise_r+0x32>
 800bc18:	4628      	mov	r0, r5
 800bc1a:	f000 f831 	bl	800bc80 <_getpid_r>
 800bc1e:	4622      	mov	r2, r4
 800bc20:	4601      	mov	r1, r0
 800bc22:	4628      	mov	r0, r5
 800bc24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc28:	f000 b818 	b.w	800bc5c <_kill_r>
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	d00a      	beq.n	800bc46 <_raise_r+0x4c>
 800bc30:	1c59      	adds	r1, r3, #1
 800bc32:	d103      	bne.n	800bc3c <_raise_r+0x42>
 800bc34:	2316      	movs	r3, #22
 800bc36:	6003      	str	r3, [r0, #0]
 800bc38:	2001      	movs	r0, #1
 800bc3a:	e7e7      	b.n	800bc0c <_raise_r+0x12>
 800bc3c:	2100      	movs	r1, #0
 800bc3e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bc42:	4620      	mov	r0, r4
 800bc44:	4798      	blx	r3
 800bc46:	2000      	movs	r0, #0
 800bc48:	e7e0      	b.n	800bc0c <_raise_r+0x12>
	...

0800bc4c <raise>:
 800bc4c:	4b02      	ldr	r3, [pc, #8]	@ (800bc58 <raise+0xc>)
 800bc4e:	4601      	mov	r1, r0
 800bc50:	6818      	ldr	r0, [r3, #0]
 800bc52:	f7ff bfd2 	b.w	800bbfa <_raise_r>
 800bc56:	bf00      	nop
 800bc58:	2000001c 	.word	0x2000001c

0800bc5c <_kill_r>:
 800bc5c:	b538      	push	{r3, r4, r5, lr}
 800bc5e:	4d07      	ldr	r5, [pc, #28]	@ (800bc7c <_kill_r+0x20>)
 800bc60:	2300      	movs	r3, #0
 800bc62:	4604      	mov	r4, r0
 800bc64:	4608      	mov	r0, r1
 800bc66:	4611      	mov	r1, r2
 800bc68:	602b      	str	r3, [r5, #0]
 800bc6a:	f7f5 fecf 	bl	8001a0c <_kill>
 800bc6e:	1c43      	adds	r3, r0, #1
 800bc70:	d102      	bne.n	800bc78 <_kill_r+0x1c>
 800bc72:	682b      	ldr	r3, [r5, #0]
 800bc74:	b103      	cbz	r3, 800bc78 <_kill_r+0x1c>
 800bc76:	6023      	str	r3, [r4, #0]
 800bc78:	bd38      	pop	{r3, r4, r5, pc}
 800bc7a:	bf00      	nop
 800bc7c:	200048e8 	.word	0x200048e8

0800bc80 <_getpid_r>:
 800bc80:	f7f5 bebc 	b.w	80019fc <_getpid>

0800bc84 <_init>:
 800bc84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc86:	bf00      	nop
 800bc88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc8a:	bc08      	pop	{r3}
 800bc8c:	469e      	mov	lr, r3
 800bc8e:	4770      	bx	lr

0800bc90 <_fini>:
 800bc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc92:	bf00      	nop
 800bc94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc96:	bc08      	pop	{r3}
 800bc98:	469e      	mov	lr, r3
 800bc9a:	4770      	bx	lr
